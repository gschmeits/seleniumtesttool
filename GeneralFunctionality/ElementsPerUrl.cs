// ***********************************************************************
// Assembly         : GeneralFunctionality
// Author           : G.H.M.H. Schmeits
// Created          : 04-21-2018
//
// Last Modified By : G.H.M.H. Schmeits
// Last Modified On : 05-07-2019
// ***********************************************************************
// <copyright file="ElementsPerUrl.cs" company="SCHMEITS SOFTWARE">
//     Copyright ©  2018
// </copyright>
// <summary></summary>
// ***********************************************************************
namespace GeneralFunctionality
{
    using DataStorage;
    using OpenQA.Selenium;
    using OpenQA.Selenium.Chrome;
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// Class ElementsPerUrl.
    /// </summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for ElementsPerUrl
    public class ElementsPerUrl
    {
        /// <summary>
        /// The driver
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for driver
        private static IWebDriver driver;

        /// <summary>
        /// Gets or sets the waarde.
        /// </summary>
        /// <value>The waarde.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Waarde
        private static string Waarde { get; set; }

        /// <summary>
        /// Elementses the per URL get.
        /// </summary>
        /// <param name="urlname">The urlname.</param>
        /// <returns>List&lt;NewElements.AllElements&gt;.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ElementsPerUrlGet
        public static List<NewElements.AllElements> ElementsPerUrlGet(string urlname)
        {
            var chromePath = Functions.GetCurrentDir(0);
            driver = new ChromeDriver(chromePath) { Url = urlname };

            driver.Manage().Window.Maximize();

            var el = driver.FindElements(By.CssSelector("*"));
            NewElements.IniElements(urlname);
            foreach (var element in el)
            {
                Waarde = string.Empty;
                if (element != null)
                {
                    try
                    {
                        var elementTag = element.TagName.ToLower();
                        if ((elementTag == "a" || elementTag == "link" || elementTag == "input" || elementTag == "img"
                             || elementTag == "iframe") && element.Displayed)
                        {

                            if (element.Text.Length > 0 || element.GetAttribute("href").Length > 0
                                                        || element.GetAttribute("id").Length > 0
                                                        || element.GetAttribute("name").Length > 0
                                                        || element.GetAttribute("class").Length > 0)
                            {
                                SetElementsToList(element);
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e);
                        General.LogMessage("\r\n" + e.Message + "\r\n" + e.StackTrace + "\r\n" + e.Source, 4);
                    }
                }
            }

            driver.Quit();

            return NewElements.GetAllElements(urlname);
        }

        /// <summary>
        /// Checks the attribute.
        /// </summary>
        /// <param name="element">The element.</param>
        /// <param name="attribute1">The attribute1.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CheckAttribute
        private static void CheckAttribute(IWebElement element, string attribute1)
        {
            if (element.GetAttribute(attribute1) != null)
            {
                var att = element.GetAttribute(attribute1).Trim();
                if (att.Length > 0)
                {
                    var tekst = "               : ";
                    Waarde += attribute1 + tekst.Substring(attribute1.Length, tekst.Length - attribute1.Length)
                                         + element.GetAttribute(attribute1) + "\r\n";
                }
            }
        }

        /// <summary>
        /// Sets the elements to list.
        /// </summary>
        /// <param name="element">The element.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for SetElementsToList
        private static void SetElementsToList(IWebElement element)
        {
            if (element != null)
            {
                Functions.HighlightAndScreenshot(
                    driver,
                    element,
                    OverallSettings.ShowDuration,
                    OverallSettings.ShowBorderColor,
                    OverallSettings.ShowBorderWidth);

                NewElements.SetElements(
                    element.TagName, // global
                    element.Text, // global
                    element.GetAttribute("accept"), // input
                    element.GetAttribute("accesskey"), // global
                    element.GetAttribute("align"), // inut, img, iframe
                    element.GetAttribute("alt"), // inout, img
                    element.GetAttribute("autocomplete"), // input
                    element.GetAttribute("autofocus"), // input
                    element.GetAttribute("border"), // img
                    element.GetAttribute("charset"), // a, link
                    element.GetAttribute("checked"), // input
                    element.GetAttribute("class"), // global
                    element.GetAttribute("contenteditable"),
                    element.GetAttribute("contextmenu"), // global
                    element.GetAttribute("coords"), // a
                    element.GetAttribute("crossorigin"), // link, img
                    element.GetAttribute("dir"), // global
                    element.GetAttribute("dirname"), // input
                    element.GetAttribute("disabled"), // input
                    element.GetAttribute("download"), // a
                    element.GetAttribute("draggable"), // global
                    element.GetAttribute("dropzone"), // global
                    element.GetAttribute("form"), // input
                    element.GetAttribute("formaction"), // input
                    element.GetAttribute("formenctype"), // input
                    element.GetAttribute("formmethod"), // input
                    element.GetAttribute("formnovalidate"), // input
                    element.GetAttribute("formtarget"), // input
                    element.GetAttribute("frameborder"), // iframe
                    element.GetAttribute("height"), // input, img, iframe
                    element.GetAttribute("hidden"), // global
                    element.GetAttribute("href"), // a, link
                    element.GetAttribute("hreflang"), // a, link
                    element.GetAttribute("hspace"), // img
                    element.GetAttribute("id"), // global
                    element.GetAttribute("ismap"), // img
                    element.GetAttribute("lang"), // global
                    element.GetAttribute("list"), // input
                    element.GetAttribute("longdesc"), // img, iframe
                    element.GetAttribute("marginheight"), // iframe
                    element.GetAttribute("marginwidth"), // iframe
                    element.GetAttribute("max"), // input
                    element.GetAttribute("maxlength"), // input
                    element.GetAttribute("media"), // a, link
                    element.GetAttribute("min"), // input
                    element.GetAttribute("multiple"), // input
                    element.GetAttribute("name"), // a, input, iframe
                    element.GetAttribute("pattern"), // input
                    element.GetAttribute("placeholder"), // input
                    element.GetAttribute("readonly"), // input
                    element.GetAttribute("rel"), // a, link
                    element.GetAttribute("required"), // input
                    element.GetAttribute("rev"), // a, link
                    element.GetAttribute("sandbox"), // iframe
                    element.GetAttribute("scrolling"), // iframe
                    element.GetAttribute("shape"), // a, link
                    element.GetAttribute("size"), // input
                    element.GetAttribute("sizes"), // img
                    element.GetAttribute("spellcheck"),
                    element.GetAttribute("src"), // input, img, iframe
                    element.GetAttribute("srcdoc"), // iframe
                    element.GetAttribute("step"), // input
                    element.GetAttribute("style"), // global
                    element.GetAttribute("tabindex"), // global
                    element.GetAttribute("target"), // a, link
                    element.GetAttribute("title"), // global
                    element.GetAttribute("translage"), // global
                    element.GetAttribute("type"), // a, link, input 
                    element.GetAttribute("usemap"), // img
                    element.GetAttribute("value"), // input
                    element.GetAttribute("vspace"), // img
                    element.GetAttribute("width"),
                    true); // input, iframe
            }
        }
    }
}