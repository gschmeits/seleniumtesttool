// ***********************************************************************
// Assembly         : WPFTestResults.Tests
// Author           : G.H.M.H. Schmeits
// Created          : 10-19-2018
//
// Last Modified By : G.H.M.H. Schmeits
// Last Modified On : 10-22-2018
// ***********************************************************************
// <copyright file="DataTables.cs" company="SCHMEITS SOFTWARE">
//     Copyright (c) SCHMEITS SOFTWARE. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using NUnit.Framework;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using DataStorage;
using HtmlAgilityPack;
using MySql.Data.MySqlClient;
using OpenQA.Selenium.Chrome;

namespace WPFTestResults.Tests
{
    /// <summary>
    /// Class TestClass_0002_DataTables_Users.
    /// </summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for TestClass_0002_DataTables_Users
    [TestFixture]

    public class TestClass_0002_DataTables_Users
    {
        /// <summary>
        /// The gegevens
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for gegevens
        private static List<DataStorage.Login.Medewerker> gegevens = new List<DataStorage.Login.Medewerker>();

        /// <summary>
        /// Starts the test.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for startTest
        [SetUp]
        public void startTest()
        {
            GeneralFunctionality.Functions.InitializeDatabaseConnection(true);
            gegevens = LoginUsers.GetSelectedUser("GS");
        }

        /// <summary>
        /// Gets the existing user.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetExistingUser
        [Test]
        [Category("Database Users")]
        public void GetExistingUser()
        {
            // TODO: Add your test code here
            Assert.AreEqual(LoginUsers.GetAantalGebruikers("GS", "Anders1234!"), 1);
        }

        /// <summary>
        /// Gets the not existing user.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetNotExistingUser
        [Test]
        [Category("Database Users")]
        public void GetNotExistingUser()
        {
            Assert.AreEqual(LoginUsers.GetAantalGebruikers("US", "1234de"), 0);
        }

        /// <summary>
        /// Gets the selected user data code.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetSelectedUserData_Code
        [Test]
        [Category("Database Users")]
        public void GetSelectedUserData_Code()
        {
            Assert.AreEqual("GS", gegevens[0].MedewerkerCode);
        }

        /// <summary>
        /// Gets the selected user data naam.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetSelectedUserData_Naam
        [Test]
        [Category("Database Users")]
        public void GetSelectedUserData_Naam()
        {
            Assert.AreEqual("Ger Schmeits", gegevens[0].MedewerkerNaam);
        }

        /// <summary>
        /// Gets the selected user data password.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetSelectedUserData_Password
        [Test]
        [Category("Database Users")]
        public void GetSelectedUserData_Password()
        {
            Assert.AreEqual("e62d4e76381f68ce210fae5a23166922742152de", gegevens[0].Wachtwoord);
        }

        /// <summary>
        /// Gets the selected user data ingelogd.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetSelectedUserData_Ingelogd
        [Test]
        [Category("Database Users")]
        public void GetSelectedUserData_Ingelogd()
        {
            Assert.AreEqual(false, gegevens[0].Ingelogd);
        }

        /// <summary>
        /// Gets the selected user data rol.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetSelectedUserData_Rol
        [Test]
        [Category("Database Users")]
        public void GetSelectedUserData_Rol()
        {
            Assert.AreEqual(1, gegevens[0].Rol);
        }

        /// <summary>
        /// Gets the selected user data actief.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetSelectedUserData_Actief
        [Test]
        [Category("Database Users")]
        public void GetSelectedUserData_Actief()
        {
            Assert.AreEqual(false, gegevens[0].Actief);
        }

        /// <summary>
        /// Gets the selected user data blokked.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetSelectedUserData_Blokked
        [Test]
        [Category("Database Users")]
        public void GetSelectedUserData_Blokked()
        {
            Assert.AreEqual(false, gegevens[0].Geblokkeerd);
        }

        /// <summary>
        /// Gets the selected user data aangemaakt.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetSelectedUserData_Aangemaakt
        [Test]
        [Category("Database Users")]
        public void GetSelectedUserData_Aangemaakt()
        {
            Assert.AreEqual(Convert.ToDateTime("2018-07-21 10:40:41"), gegevens[0].DatumAangemaakt);
        }

        /// <summary>
        /// Gets the selected user data gewijzigd.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetSelectedUserData_Gewijzigd
        [Test]
        [Category("Database Users")]
        public void GetSelectedUserData_Gewijzigd()
        {
            Assert.AreEqual(Convert.ToDateTime("2018-08-23 10:56:37"), gegevens[0].DatumGewijzigd);
        }

        /// <summary>
        /// Gets the selected user data blokkeerd.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetSelectedUserData_Blokkeerd
        [Test]
        [Category("Database Users")]
        public void GetSelectedUserData_Blokkeerd()
        {
            Assert.AreEqual(false, gegevens[0].Geblokkeerd);
        }
    }

    /// <summary>
    /// Class TestClass_0003_DataTables_TestCases.
    /// </summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for TestClass_0003_DataTables_TestCases
    [TestFixture]
    [Category("Database TestCases")]
    public class TestClass_0003_DataTables_TestCases
    {
        /// <summary>
        /// The test cases
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for testCases
        public static List<TestResultsFactory.TestCases> testCases = new List<TestResultsFactory.TestCases>();

        /// <summary>
        /// Starts the test test cases.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for startTest_TestCases
        [SetUp]
        public void startTest_TestCases()
        {
            GeneralFunctionality.Functions.InitializeDatabaseConnection(false);
            testCases = TestResultsFactory.GetTestCases("UVT_Test_03_EmailSettings_02_EmailTemplates");
        }

        /// <summary>
        /// Gets the data from test case count test cases.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetDataFromTestCase_CountTestCases
        [Test]
        public void GetDataFromTestCase_CountTestCases()
        {
            Assert.AreEqual(16, testCases.Count);
        }

        /// <summary>
        /// Gets the data from test case test cases001 identifier.
        /// </summary>
        /// <param name="id">The identifier.</param>
        /// <param name="teller">The teller.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetDataFromTestCase_TestCases001_Id
        [TestCase("18027", 0)]
        [TestCase("18028", 1)]
        [TestCase("18029", 2)]
        [TestCase("18030", 3)]
        [TestCase("18055", 4)]
        [TestCase("18056", 5)]
        [TestCase("18057", 6)]
        [TestCase("18058", 7)]
        [TestCase("18059", 8)]
        [TestCase("18060", 9)]
        [TestCase("18061", 10)]
        [TestCase("18062", 11)]
        [TestCase("18063", 12)]
        [TestCase("18064", 13)]
        [TestCase("18065", 14)]
        [TestCase("18066", 15)]

        public void GetDataFromTestCase_TestCases001_Id(string id, int teller)
        {
            Assert.AreEqual(id, testCases[teller].id);
        }

        /// <summary>
        /// Gets the data from test case test cases001 test nr.
        /// </summary>
        /// <param name="testnr">The testnr.</param>
        /// <param name="teller">The teller.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetDataFromTestCase_TestCases001_TestNr
        [TestCase(1, 0)]
        [TestCase(2, 1)]
        [TestCase(3, 2)]
        [TestCase(4, 3)]
        [TestCase(11, 4)]
        [TestCase(12, 5)]
        [TestCase(13, 6)]
        [TestCase(14, 7)]
        [TestCase(15, 8)]
        [TestCase(16, 9)]
        [TestCase(17, 10)]
        [TestCase(18, 11)]
        [TestCase(19, 12)]
        [TestCase(20, 13)]
        [TestCase(21, 14)]
        [TestCase(22, 15)]
        public void GetDataFromTestCase_TestCases001_TestNr(int testnr, int teller)
        {
            Assert.AreEqual(testnr, testCases[teller].testnr);
        }

        /// <summary>
        /// Gets the data from test case test cases001 test case.
        /// </summary>
        /// <param name="testcase">The testcase.</param>
        /// <param name="teller">The teller.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetDataFromTestCase_TestCases001_TestCase
        [TestCase("Go to Login Page", 0)]
        [TestCase("Login", 1)]
        [TestCase("Login", 2)]
        [TestCase("Login", 3)]
        [TestCase("Go to Email Template", 4)]
        [TestCase("Go to Email Template", 5)]
        [TestCase("Create a new template", 6)]
        [TestCase("Create a new template", 7)]
        [TestCase("Create a new template", 8)]
        [TestCase("Create a new template", 9)]
        [TestCase("Create a new template", 10)]
        [TestCase("Create a new template", 11)]
        [TestCase("Create a new template", 12)]
        [TestCase("Create a new template", 13)]
        [TestCase("Create a new template", 14)]
        [TestCase("Create a new template", 15)]
        public void GetDataFromTestCase_TestCases001_TestCase(string testcase, int teller)
        {
            Assert.AreEqual(testcase, testCases[teller].testcase);
        }

        /// <summary>
        /// Gets the data from test case test cases001 test element.
        /// </summary>
        /// <param name="element">The element.</param>
        /// <param name="teller">The teller.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetDataFromTestCase_TestCases001_TestElement
        [TestCase("//html/body/div[1]/div/div[4]/a[2]", 0)]
        [TestCase("username", 1)]
        [TestCase("password", 2)]
        [TestCase("login", 3)]
        [TestCase("//*[@id=\"main-menu\"]/ul[1]/li[3]/a", 4)]
        [TestCase("//*[@id=\"main-menu\"]/ul[1]/li[3]/div/a[2]", 5)]
        [TestCase("/html/body/div/div/div/div[2]/div/div[1]/div/ul/li/div/a/div/div/h3/span", 6)]
        [TestCase("form-email-template-language", 7)]
        [TestCase("form-email-template-name", 8)]
        [TestCase("form-email-template-email-title", 9)]
        [TestCase("form-email-template-event-trigger", 10)]
        [TestCase("//*[@id=\"form-email-template\"]/div[2]/div[2]/div[2]/span/span[1]/span/ul", 11)]
        [TestCase("form-event-template-send-to", 12)]
        [TestCase("active", 13)]
        [TestCase("//*[@id=\"cke_1_contents\"]/iframe//html/body", 14)]
        [TestCase("//*[@id=\"form-email-template\"]/div[4]/div[2]/ul/li[2]/button/div/div/div/h3", 15)]
        public void GetDataFromTestCase_TestCases001_TestElement(string element,int teller)
        {
            Assert.AreEqual(element, testCases[teller].testelement);
        }
    }

    /// <summary>
    /// Class DataTables_TestRuns.
    /// </summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for DataTables_TestRuns
    [TestFixture]
    [Category("Database TestRuns")]
    public class DataTables_TestRuns
    {
        /// <summary>
        /// The testruns
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for testruns
        public static List<TestResults.Testruns_Selenium> testruns = new List<TestResults.Testruns_Selenium>();
        /// <summary>
        /// Gets the test runs.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetTestRuns
        [SetUp]
        public void GetTestRuns()
        {
            GeneralFunctionality.Functions.InitializeDatabaseConnection(false);
            testruns = TestResults.GetResultTestRun("2374");
        }

        /// <summary>
        /// Gets the test run application.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetTestRun_Application
        [Test]
        public void GetTestRun_Application()
        {
            Assert.AreEqual("UVT_Education_School", testruns[0].testrun_application);
        }

        /// <summary>
        /// Gets the test run passed.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetTestRun_Passed
        [Test]
        public void GetTestRun_Passed()
        {
            Assert.AreEqual("1", testruns[0].testrun_passed);
        }

        /// <summary>
        /// Gets the test run failed.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetTestRun_Failed
        [Test]
        public void GetTestRun_Failed()
        {
            Assert.AreEqual("0", testruns[0].testrun_failed);
        }
    }

    /// <summary>
    /// Class TestClass_0001_DataTables_Elements.
    /// </summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for TestClass_0001_DataTables_Elements
    public class TestClass_0001_DataTables_Elements
    {
        /// <summary>
        /// The gegevens
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for gegevens
        private static  List<NewElements.AllElements> gegevens = new List<NewElements.AllElements>();
        /// <summary>
        /// The URL
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for url
        private static string url = "http://squerist.nl";
        /// <summary>
        /// The teller
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for teller
        private static Int32 teller = 0;

        /// <summary>
        /// Starts the test.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for startTest
        [SetUp]
        public void startTest()
        {
            GeneralFunctionality.Functions.InitializeDatabaseConnection(false);
            ElementsFromDatabase.DeleteDataFromDatabase(url);
        }

        /// <summary>
        /// Test0001s the fill database with elements.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Test0001_FillDatabaseWithElements
        [Test]
        public void Test0001_FillDatabaseWithElements()
        {
            var chromePath = @"C:\Program Files (x86)\SeleniumTestTool\Settings\";
            var _driver = new ChromeDriver(chromePath);
            _driver.Navigate().GoToUrl(url);
            var html = _driver.Url;
            var htmlDoc = new HtmlWeb().Load(html);
            var htmlBody = htmlDoc.DocumentNode.SelectSingleNode("*");
            var childNodes = htmlBody.ChildNodes;

            foreach (var node in childNodes) ExamineNode(node, string.Empty);
           
            _driver.Quit();

            var dt = GenericDataRead.GetData("SELECT * FROM selenium_elements WHERE url= 'http://squerist.nl';");
            Assert.AreEqual(teller, dt.Rows.Count);

            gegevens = ElementsFromDatabase.GetDataTable(url);
        }


        /// <summary>
        /// Test0002s the get element tagname.
        /// </summary>
        /// <param name="data">The data.</param>
        /// <param name="teller">The teller.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Test0002_GetElement_Tagname
        [TestCase("tagName", "link", 0)]
        [TestCase("tagName", "link", 1)]
        [TestCase("tagName", "link", 2)]
        [TestCase("tagName", "link", 3)]
        [TestCase("tagName", "link", 3)]
        [TestCase("tagName", "link", 4)]
        [TestCase("tagName", "link", 6)]
        [TestCase("tagName", "link", 7)]
        [TestCase("tagName", "link", 8)]
        [TestCase("tagName", "link", 9)]
        [TestCase("tagName", "link", 10)]
        [TestCase("tagName", "link", 11)]
        [TestCase("tagName", "link", 12)]
        [TestCase("tagName", "link", 13)]
        [TestCase("tagName", "link", 14)]
        [TestCase("tagName", "link", 15)]
        [TestCase("tagName", "a", 16)]
        [TestCase("tagName", "a", 17)]
        [TestCase("tagName", "a", 18)]
        [TestCase("tagName", "a", 19)]
        [TestCase("tagName", "a", 20)]
        [TestCase("tagName", "a", 21)]
        [TestCase("tagName", "a", 22)]
        [TestCase("tagName", "a", 23)]
        [TestCase("tagName", "img", 24)]
        [TestCase("tagName", "img", 25)]
        [TestCase("tagName", "img", 26)]
        [TestCase("tagName", "img", 27)]
        [TestCase("tagName", "img", 28)]
        [TestCase("tagName", "img", 29)]
        [TestCase("xpath", "/html/head/link[1]", 0)]
        [TestCase("xpath", "/html/head/link[2]", 1)]
        [TestCase("xpath", "/html/head/link[3]", 2)]
        [TestCase("xpath", "/html/head/link[4]", 3)]
        [TestCase("xpath", "/html/head/link[5]", 3)]
        [TestCase("xpath", "/html/head/link[6]", 4)]
        [TestCase("xpath", "/html/head/link[7]", 6)]
        [TestCase("xpath", "/html/head/link[8]", 7)]
        [TestCase("xpath", "/html/head/link[9]", 8)]
        [TestCase("xpath", "/html/head/link[10]", 9)]
        [TestCase("xpath", "/html/head/link[11]", 10)]
        [TestCase("xpath", "/html/head/link[12]", 11)]
        [TestCase("xpath", "/html/head/link[13]", 12)]
        [TestCase("xpath", "/html/head/link[14]", 13)]
        [TestCase("xpath", "/html/head/link[15]", 14)]
        [TestCase("xpath", "/html/head/link[16]", 15)]
        [TestCase("xpath", "/html/body/header/div/div/div/div/a", 16)]
        [TestCase("xpath", "/html/body/header/div/div/div/div/ul/li[1]/a", 17)]
        [TestCase("xpath", "/html/body/header/div/div/div/div/ul/li[2]/a", 18)]
        [TestCase("xpath", "/html/body/header/div/div/div/div/ul/li[3]/a", 19)]
        [TestCase("xpath", "/html/body/header/div/div/div/div/ul/li[4]/a", 20)]
        [TestCase("xpath", "/html/body/header/div/div/div/div/ul/li[5]/a", 21)]
        [TestCase("xpath", "/html/body/header/div/div/div/div/ul/li[6]/a", 22)]
        [TestCase("xpath", "/html/body/header/div/div/div/div/ul/li[7]/a", 23)]
        [TestCase("xpath", "/html/body/div/div/div/div/div/div/p/img", 24)]
        [TestCase("xpath", "/html/body/div/div/div/div/div/div/div/ul/li[1]/img", 25)]
        [TestCase("xpath", "/html/body/div/div/div/div/div/div/div/ul/li/div/img", 26)]
        [TestCase("xpath", "/html/body/div/div/div/div/div/div/div/ul/li[2]/img", 27)]
        [TestCase("xpath", "/html/body/div/div/div/div/div/div/div/ul/li[3]/img", 28)]
        [TestCase("xpath", "/html/body/div/div/div/div/div/div/div/ul/li[4]/img", 29)]
        public void Test0002_GetElement_Tagname(string element1, string data, int teller)
        {
            switch (element1)
            {
                case "tagName":
                    Assert.AreEqual(data, gegevens[teller].elementTagname);
                    break;
                case "xpath":
                    Assert.AreEqual(data, gegevens[teller].elementXpath);
                    break;
            }

        }

        /// <summary>
        /// Test0003s the delete elements.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Test0003_Delete_Elements
        [Test]
        public void Test0003_Delete_Elements()
        {
            ElementsFromDatabase.DeleteDataFromDatabase(url);
            var query = "SELECT COUNT(*) FROM selenium_elements WHERE url = '" + url + "';";
            DataTable dt = GenericDataRead.GetData(query);
            var count1 = Convert.ToInt32(dt.Rows[0][0].ToString());
            Assert.AreEqual(0, count1);
        }

        /// <summary>
        /// Examines the node.
        /// </summary>
        /// <param name="node">The node.</param>
        /// <param name="parentPath">The parent path.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ExamineNode
        private void ExamineNode(HtmlNode node, string parentPath)
        {
            var nodePath = parentPath + '/' + node.Name;

            if (!(node is HtmlTextNode))
            {
                var class1 = string.Empty;
                var name1 = string.Empty;
                var title1 = string.Empty;
                var value1 = string.Empty;
                var href1 = string.Empty;
                var title2 = string.Empty;

                if (node.Attributes["class"] != null) class1 = node.Attributes["class"].Value;
                if (node.Attributes["href"] != null) href1 = node.Attributes["href"].Value;
                if (node.Attributes["name"] != null) name1 = node.Attributes["name"].Value;
                if (node.Attributes["title"] != null) title1 = node.Attributes["title"].Value;
                if (node.Attributes["value"] != null) value1 = node.Attributes["value"].Value;
                if (value1.Length > 255) value1 = value1.Substring(0, 254);

                if (node.Name == "a" || node.Name == "link" || node.Name == "input" || node.Name == "iframe"
                    || node.Name == "img")
                {
                    teller++; 

                    title2 = title1.Replace("\'", "\\'");
                    General.LogMessage(
                        "XPath: " + nodePath + "\r\n\tText: " + node.InnerText.Trim() + "\r\n\tId: " + node.Id
                        + "\r\n\tName: " + node.Name + "\r\n\tClass: " + class1 + "\r\n\tHref: " + href1 + "\r\n\tTag: "
                        + node.Attributes["tagename"],
                        0); // I want to show the path to this node
                    var sql = "INSERT INTO `autotest`.`selenium_elements` ";
                    sql += "(`url`, ";
                    sql += "`xpath`, ";
                    sql += "`tagname`, ";
                    sql += "`text`, ";
                    sql += "`id`, ";
                    sql += "`name`, ";
                    sql += "`class`, ";
                    sql += "`href`, ";
                    sql += "`title`, ";
                    sql += "`value`) ";
                    sql += "VALUES ";
                    sql += "('" + MySqlHelper.EscapeString(url) + "', ";
                    sql += @"'/html" + MySqlHelper.EscapeString(nodePath) + "', ";
                    sql += "'" + MySqlHelper.EscapeString(node.Name) + "', ";
                    sql += "'" + MySqlHelper.EscapeString(node.InnerText.Trim()) + "', ";
                    sql += "'" + MySqlHelper.EscapeString(node.Id) + "', ";
                    sql += "'" + MySqlHelper.EscapeString(name1) + "', ";
                    sql += "'" + MySqlHelper.EscapeString(class1) + "', ";
                    sql += "'" + MySqlHelper.EscapeString(href1) + "', ";
                    sql += "'" + MySqlHelper.EscapeString(title2) + "', ";
                    sql += "'" + MySqlHelper.EscapeString(value1) + "'); ";

                    General.ExecuteQueryCommand(sql);
                }
                foreach (var childNode in node.ChildNodes) this.ExamineNode(childNode, nodePath);
            }
        }
    }
}
