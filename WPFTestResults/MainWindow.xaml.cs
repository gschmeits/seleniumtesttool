// ***********************************************************************
// Assembly         : WPFTestResults
// Author           : G.H.M.H. Schmeits
// Created          : 01-04-2018
//
// Last Modified By : G.H.M.H. Schmeits
// Last Modified On : 08-17-2018
// ***********************************************************************
// <copyright file="MainWindow.xaml.cs" company="SCHMEITS">
//     Copyright ©  2018
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading;
using System.Web.WebPages;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Forms;
using System.Windows.Media;
using System.Xml;
using System.Xml.Linq;

using DataStorage;

using GeneralFunctionality;

using LicentieWPF;

using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.IE;

using Application = System.Windows.Application;
using DataGrid = System.Web.UI.WebControls.DataGrid;
using DataGridCell = System.Windows.Controls.DataGridCell;
using KeyEventArgs = System.Windows.Input.KeyEventArgs;
using MessageBox = System.Windows.MessageBox;

namespace WPFTestResults
{
    // using OpenQA.Selenium.PhantomJS;
    using System.Windows.Shapes;

    using static ScreenSize;

    using Point = System.Windows.Point;
    using Rectangle = System.Drawing.Rectangle;
    using Size = System.Windows.Size;

    /// <summary>
    ///     Class MainWindow.
    /// </summary>
    /// <seealso cref="System.Windows.Window" />
    /// <seealso cref="System.Windows.Markup.IComponentConnector" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for MainWindow
    public partial class MainWindow : Window
    {
        private static List<PreconditionsFactory.Preconditions> Preconditionses { get; set; }

        private static string testCase { get; set; }

        /// <summary>
        ///     The driver
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for driver
        private static IWebDriver driver;

        /// <summary>
        ///     Initializes a new instance of the <see cref="MainWindow" /> class.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public MainWindow()
        {
            Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-US");
            Thread.CurrentThread.CurrentUICulture = CultureInfo.CreateSpecificCulture("en-US");
            InitializeComponent();

            GeneralFunctionality.Functions.InitializeDatabaseConnection(false);

            machinestatic = InloggerData.MachineCode;

            HideComponents();
            ScreenWidth = Screen.PrimaryScreen.Bounds.Width;
            ScreenHeight = Screen.PrimaryScreen.Bounds.Height;

            Rectangle screen = Screen.PrimaryScreen.WorkingArea;
            var w = Width >= screen.Width ? screen.Width : screen.Width * 0.95;
            var h = Height >= screen.Height ? screen.Height : screen.Height * 0.90;

            Width = w;
            Height = h;

            Title = "Selenium Test Tool - Test Results (Version: " + VersionClass.GetRunningVersion() + ")";
            browser_number = 1;

            RadioButton = 1;
            OverallSettings.ShowData();
            GeneralFunctionality.Functions.TestUitgevoerd(false);
            if (GeneralFunctionality.Functions.IsWindows10()) RadioButtonEdge.IsEnabled = true;
            else RadioButtonEdge.IsEnabled = false;

            var argumenten = Environment.GetCommandLineArgs();

            if (argumenten.Length > 2)
            {
                if (CheckBrowserArgument() == false)
                    MessageBox.Show(
                        "Browser not found!!! Please fill in a correct browser.",
                        "Error",
                        MessageBoxButton.OK);
                if (CheckFileArgument() == false)
                    MessageBox.Show(
                        "File not found!!! Please fill in the correct filename, without the .xml extension.",
                        "Error",
                        MessageBoxButton.OK);

                if (CheckBrowserArgument() == false || CheckFileArgument() == false)
                {
                    Application.Current.Shutdown();
                }
                else
                {
                    GeneralFunctionality.Functions.GetCurrentDir(0);
                    GeneralFunctionality.Functions.setTestrunID(General.LastTestRun);
                    GeneralFunctionality.Functions.setClassName(GetType().Name);
                    var credits = GeneralFunctionality.Functions.GetCredentials(bestandsnaam_argument);
                    GeneralFunctionality.Functions.setApplicationName(credits.Application);

                    GeneralFunctionality.Functions.CheckScreenshotDir("TestReports");
                    GeneralFunctionality.Functions.CheckScreenshotDir();
                    CommandUitvoer();
                    Application.Current.Shutdown();
                }
            }
        }

        /// <summary>
        ///     Gets or sets the bestandsnaam argument.
        /// </summary>
        /// <value>The bestandsnaam argument.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for bestandsnaam_argument
        private static string bestandsnaam_argument { get; set; }

        /// <summary>
        ///     Gets or sets the browser number.
        /// </summary>
        /// <value>The browser number.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for browser_number
        private static int browser_number { get; set; }

        private static string machinestatic { get; set; }

        /// <summary>
        ///     Gets or sets the results count.
        /// </summary>
        /// <value>The results count.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ResultsCount
        private static List<TestResultsFactory.ResultsCount> ResultsCount { get; set; }

        /// <summary>
        ///     Gets or sets the test results.
        /// </summary>
        /// <value>The test results.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TestResults
        private static List<TestResultsFactory.TestResults> TestResults { get; set; }

        /// <summary>
        ///     Gets or sets the testresults fact.
        /// </summary>
        /// <value>The testresults fact.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TestresultsFact
        private static List<TestResultsFactory.TestResultsSelect> TestresultsFact { get; set; }

        /// <summary>
        ///     Gets or sets the begin date time.
        /// </summary>
        /// <value>The begin date time.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for BeginDateTime
        private DateTime BeginDateTime { get; set; }

        /// <summary>
        ///     Gets or sets the bestand.
        /// </summary>
        /// <value>The bestand.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Bestand
        private string Bestand { get; set; }

        /// <summary>
        ///     Gets or sets the bestandsnaam.
        /// </summary>
        /// <value>The bestandsnaam.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Bestandsnaam
        private string Bestandsnaam { get; set; }

        /// <summary>
        ///     Gets or sets the ein date time.
        /// </summary>
        /// <value>The ein date time.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for EinDateTime
        private DateTime EinDateTime { get; set; }

        /// <summary>
        ///     Gets or sets the RadioButton.
        /// </summary>
        /// <value>The RadioButton.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for RadioButton
        private int RadioButton { get; set; }

        /// <summary>
        ///     Determines whether [is window open] [the specified name].
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="name">The name.</param>
        /// <returns><c>true</c> if [is window open] [the specified name]; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for IsWindowOpen`1
        public static bool IsWindowOpen<T>(string name = "")
            where T : Window
        {
            return string.IsNullOrEmpty(name)
                       ? Application.Current.Windows.OfType<T>().Any()
                       : Application.Current.Windows.OfType<T>().Any(w => w.Name.Equals(name));
        }

        /// <summary>
        ///     Addings the tests click.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AddingTestsClick
        private void AddingTestsClick(object sender, RoutedEventArgs e)
        {
            HideElementsForm();
            ScrollViewerHtml.Visibility = Visibility.Hidden;
            var testadding = new TestCases();
            AddingTests.IsEnabled = false;
            testadding.Show();
        }

        private void ButtonCancelExecute_Click(object sender, RoutedEventArgs e)
        {
            Maakschoon();
        }

        private void Maakschoon()
        {
            GridBrowser.Visibility = Visibility.Hidden;
            GridBrowserLoad.Visibility = Visibility.Hidden;
            LabelPreconditions.Visibility = Visibility.Hidden;
            DataGridPre.Visibility = Visibility.Hidden;
            DataGridPre.ItemsSource = null;
        }

        /// <summary>
        ///     Buttons the cancel load click.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonCancelLoadClick
        private void ButtonCancelLoadClick(object sender, RoutedEventArgs e)
        {
            Maakschoon();
        }

        /// <summary>
        ///     Buttons the execute click.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonExecuteClick
        private void ButtonExecuteClick(object sender, RoutedEventArgs e)
        {
            //GridBrowserLoad.Visibility = Visibility.Hidden;

            var credits = GeneralFunctionality.Functions.GetCredentials(Bestandsnaam);
            General.LogMessageDatabase("GetCredit: " + credits, 1);
            machinestatic = InloggerData.MachineCode;
            var applicatieNaam = credits.Application;

            var urlstring = credits.Url;
            if (TextBoxExtra.Text != string.Empty)
            {
                urlstring = credits.Url + TextBoxExtra.Text;
            }

            using (new PleaseWait())
            {
                try
                {
                    var chromePath = GeneralFunctionality.Functions.GetCurrentDir(0);
                    switch (RadioButton)
                    {
                        case 1:
                            driver = new ChromeDriver(chromePath) {Url = urlstring};
                            General.LogMessageDatabase("Chrome gekozen als 'driver'", 0, string.Empty, 0, string.Empty,
                                machinestatic);
                            break;
                        case 2:
                            driver = new FirefoxDriver();
                            driver.Url = urlstring;
                            break;
                        case 3:
                            var options = new InternetExplorerOptions();
                            options.RequireWindowFocus = true;
                            options.EnableNativeEvents = false;
                            options.InitialBrowserUrl = urlstring;

                            // options.UnexpectedAlertBehavior = InternetExplorerUnexpectedAlertBehavior.Accept;
                            options.IgnoreZoomLevel = true;
                            options.EnablePersistentHover = true;
                            options.IntroduceInstabilityByIgnoringProtectedModeSettings = true;
                            driver = new InternetExplorerDriver(chromePath, options);
                            break;
                        case 4:
                            // driver = new PhantomJSDriver();
                            // driver.Navigate().GoToUrl(credits.Url);
                            break;
                        case 5:
                            try
                            {
                                driver = new EdgeDriver(chromePath);
                                driver.Navigate().GoToUrl(urlstring);
                            }
                            catch (Exception ex)
                            {
                                General.LogMessageDatabase(
                                    ex.Message + "\r\n" + ex.StackTrace,
                                    4,
                                    string.Empty,
                                    0,
                                    string.Empty,
                                    machinestatic);
                            }

                            break;
                    }

                    driver.Manage().Window.Maximize();
                    var table = General.GetTestrun(Bestandsnaam);
                    bestandsnaam_argument = Bestandsnaam;
                    LabelApplicationData.Content = table.Rows[0]["testname"].ToString().Trim();
                    GeneralFunctionality.Functions.Teststap(
                        driver,
                        machinestatic,
                        RadioButton.ToString(),
                        TextBoxVersion.Text.Trim(),
                        bestandsnaam_argument);
                }
                catch (Exception ex)
                {
                    General.LogMessageDatabase(
                        ex.Message + "\r\n\r\n" + ex.StackTrace + "\r\n\r\n" + ex.Source,
                        4,
                        string.Empty,
                        0,
                        string.Empty,
                        machinestatic);
                }
                finally
                {
                    driver.Quit();
                    GridBrowser.Visibility = Visibility.Hidden;
                    VulTestResults();
                    CheckFromTill();
                    var testresultsCount = TestResultsFactory.GetTestResultSelects();
                    var indexT = testresultsCount.Count;
                    ComboTestFrom.SelectedIndex = indexT;
                    ComboTestFrom.Text = ComboTestFrom.Items[0].ToString();
                    ComboTestTill.SelectedIndex = indexT;
                    ComboTestTill.Text = ComboTestTill.Items[0].ToString();
                    CheckFromTill();
                    var ttt = ComboTestFrom.Text.Split(' ');
                    LabelAppliction.Visibility = Visibility.Visible;
                    LabelApplicationData.Visibility = Visibility.Visible;
                    EinDateTime = DateTime.Now;
                    TextBlockDateTime.Text = (EinDateTime - BeginDateTime).ToString();
                    Version.Text = TextBoxVersion.Text;
                    if (Version.Text.IsEmpty()) LabelVersion.Visibility = Visibility.Hidden;
                    else LabelVersion.Visibility = Visibility.Visible;

                    // MessageBox.Show(credits.Url);
                    DataStorage.TestCases.AddTestResults(
                        applicatieNaam,
                        ttt[0],
                        Passed.Text.Replace(",", string.Empty),
                        Failed.Text.Replace(",", string.Empty),
                        BeginDateTime,
                        EinDateTime,
                        TextBlockDateTime.Text,
                        RadioButton.ToString(),
                        TextBoxVersion.Text,
                        machinestatic,
                        credits.Url,
                        bestandsnaam_argument);

                    DataGridPre.Visibility = Visibility.Hidden;
                    LabelPreconditions.Visibility = Visibility.Hidden;
                    ShowDataGrid(true);
                    TextBoxExtra.Text = string.Empty;

                    // GeneralFunctionality.Functions.CreateHTML(ttt[0]);
                }
            }
        }

        private void ButtonExecuteLoadClick(object sender, RoutedEventArgs e)
        {
            var openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "XML files(*.xml)|*.xml|All files(*.*)|*.*";

            if (openFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                var lines = File.ReadAllLines(openFileDialog.FileName);
                var intTeller = Convert.ToInt64(TextBoxTestnrImport.Text);
                var testCase = TextBoxTestcaseImport.Text;
                var pos = 2;

                using (new PleaseWait())
                {
                    // this.GridBrowserLoad.Visibility = Visibility.Hidden;
                    var xDoc = new XmlDocument();
                    xDoc.Load(openFileDialog.FileName);
                    try
                    {
                        var xelement = XElement.Load(openFileDialog.FileName);
                        var elementVars = xelement.Elements().Elements();
                        var element = string.Empty;
                        var attribute = string.Empty;

                        var xml = XDocument.Load(openFileDialog.FileName);
                        foreach (XmlNode node in xDoc.DocumentElement.ChildNodes)
                            foreach (XmlNode locNode in node)
                            {
                                foreach (XmlNode nodeElement in locNode)
                                    switch (nodeElement.Name)
                                    {
                                        case "element_xpath"
                                            when nodeElement.InnerText != "null" && attribute == string.Empty:
                                            element = nodeElement.InnerText;
                                            attribute = "xpath";
                                            break;
                                        case "element_name"
                                            when nodeElement.InnerText != "null" && attribute == string.Empty:
                                            element = nodeElement.InnerText;
                                            attribute = "name";
                                            break;
                                        case "element_id" when nodeElement.InnerText != "null" && attribute == string.Empty:
                                            element = nodeElement.InnerText;
                                            attribute = "id";
                                            break;
                                    }

                                if (element.Length != 0 && attribute.Length != 0)
                                {
                                    DataStorage.TestCases.AddTestCase(
                                        TextBoxTestNameImport.Text,
                                        intTeller.ToString(),
                                        testCase,
                                        string.Empty,
                                        element,
                                        attribute,
                                        string.Empty,
                                        string.Empty,
                                        string.Empty,
                                        "yes",
                                        string.Empty,
                                        "no",
                                        string.Empty,
                                        string.Empty,
                                        machinestatic,
                                        string.Empty,
                                        string.Empty);
                                    intTeller++;
                                    element = string.Empty;
                                    attribute = string.Empty;
                                }
                            }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(
                            "The '" + openFileDialog.FileName
                                    + "' file is not found!!!\r\nPlease fill in the correct drive and directory.\r\n\r\n"
                                    + ex.Message,
                            "Settings Error",
                            MessageBoxButton.OK,
                            MessageBoxImage.Error);
                    }
                }

                System.Windows.Forms.MessageBox.Show(
                    "The selected teststeps are added to the database!!!",
                    "Import Teststeps",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Information);

                // this.GridBrowserLoad.Visibility = Visibility.Hidden;
            }
        }

        private void ButtonHtmlClick(object sender, RoutedEventArgs e)
        {
            var begin = Convert.ToInt32(ComboTestFrom.Text.Substring(0, 4));
            var eind = Convert.ToInt32(ComboTestTill.Text.Substring(0, 4));

            if (eind > begin)
                for (var i = begin; i <= eind; i++)
                    GeneralFunctionality.Functions.CreateHTML(i.ToString());
            else GeneralFunctionality.Functions.CreateHTML(ComboTestFrom.Text.Substring(0, 4));

            ShowDataGrid(false);

            WebBrowser.Source = new Uri(GeneralFunctionality.Functions.HtmlPage);
            ScrollViewerHtml.Visibility = Visibility.Visible;
        }

        private void ButtonHtmlShowClick(object sender, RoutedEventArgs e)
        {
            switch (ButtonHtmlShow.Content)
            {
                case "Show HTML Page":
                    if (!File.Exists(GeneralFunctionality.Functions.SetHTMLCode(ComboTestFrom.Text.Substring(0, 4))))
                        GeneralFunctionality.Functions.CreateHTML(ComboTestFrom.Text.Substring(0, 4));

                    WebBrowser.Source = new Uri(GeneralFunctionality.Functions.HtmlPage);
                    ShowDataGrid(false);
                    ScrollViewerHtml.Visibility = Visibility.Visible;
                    ButtonHtmlShow.Content = "Hide HTML Page";
                    break;
                case "Hide HTML Page":
                    ShowDataGrid(true);
                    ScrollViewerHtml.Visibility = Visibility.Hidden;
                    ButtonHtmlShow.Content = "Show HTML Page";
                    break;
            }
        }

        private void ButtonSelectXML_Click(object sender, RoutedEventArgs e)
        {
            var openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = GeneralFunctionality.Functions.GetCurrentDir(1);
            openFileDialog.Filter = "XML files(*.xml)|*.xml|All files(*.*)|*.*";
            openFileDialog.FilterIndex = 2;
            openFileDialog.RestoreDirectory = true;

            if (openFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                try
                {
                    Bestand = openFileDialog.FileName;
                    Bestandsnaam = GeneralFunctionality.Functions.SplitBestand(Bestand);
                    TextBoxTestNameImport.Text = Bestandsnaam;
                }
                catch (Exception ex)
                {
                    General.LogMessageDatabase(ex.Message, 4, string.Empty, 0, string.Empty, machinestatic);
                }
        }

        private bool CheckBrowserArgument()
        {
            var argumenten = Environment.GetCommandLineArgs();
            var browsers = DataStorage.TestResults.GetTestResultsBrowsers();
            var return_value = false;
            foreach (var browser in browsers)
                if (browser.browser_name.ToUpper() == argumenten[1].ToUpper())
                {
                    return_value = true;
                    browser_number = Convert.ToInt16(browser.id.ToString());
                    break;
                }

            return return_value;
        }

        private bool CheckFileArgument()
        {
            var return_value = false;
            var argumenten = Environment.GetCommandLineArgs();
            var filePath = GeneralFunctionality.Functions.GetCurrentDir(1);
            var fileArray = Directory.GetFiles(filePath);

            foreach (var filename in fileArray)
                if (filename.ToUpper() == filePath.ToUpper() + argumenten[2].ToUpper() + ".XML")
                {
                    return_value = true;
                    bestandsnaam_argument = argumenten[2];
                    break;
                }

            return return_value;
        }

        private void CheckFromTill()
        {
            if (ComboTestFrom.SelectedIndex != -1)
            {
                ComboTestTill.SelectedIndex = ComboTestFrom.SelectedIndex;
                VulLabel();
            }
        }

        private void CheckTestCases()
        {
            var bestanden = Directory.GetFiles(GeneralFunctionality.Functions.GetCurrentDir(1));
            if (bestanden.Length == 0) ExecuteTestsSql.IsEnabled = false;
            else ExecuteTestsSql.IsEnabled = true;
        }

        private void ComboTestFrom_DropDownClosed(object sender, EventArgs e)
        {
            CheckFromTill();
        }

        private void ComboTestFrom_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            CheckFromTill();
        }

        private void ComboTestTill_DropDownClosed(object sender, EventArgs e)
        {
            CheckFromTill();
        }

        private void CommandUitvoer()
        {
            machinestatic = InloggerData.MachineCode;
            var credits = GeneralFunctionality.Functions.GetCredentials(bestandsnaam_argument);
            var applicatieNaam = credits.Application;
            try
            {
                var chromePath = GeneralFunctionality.Functions.GetCurrentDir(0);
                BeginDateTime = DateTime.Now;
                switch (browser_number)
                {
                    case 1:
                        driver = new ChromeDriver(chromePath) { Url = credits.Url };
                        break;
                    case 2:
                        driver = new FirefoxDriver();
                        driver.Url = credits.Url;
                        break;
                    case 3:
                        var options = new InternetExplorerOptions();
                        options.RequireWindowFocus = true;
                        options.EnableNativeEvents = false;
                        options.InitialBrowserUrl = credits.Url;

                        // options.UnexpectedAlertBehavior = InternetExplorerUnexpectedAlertBehavior.Accept;
                        options.IgnoreZoomLevel = true;
                        options.EnablePersistentHover = true;
                        options.IntroduceInstabilityByIgnoringProtectedModeSettings = true;
                        driver = new InternetExplorerDriver(chromePath, options);
                        break;
                    case 4:
                        // driver = new PhantomJSDriver();
                        // driver.Navigate().GoToUrl(credits.Url);
                        break;
                    case 5:
                        try
                        {
                            driver = new EdgeDriver(chromePath);
                            driver.Navigate().GoToUrl(credits.Url);
                        }
                        catch (Exception ex)
                        {
                            General.LogMessageDatabase(
                                ex.Message + "\r\n" + ex.StackTrace,
                                4,
                                string.Empty,
                                0,
                                string.Empty,
                                machinestatic);
                        }

                        break;
                }

                driver.Manage().Window.Maximize();

                // Execute
                GeneralFunctionality.Functions.Teststap(
                    driver,
                    machinestatic,
                    RadioButton.ToString(),
                    TextBoxVersion.Text,
                    bestandsnaam_argument);
            }
            catch (Exception ex)
            {
                General.LogMessageDatabase(
                    ex.Message + "\r\n\r\n" + ex.StackTrace + "\r\n\r\n" + ex.Source,
                    4,
                    string.Empty,
                    0,
                    string.Empty,
                    machinestatic);
            }
            finally
            {
                try
                {
                    driver.Quit();
                    VulTestResults();
                    CheckFromTill();
                    var testresultsCount = TestResultsFactory.GetTestResultSelects();
                    var indexT = testresultsCount.Count;
                    ComboTestFrom.SelectedIndex = indexT;
                    ComboTestFrom.Text = ComboTestFrom.Items[0].ToString();
                    ComboTestTill.SelectedIndex = indexT;
                    ComboTestTill.Text = ComboTestTill.Items[0].ToString();
                    CheckFromTill();
                    var ttt = ComboTestFrom.Text.Split(' ');
                    LabelAppliction.Visibility = Visibility.Visible;
                    LabelApplicationData.Visibility = Visibility.Visible;
                    EinDateTime = DateTime.Now;
                    TextBlockDateTime.Text = (EinDateTime - BeginDateTime).ToString();
                    Version.Text = TextBoxVersion.Text;

                    if (Version.Text.IsEmpty()) LabelVersion.Visibility = Visibility.Hidden;
                    else LabelVersion.Visibility = Visibility.Visible;

                    DataStorage.TestCases.AddTestResults(
                        applicatieNaam,
                        ttt[0],
                        Passed.Text.Replace(",", string.Empty),
                        Failed.Text.Replace(",", string.Empty),
                        BeginDateTime,
                        EinDateTime,
                        TextBlockDateTime.Text,
                        RadioButton.ToString(),
                        TextBoxVersion.Text,
                        machinestatic,
                        credits.Url,
                        bestandsnaam_argument);

                    ShowDataGrid(true);

                    // GeneralFunctionality.Functions.CreateHTML(ttt[0]);
                }
                catch (Exception ex)
                {
                    General.LogMessageDatabase(
                        ex.Message + "\r\n\r\n" + ex.StackTrace + "\r\n\r\n" + ex.Source,
                        4,
                        string.Empty,
                        0,
                        string.Empty,
                        machinestatic);
                    MessageBox.Show(ex.Message + "\r\n\r\n" + ex.StackTrace + "\r\n\r\n" + ex.Source);
                }
            }
        }

        private void EditTestsScriptsClick(object sender, RoutedEventArgs e)
        {
            HideElementsForm();
            ScrollViewerHtml.Visibility = Visibility.Hidden;
            var testscriptsEdit = new ScriptScreen();
            AddingTests.IsEnabled = false;
            testscriptsEdit.Show();
        }

        private void ExecuteTestsSqlClick(object sender, RoutedEventArgs e)
        {
            HideElementsForm();
            ScrollViewerHtml.Visibility = Visibility.Hidden;
            BeginDateTime = DateTime.Now;

            DataGridGer.ItemsSource = null;
            LabelAppliction.Visibility = Visibility.Hidden;
            LabelApplicationData.Visibility = Visibility.Hidden;

            var openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = GeneralFunctionality.Functions.GetCurrentDir(1);
            openFileDialog.Filter = "XML files(*.xml)|*.xml|All files(*.*)|*.*";
            openFileDialog.FilterIndex = 2;
            openFileDialog.RestoreDirectory = true;

            OverallSettings.ShowData();

            if (openFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                try
                {
                    Bestand = openFileDialog.FileName;
                    Bestandsnaam = GeneralFunctionality.Functions.SplitBestand(Bestand);
                    Stack.Visibility = Visibility.Hidden;
                    ButtonHtml.Visibility = Visibility.Hidden;
                    ButtonHtmlShow.Visibility = Visibility.Hidden;

                    // Initialise
                    GeneralFunctionality.Functions.GetCurrentDir(0);
                    var credits = GeneralFunctionality.Functions.GetCredentials(Bestandsnaam);
                    GeneralFunctionality.Functions.GetCurrentDir(0);
                    GeneralFunctionality.Functions.setTestrunID(General.LastTestRun);
                    GeneralFunctionality.Functions.setClassName(GetType().Name);
                    GeneralFunctionality.Functions.setApplicationName(credits.Application);

                    GeneralFunctionality.Functions.CheckScreenshotDir("TestReports");
                    GeneralFunctionality.Functions.CheckScreenshotDir();

                    ShowDataGrid(false);

                    GridBrowser.Visibility = Visibility.Visible;

                    Preconditionses = PreconditionsFactory.GetPreconditions(Bestandsnaam);

                    DataGridPre.ItemsSource = null;
                    DataGridPre.Height = Preconditionses.Count * 18;
                    DataGridPre.ItemsSource = Preconditionses;
                    if (Preconditionses.Count > 0)
                    {
                        DataGridPre.Visibility = Visibility.Visible;
                        LabelPreconditions.Visibility = Visibility.Visible;
                    }

                    ButtonHtml.Visibility = Visibility.Hidden;
                    ButtonHtmlShow.Visibility = Visibility.Hidden;
                }
                catch (Exception ex)
                {
                    General.LogMessageDatabase(
                        ex.Message + "\r\n\r\n" + ex.StackTrace + "\r\n\r\n" + ex.Source,
                        4,
                        string.Empty,
                        0,
                        string.Empty,
                        machinestatic);
                }
        }

        private void HideComponents()
        {
            ButtonHtmlShow.Visibility = Visibility.Hidden;
            ButtonHtml.Visibility = Visibility.Hidden;
            ShowDataGrid(false);
            ScrollViewerHtml.Visibility = Visibility.Hidden;
            //GridBrowser.Visibility = Visibility.Hidden;
            Maakschoon();
            ScrollViewerHtml.Visibility = Visibility.Hidden;
        }

        private void HideElementsForm()
        {
            ShowDataGrid(false);
            ComboTestFrom.SelectedIndex = -1;
            LabelApplicationData.Content = string.Empty;
            ButtonHtml.Visibility = Visibility.Hidden;
            ButtonHtmlShow.Visibility = Visibility.Hidden;
        }

        private void MenuItemBulkChanges_Click(object sender, RoutedEventArgs e)
        {
            HideElementsForm();
            ScrollViewerHtml.Visibility = Visibility.Hidden;
        }

        private void MenuItemCheckKey_Click(object sender, RoutedEventArgs e)
        {
            var LicenseKey = new LicenceKey();
            LicenseKey.Show();
        }

        private void MenuItemCopyElementsClick(object sender, RoutedEventArgs e)
        {
            var updateCopyDataBulk = new UpdateCopyDataBulk();
            updateCopyDataBulk.Show();
        }

        private void MenuItemDeleteItemsClick(object sender, RoutedEventArgs e)
        {
            var deleteBulkData = new DeleteBulkData();
            deleteBulkData.Show();
        }

        private void MenuItemExtras_Click(object sender, RoutedEventArgs e)
        {
            HideElementsForm();
            ScrollViewerHtml.Visibility = Visibility.Hidden;
        }

        private void MenuItemExtrasFindElementsClick(object sender, RoutedEventArgs e)
        {
            StartElementsForm("GET");
        }

        private void MenuItemExtrasGetElements_OnClick(object sender, RoutedEventArgs e)
        {
            StartElementsForm("SET");
        }

        private void MenuItemGetBulk_Click(object sender, RoutedEventArgs e)
        {
            ShowDataGrid(false);
            GridBrowserLoad.Visibility = Visibility.Visible;
            ButtonHtml.Visibility = Visibility.Hidden;
            ButtonHtmlShow.Visibility = Visibility.Hidden;
        }

        private void MenuItemHelpAbout_Click(object sender, RoutedEventArgs e)
        {
            var frmAbout = new AboutBox();
            frmAbout.Show();
        }

        private void MenuItemHelpContent_Click(object sender, RoutedEventArgs e)
        {
            HelpProvider.ShowHelpTableOfContents();
        }

        private void MenuItemHelpIndex_Click(object sender, RoutedEventArgs e)
        {
            HelpProvider.ShowHelpIndex();
        }

        private void MenuItemHelpSearch_Click(object sender, RoutedEventArgs e)
        {
            HelpProvider.ShowHelpSearch();
        }

        private void MenuItemSettings_Click(object sender, RoutedEventArgs e)
        {
            HideElementsForm();
            ScrollViewerHtml.Visibility = Visibility.Hidden;
        }

        private void MenuItemSettingsConfig_Click(object sender, RoutedEventArgs e)
        {
            HideElementsForm();
            var settingsConfig = new SettingsConfig();
            settingsConfig.Show();
        }

        private void MenuItemSettingsDatabaseConnection_Click(object sender, RoutedEventArgs e)
        {
            var settingsDatabaseConnection = new SettingsDatabaseConnection();
            settingsDatabaseConnection.Show();
        }

        private void MenuItemSettingsTestSet_Click(object sender, RoutedEventArgs e)
        {
            HideElementsForm();
            var settingsTestCases = new SettingsTextScript();
            settingsTestCases.Show();
        }

        private void RadioButton_Checked(object sender, RoutedEventArgs e)
        {
            RadioButton = 2;
        }

        private void RadioButton_Checked_1(object sender, RoutedEventArgs e)
        {
            RadioButton = 5;
        }

        private void RadioButtonChecked1(object sender, RoutedEventArgs e)
        {
            RadioButton = 3;
        }

        private void RadioButtonChecked2(object sender, RoutedEventArgs e)
        {
            RadioButton = 1;
        }

        private void RadioButtonChecked3(object sender, RoutedEventArgs e)
        {
            RadioButton = 4;
        }

        private void RadioButtonClick(object sender, RoutedEventArgs e)
        {
        }

        private void ShowDataGrid(bool toon)
        {
            if (toon == false)
            {
                Stack.Visibility = Visibility.Hidden;
                DataGridGer.Visibility = Visibility.Hidden;
                LabelAppliction.Visibility = Visibility.Hidden;
                LabelApplicationData.Visibility = Visibility.Hidden;
            }
            else
            {
                Stack.Visibility = Visibility.Visible;
                DataGridGer.Visibility = Visibility.Visible;
                LabelAppliction.Visibility = Visibility.Visible;
                LabelApplicationData.Visibility = Visibility.Visible;
            }
        }

        private void SluitenClick(object sender, RoutedEventArgs e)
        {
            HideElementsForm();
            ScrollViewerHtml.Visibility = Visibility.Hidden;
            Close();
        }

        private void StartElementsForm(string getset)
        {
            HideElementsForm();
            var elementsGetSet = new ElementsGetSet(getset);
            elementsGetSet.Show();
        }

        private void TextBoxTestcaseImport_KeyDown(object sender, KeyEventArgs e)
        {
            if (TextBoxTestNameImport.Text.Length > 0 && TextBoxTestcaseImport.Text.Length > 0
                                                      && TextBoxTestnrImport.Text.Length > 0)
                ButtonExecuteLoad.IsEnabled = true;
            else ButtonExecuteLoad.IsEnabled = false;
        }

        private void TextBoxTestNameImport_KeyDown(object sender, KeyEventArgs e)
        {
            if (TextBoxTestNameImport.Text.Length > 0 && TextBoxTestcaseImport.Text.Length > 0
                                                      && TextBoxTestnrImport.Text.Length > 0)
                ButtonExecuteLoad.IsEnabled = true;
            else ButtonExecuteLoad.IsEnabled = false;
        }

        private void TextBoxTestnrImport_KeyDown(object sender, KeyEventArgs e)
        {
            if (TextBoxTestNameImport.Text.Length > 0 && TextBoxTestcaseImport.Text.Length > 0
                                                      && TextBoxTestnrImport.Text.Length > 0)
                ButtonExecuteLoad.IsEnabled = true;
            else ButtonExecuteLoad.IsEnabled = false;
        }

        private void VulLabel()
        {
            TestResults = TestResultsFactory.GeTestResults(
                ComboTestFrom.SelectedValue.ToString().Substring(0, 4),
                ComboTestTill.SelectedValue.ToString().Substring(0, 4));
            DataGridGer.ItemsSource = null;
            DataGridGer.ItemsSource = TestResults;
            Stack.Visibility = Visibility.Hidden;
            ResultsCount = TestResultsFactory.GetCount(
                ComboTestFrom.SelectedValue.ToString(),
                ComboTestTill.SelectedValue.ToString());
            var teller = 0;
            var sum1 = 0;
            foreach (var testresult in ResultsCount)
            {
                var aantal = Convert.ToInt32(testresult.value1.ToString());

                if (teller == 0)
                {
                    Passed.Text = string.Format("{0:N0}", aantal);
                    sum1 += aantal;
                }

                if (teller == 1)
                {
                    Failed.Text = string.Format("{0:N0}", aantal);
                    sum1 += aantal;
                }

                teller++;
                Total.Text = string.Format("{0:N0}", sum1);
            }

            var gegevens =
                DataStorage.TestResults.GetResultTestRun(ComboTestFrom.SelectedValue.ToString().Substring(0, 4));
            if (gegevens.Count > 0)
            {
                Passed.Text = string.Format("{0:N0}", Convert.ToInt32(gegevens[0].testrun_passed));
                Failed.Text = string.Format("{0:N0}", Convert.ToInt32(gegevens[0].testrun_failed));
                Total.Text = string.Format(
                    "{0:N0}",
                    Convert.ToInt32(gegevens[0].testrun_passed) + Convert.ToInt32(gegevens[0].testrun_failed));
                Version.Text = gegevens[0].testrun_version;
                TextBlockDateTime.Text = string.Format("{0:T}", gegevens[0].testrun_time);
                if (Version.Text.IsEmpty()) LabelVersion.Visibility = Visibility.Hidden;
                else LabelVersion.Visibility = Visibility.Visible;
                LabelApplicationData.Content = gegevens[0].testrun_scenario;
            }

            if (ResultsCount.Count == 1) Failed.Text = string.Format("{0:N0}", 0);

            ShowDataGrid(true);
            ButtonHtmlShow.Visibility = Visibility.Visible;
        }

        public void VulTestResults()
        {
            ComboTestFrom.Items.Clear();
            ComboTestTill.Items.Clear();

            TestresultsFact = TestResultsFactory.GetTestResultSelects();
            foreach (var gu in TestresultsFact)
            {
                string tekst;
                switch (gu.testrun.ToString().Length)
                {
                    case 1:
                        tekst = "000" + gu.testrun;
                        break;
                    case 2:
                        tekst = "00" + gu.testrun;
                        break;
                    case 3:
                        tekst = "0" + gu.testrun;
                        break;
                    default:
                        tekst = gu.testrun.ToString();
                        break;
                }

                ComboTestFrom.Items.Add(tekst + " " + gu.testscenario_name + " " + gu.date);
                ComboTestTill.Items.Add(tekst + " " + gu.testscenario_name + " " + gu.date);
            }

            if (ComboTestFrom.Items.Count == 0) ComboTestFrom.IsEnabled = false;
            else ComboTestFrom.IsEnabled = true;

            if (ComboTestTill.Items.Count == 0) ComboTestTill.IsEnabled = false;
            else ComboTestTill.IsEnabled = true;
        }

        private void Window_GotFocus(object sender, RoutedEventArgs e)
        {

            CheckTestCases();
           // GridBrowser.Visibility = Visibility.Hidden;
        }

        private void WindowActivated(object sender, EventArgs e)
        {
            if (IsWindowOpen<Window>("testadding"))
            {
            }
            else
            {
                AddingTests.IsEnabled = true;
            }

            if (GeneralFunctionality.Functions.uitgevoerd == true)
            {
                VulTestResults();
            }
        }

        private void WindowLoaded(object sender, RoutedEventArgs e)
        {
            VulTestResults();
        }

        private void ButtonRefreshRuns_Click(object sender, RoutedEventArgs e)
        {
            DataGridGer.Visibility = Visibility.Hidden;
            Stack.Visibility = Visibility.Hidden;
            ButtonHtmlShow.Visibility = Visibility.Hidden;
            LabelAppliction.Visibility = Visibility.Hidden;
            LabelApplicationData.Visibility = Visibility.Hidden;
            GridBrowser.Visibility = Visibility.Hidden;
            VulTestResults();
        }

        private void MenuItemSettingsOverall_OnClick(object sender, RoutedEventArgs e)
        {
            var settingsOverallSettings = new SettingsData();
            settingsOverallSettings.Show();
        }

        private void DataGridGer_MouseDoubleClick(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            var index = DataGridGer.CurrentColumn.DisplayIndex;
           //MessageBox.Show(DataGridGer.Columns[index].Width.ToString());
        }

        public DataGridCell GetCell(int row, int column)
        {
            var row1 = GetRow(row);
            if (row1 != null)
            {
                var visualChild = GetVisualChild<DataGridCellsPresenter>(row1);
                if (visualChild != null)
                {
                    var dataGridCell = (DataGridCell)visualChild.ItemContainerGenerator.ContainerFromIndex(column);
                    if (dataGridCell == null)
                    {
                        DataGridGer.ScrollIntoView(row1, DataGridGer.Columns[column]);
                        dataGridCell = (DataGridCell)visualChild.ItemContainerGenerator.ContainerFromIndex(column);
                    }

                    return dataGridCell;
                }
            }

            return null;
        }
        public DataGridRow GetRow(int index)
        {
            var dataGridRow = (DataGridRow)DataGridGer.ItemContainerGenerator.ContainerFromIndex(index);
            if (dataGridRow == null)
            {
                DataGridGer.UpdateLayout();
                DataGridGer.ScrollIntoView(DataGridGer.Items[index]);
                dataGridRow = (DataGridRow)DataGridGer.ItemContainerGenerator.ContainerFromIndex(index);
            }

            return dataGridRow;
        }
        public static T GetVisualChild<T>(Visual parent) where T : Visual
        {
            var obj = default(T);
            var childrenCount = VisualTreeHelper.GetChildrenCount(parent);
            for (var childIndex = 0; childIndex < childrenCount; ++childIndex)
            {
                var child = (Visual)VisualTreeHelper.GetChild(parent, childIndex);
                obj = child as T;
                if (obj == null)
                    obj = GetVisualChild<T>(child);
                if (obj != null)
                    break;
            }

            return obj;
        }

    }
}