// ***********************************************************************
// Assembly         : SeleniumTestTool
// Author           : G.H.M.H. Schmeits
// Created          : 07-21-2018
//
// Last Modified By : G.H.M.H. Schmeits
// Last Modified On : 07-22-2018
// ***********************************************************************
// <copyright file="WachtwoordWijzigen.xaml.cs" company="SCHMEITS SOFTWARE">
//     Copyright © G.H.M.H. Schmeits  2018
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Windows;

namespace WPFTestResults
{
    using System.Collections.Generic;
    using System.Data;

    using BlogsPrajeesh.BlogSpot.WPFControls;

    using DataStorage;

    /// <summary>
    /// Interaction logic for WachtwoordWijzigen.xaml
    /// </summary>
    /// <seealso cref="System.Windows.Window" />
    /// <seealso cref="System.Windows.Markup.IComponentConnector" />
    public partial class WachtwoordWijzigen : Window
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WachtwoordWijzigen"/> class.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public WachtwoordWijzigen()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Handles the Activated event of the Window control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Window_Activated
        private void Window_Activated(object sender, EventArgs e)
        {
            this.txtGebruikersnaam.Focusable = true;
            this.txtGebruikersnaam.Focus();
        }

        /// <summary>
        /// Handles the Click event of the Button control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Button_Click
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            StartLogin();
        }

        /// <summary>
        /// Handles the Click event of the btnOpslaan control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for btnOpslaan_Click
        private void btnOpslaan_Click(object sender, RoutedEventArgs e)
        {
            string caption = "SeleniumTestTool";
            string message = "";

            if (ZoekMedewerker(txtGebruikersnaam.Text, txtWachtwoord.Password) == 0)
            {
                message = "The current password is not correct!!!\r\nTry again?";
                WPFMessageBoxResult result = WPFMessageBox.Show(caption, message, WPFMessageBoxButtons.YesNo, WPFMessageBoxImage.Alert);
                if (result == WPFMessageBoxResult.Yes)
                {
                    txtWachtwoord.Password = "";
                }
                if (result == WPFMessageBoxResult.No)
                {
                    StartLogin();
                }
                return;
            }

            if (ZoekMedewerker(txtGebruikersnaam.Text, txtWachtwoord.Password) == 1)
            {
                if (string.IsNullOrEmpty(txtNieuwWachtwoord1.Password) || string.IsNullOrEmpty(txtNieuwWachtwoord2.Password))
                {
                    message = "At teast 1 of the 2 password textfield is filled with a value!!!";
                    WPFMessageBox.Show(caption, message, WPFMessageBoxButtons.OK, WPFMessageBoxImage.Alert);
                    return;
                }
                else
                {
                    if (txtNieuwWachtwoord1.Password != txtNieuwWachtwoord2.Password)
                    {
                        message = "The new password do not match!!!";
                        WPFMessageBox.Show(caption, message, WPFMessageBoxButtons.OK, WPFMessageBoxImage.Alert);
                        return;
                    }
                    else
                    {
                        UpdateMedewerker(txtGebruikersnaam.Text.ToUpper(), txtNieuwWachtwoord1.Password);
                        //message = "The new password is saved.";
                        //WPFMessageBox.Show(caption, message, WPFMessageBoxButtons.OK, WPFMessageBoxImage.Information);
                        StartLogin();
                        this.Close();
                    }
                }
            }
        }

        /// <summary>
        /// Updates the medewerker.
        /// </summary>
        /// <param name="parMedewerkersCode">The par medewerkers code.</param>
        /// <param name="parMedewerkersPassword">The par medewerkers password.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for UpdateMedewerker
        private void UpdateMedewerker(string parMedewerkersCode, string parMedewerkersPassword)
        {
            var query = LoginUsers.updateWachtwoord(parMedewerkersCode, parMedewerkersPassword);
            GenericDataRead.GetData(query);
        }

        /// <summary>
        /// Zoeks the medewerker.
        /// </summary>
        /// <param name="parMedewerkersCode">The par medewerkers code.</param>
        /// <param name="parMedewerkersPassword">The par medewerkers password.</param>
        /// <returns>System.Int64.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ZoekMedewerker
        private long ZoekMedewerker(string parMedewerkersCode, string parMedewerkersPassword)
        {
            Int32 intRow = 0;
            intRow = LoginUsers.GetAantalGebruikers(parMedewerkersCode, parMedewerkersPassword);
            var query = "SELECT Count(*) FROM medewerkers WHERE ";
            query += "medewerkerscode = '" + parMedewerkersCode.ToUpper() + "' ";
            if (parMedewerkersPassword != string.Empty) query += "AND password = SHA1('" + parMedewerkersPassword + "');";
            DataTable dt = GenericDataRead.GetData(query);

            intRow = Convert.ToInt16(dt.Rows[0][0].ToString());
            return intRow;
        }

        /// <summary>
        /// Starts the login.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for StartLogin
        private void StartLogin()
        {
            Login gLogin = new Login();
            gLogin.Show();
            this.Close();
        }
    }
}
