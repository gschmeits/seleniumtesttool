// ***********************************************************************
// Assembly         : SeleniumTestTool
// Author           : G.H.M.H. Schmeits
// Created          : 08-13-2019
//
// Last Modified By : G.H.M.H. Schmeits
// Last Modified On : 08-16-2019
// ***********************************************************************
// <copyright file="ElementsGetSet.xaml.cs" company="SCHMEITS SOFTWARE">
//     Copyright © G.H.M.H. Schmeits  2018-2019
// </copyright>
// <summary></summary>
// ***********************************************************************

namespace WPFTestResults
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading;
    using System.Web;
    using System.Windows;
    using System.Windows.Controls;
    using System.Windows.Controls.Primitives;
    using System.Windows.Forms;
    using System.Windows.Input;
    using System.Windows.Media;

    using DataStorage;

    using GeneralFunctionality;

    using HtmlAgilityPack;

    using LicentieWPF.LicenseKey;

    using MySql.Data.MySqlClient;

    using OpenQA.Selenium;
    using OpenQA.Selenium.Chrome;
    using OpenQA.Selenium.Interactions;
    using OpenQA.Selenium.Support.UI;

    using UrlFactory;

    using CheckBox = System.Windows.Controls.CheckBox;
    using DataGrid = System.Windows.Controls.DataGrid;
    using DataGridCell = System.Windows.Controls.DataGridCell;
    using HtmlDocument = HtmlAgilityPack.HtmlDocument;
    using KeyEventArgs = System.Windows.Input.KeyEventArgs;
    using MessageBox = System.Windows.MessageBox;

    /// <summary>
    ///     Class ElementsGetSet.
    ///     Implements the <see cref="System.Windows.Window" />
    ///     Implements the <see cref="System.Windows.Markup.IComponentConnector" />
    /// </summary>
    /// <seealso cref="System.Windows.Window" />
    /// <seealso cref="System.Windows.Markup.IComponentConnector" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for ElementsGetSet
    public partial class ElementsGetSet : Window
    {
        /// <summary>
        ///     The driver
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _driver
        private static ChromeDriver _driver;

        /// <summary>
        ///     The arr href
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for arrHref
        private static string[] arrHref;

        /// <summary>
        ///     The driver
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for driver
        private static IWebDriver driver;

        /// <summary>
        ///     The yy
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for yy
        private static HashSet<string> yy;

        /// <summary>
        ///     The href link
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for href_link
        private string href_link = string.Empty;

        /// <summary>
        ///     Initializes a new instance of the <see cref="ElementsGetSet" /> class.
        /// </summary>
        /// <param name="GetSet">The get set.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public ElementsGetSet(string GetSet)
        {
            this.InitializeComponent();
            this.Width = Screen.PrimaryScreen.Bounds.Width * 0.95;
            this.Height = Screen.PrimaryScreen.Bounds.Height * 0.9;
            this.ElementSetting = GetSet;
            this.ButtonGetElements.IsEnabled = false;
            this.LabelID.Content = string.Empty;
            this.SetButtonContext();
            this.ButtonSave.IsEnabled = false;
            this.LabelFoundElements.Visibility = Visibility.Hidden;
            this.ButtonSetToTest.IsEnabled = false;
            this.LabelTestCase.Visibility = Visibility.Hidden;
            this.TextBoxTestCase.Visibility = Visibility.Hidden;
            this.LabelTestPage.Visibility = Visibility.Hidden;
            this.TextBoxTestCasePage.Visibility = Visibility.Hidden;
            this.UserAttribute.Text = "Name";
            this.PasswordAtrribute.Text = "Name";
            this.ButtonAttribute.Text = "Name";
            this.href_link = string.Empty;
            this.CheckBoxInlogIncluded.Visibility = Visibility.Hidden;
            if (this.ElementSetting == "SET")
            {
                this.Inlog.Visibility = Visibility.Hidden;
                this.BorderInlog.Visibility = Visibility.Hidden;
                this.StackPanelLoad.Visibility = Visibility.Hidden;
                this.StackPanelSave.Visibility = Visibility.Hidden;
                this.TextBoxURL.Visibility = Visibility.Collapsed;
                this.ComboBoxURL.Visibility = Visibility.Visible;
                this.ButtonGetElements.Visibility = Visibility.Hidden;
                this.CheckBoxWholeWebsite.Visibility = Visibility.Hidden;
                this.CheckBoxObjectVisibility.Visibility = Visibility.Hidden;
                this.HaalGegevensComboBox();
                this.BorderSelect.Visibility = Visibility.Hidden;
                this.GridSelectTags.Visibility = Visibility.Hidden;
            }
            else
            {
                this.Inlog.Visibility = Visibility.Visible;
                this.BorderInlog.Visibility = Visibility.Visible;
                this.StackPanelLoad.Visibility = Visibility.Visible;
                this.StackPanelSave.Visibility = Visibility.Visible;
                this.BorderSelect.Visibility = Visibility.Visible;
                this.GridSelectTags.Visibility = Visibility.Visible;
                this.TextBoxURL.Visibility = Visibility.Visible;
                this.ComboBoxURL.Visibility = Visibility.Collapsed;
                this.CheckBoxObjectVisibility.Visibility = Visibility.Hidden;
                this.CheckBoxStart();
                this.ToonInloggegevens();

                this.VulInlogData();
            }

            var borderInlogMargin = this.BorderInlog.Margin;
            borderInlogMargin.Bottom = 307.0;
            this.DataGridElements.Visibility = Visibility.Visible;
            this.DataGridElements.Height = this.Height - 350;
            this.DataGridElements.Width = this.Width - 80;
            this.DataGridElements.Visibility = Visibility.Hidden;
        }

        /// <summary>
        ///     Gets the element setting.
        /// </summary>
        /// <value>The element setting.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ElementSetting
        private string ElementSetting { get; }

        /// <summary>
        ///     Gets or sets the number.
        /// </summary>
        /// <value>The number.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for number
        private int number { get; set; }

        /// <summary>
        ///     Gets or sets the URL.
        /// </summary>
        /// <value>The URL.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for url
        private string url { get; set; }

        /// <summary>
        ///     Gets the visual child.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="parent">The parent.</param>
        /// <returns>T.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetVisualChild`1
        public static T GetVisualChild<T>(Visual parent)
            where T : Visual
        {
            var obj = default(T);
            var childrenCount = VisualTreeHelper.GetChildrenCount(parent);
            for (var childIndex = 0; childIndex < childrenCount; ++childIndex)
            {
                var child = (Visual)VisualTreeHelper.GetChild(parent, childIndex);
                obj = child as T;
                if (obj == null)
                    obj = GetVisualChild<T>(child);
                if (obj != null)
                    break;
            }

            return obj;
        }

        /// <summary>
        ///     Parses the HTML style string.
        /// </summary>
        /// <param name="style">The style.</param>
        /// <returns>Dictionary&lt;System.String, System.String&gt;.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ParseHtmlStyleString
        public static Dictionary<string, string> ParseHtmlStyleString(string style)
        {
            var result = new Dictionary<string, string>();

            style = style.Replace(" ", string.Empty).ToLowerInvariant();

            var settings = style.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);

            foreach (var s in settings)
            {
                if (!s.Contains(':'))
                    continue;
                var data = s.Split(':');
                result.Add(data[0], data[1]);
            }

            return result;
        }

        /// <summary>
        ///     Strips the HTML.
        /// </summary>
        /// <param name="input">The input.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for StripHTML
        public static string StripHTML(string input)
        {
            var output1 = Regex.Replace(input, "<.*?>", string.Empty);
            var output = new string(output1.Trim().Where(c => !char.IsControl(c)).ToArray());
            var outd = output;

            output = Regex.Replace(outd, @"\s+", " ");
            return output.Trim();
        }

        // this will search for the element until a timeout is reached
        public static IWebElement WaitUntilElementExists(ChromeDriver driver, By elementLocator, int timeout = 10)
        {
            try
            {
                var wait = new WebDriverWait(driver, TimeSpan.FromSeconds(timeout));
                return wait.Until(ExpectedConditions.ElementExists(elementLocator));
            }
            catch (NoSuchElementException)
            {
                Console.WriteLine(
                    "Element with locator: '" + elementLocator + "' was not found in current context page.");
                throw;
            }
        }

        /// <summary>
        ///     Gets the cell.
        /// </summary>
        /// <param name="row">The row.</param>
        /// <param name="column">The column.</param>
        /// <returns>DataGridCell.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetCell
        public DataGridCell GetCell(int row, int column)
        {
            var row1 = this.GetRow(row);
            if (row1 != null)
            {
                var visualChild = GetVisualChild<DataGridCellsPresenter>(row1);
                if (visualChild != null)
                {
                    var dataGridCell = (DataGridCell)visualChild.ItemContainerGenerator.ContainerFromIndex(column);
                    if (dataGridCell == null)
                    {
                        this.DataGridElements.ScrollIntoView(row1, this.DataGridElements.Columns[column]);
                        dataGridCell = (DataGridCell)visualChild.ItemContainerGenerator.ContainerFromIndex(column);
                    }

                    return dataGridCell;
                }
            }

            return null;
        }

        /// <summary>
        ///     Gets the data grid rows.
        /// </summary>
        /// <param name="grid">The grid.</param>
        /// <returns>IEnumerable&lt;DataGridRow&gt;.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetDataGridRows
        public IEnumerable<DataGridRow> GetDataGridRows(DataGrid grid)
        {
            foreach (var obj in grid.ItemsSource)
            {
                var dataGridRow = grid.ItemContainerGenerator.ContainerFromItem(obj) as DataGridRow;
                if (dataGridRow != null)
                    yield return dataGridRow;
            }
        }

        /// <summary>
        ///     Gets the row.
        /// </summary>
        /// <param name="index">The index.</param>
        /// <returns>DataGridRow.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetRow
        public DataGridRow GetRow(int index)
        {
            var dataGridRow = (DataGridRow)this.DataGridElements.ItemContainerGenerator.ContainerFromIndex(index);
            if (dataGridRow == null)
            {
                this.DataGridElements.UpdateLayout();
                this.DataGridElements.ScrollIntoView(this.DataGridElements.Items[index]);
                dataGridRow = (DataGridRow)this.DataGridElements.ItemContainerGenerator.ContainerFromIndex(index);
            }

            return dataGridRow;
        }

        /// <summary>
        ///     Checks the style visibility.
        /// </summary>
        /// <param name="style">The style.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CheckStyleVisibility
        private static bool CheckStyleVisibility(string style)
        {
            if (string.IsNullOrWhiteSpace(style))
                return true;

            var keys = ParseHtmlStyleString(style);

            if (keys.Keys.Contains("display"))
            {
                var display = keys["display"];
                if (display != null && display == "none")
                    return false;
            }

            if (keys.Keys.Contains("visibility"))
            {
                var visibility = keys["visibility"];
                if (visibility != null && visibility == "hidden")
                    return false;
            }

            return true;
        }

        /// <summary>
        ///     Determines whether [is node visible] [the specified node].
        /// </summary>
        /// <param name="node">The node.</param>
        /// <returns><c>true</c> if [is node visible] [the specified node]; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for IsNodeVisible
        private static bool IsNodeVisible(HtmlNode node)
        {
            var attribute = node.Attributes["style"];

            var thisVisible = attribute == null || CheckStyleVisibility(attribute.Value);

            if (thisVisible && node.ParentNode != null)
                return IsNodeVisible(node.ParentNode);

            return thisVisible;
        }

        private void ActieUitvoeren(
            IWebElement content,
            string actie,
            string tekst1,
            ChromeDriver driver1,
            string attribute = "")
        {
            var actions = new Actions(driver1);

            switch (actie.ToLower())
            {
                case "click":
                    actions = new Actions(driver1);
                    actions.MoveToElement(content);
                    actions.Perform();
                    content.Click();
                    break;
                case "value":
                    if (tekst1 != string.Empty)
                    {
                        actions = new Actions(driver1);
                        actions.MoveToElement(content);
                        actions.Perform();
                        content.Click();
                        content.Clear();
                        content.SendKeys(tekst1);
                    }

                    break;
                case "sendkeys":
                    actions = new Actions(driver1);
                    actions.MoveToElement(content);
                    actions.Perform();
                    content.Click();
                    content.Clear();
                    content.SendKeys(tekst1);
                    break;
                case "select":
                    IWebElement education = null;
                    SelectElement selectElement = null;

                    selectElement = new SelectElement(content);
                    selectElement.SelectByText(tekst1);
                    break;
                case "move_to":
                    actions = new Actions(driver1);
                    actions.MoveToElement(content);
                    actions.Perform();
                    break;
                case "upload":
                    var file1 = tekst1.Replace("\'", "\\'");
                    content.Click();
                    Thread.Sleep(5000);
                    SendKeys.SendWait(file1);
                    SendKeys.SendWait(@"{Enter}");
                    break;
            }
        }

        /// <summary>
        ///     Handles the Click event of the ButtonCheckboxCheckAll control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonCheckboxCheckAll_Click
        private void ButtonCheckboxCheckAll_Click(object sender, RoutedEventArgs e)
        {
            this.CheckBoxBasis(true);
        }

        /// <summary>
        ///     Handles the Click event of the ButtonCheckboxCheckNone control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonCheckboxCheckNone_Click
        private void ButtonCheckboxCheckNone_Click(object sender, RoutedEventArgs e)
        {
            this.CheckBoxBasis(false);
        }

        /// <summary>
        ///     Handles the Click event of the ButtonGetElements control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonGetElements_Click
        private void ButtonGetElements_Click(object sender, RoutedEventArgs e)
        {
            this.HaalGegevensEnToon();
        }

        /// <summary>
        ///     Handles the Click event of the ButtonNieuw control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonNieuw_Click
        private void ButtonNieuw_Click(object sender, RoutedEventArgs e)
        {
            this.ButtonGetElements.IsEnabled = false;
            this.LabelID.Content = string.Empty;
            this.SetButtonContext();
            this.ButtonSave.IsEnabled = false;
            this.LabelFoundElements.Visibility = Visibility.Hidden;
            this.CheckBoxInlogIncluded.IsChecked = false;
            this.InlogLeeg(true);
            this.ButtonSetToTest.IsEnabled = false;
            this.LabelTestCase.Visibility = Visibility.Hidden;
            this.TextBoxTestCase.Visibility = Visibility.Hidden;
            this.LabelTestPage.Visibility = Visibility.Hidden;
            this.TextBoxTestCasePage.Visibility = Visibility.Hidden;
            this.ComboBoxURL.SelectedIndex = -1;
            this.CheckBoxObjectVisibility.IsChecked = false;
            this.loginCheck.IsChecked = true;
            this.CheckBoxStart();
            this.ToonInloggegevens();
            this.UserAttribute.Text = "Name";
            this.PasswordAtrribute.Text = "Name";
            this.ButtonAttribute.Text = "Name";
            this.UserTag.Text = string.Empty;
            this.UserText.Text = string.Empty;
            this.PasswordTag.Text = string.Empty;
            this.PasswordText.Password = string.Empty;
            this.ButtonTag.Text = string.Empty;
            this.TextBoxURLSave.Text = string.Empty;
            this.ButtonTagnameExtra3.Text = string.Empty;
            this.ButtonTagnameExtra1.Text = string.Empty;
            this.ButtonTagnameExtra2.Text = string.Empty;
            this.DescriptionExtra1.Text = string.Empty;
            this.DescriptionExtra2.Text = string.Empty;
            this.DescriptionExtra3.Text = string.Empty;
            this.LeegMaken();

            if (this.ElementSetting == "SET")
            {
                this.Inlog.Visibility = Visibility.Hidden;
                this.BorderInlog.Visibility = Visibility.Hidden;
                this.StackPanelLoad.Visibility = Visibility.Hidden;
                this.StackPanelSave.Visibility = Visibility.Hidden;
                this.BorderSelect.Visibility = Visibility.Hidden;
                this.GridSelectTags.Visibility = Visibility.Hidden;
            }
            else
            {
                this.Inlog.Visibility = Visibility.Visible;
                this.loginCheck.IsChecked = false;
                this.BorderInlog.Visibility = Visibility.Visible;
                this.StackPanelLoad.Visibility = Visibility.Visible;
                this.StackPanelSave.Visibility = Visibility.Visible;
                this.BorderSelect.Visibility = Visibility.Visible;
                this.GridSelectTags.Visibility = Visibility.Visible;
                var inlogDataRecordsList1 = new List<InlogData.InlogDataRecords>();
                var inlogDataRecordsList2 = InlogData.LoginDataGet();
                this.ComboBoxLoginData.Items.Clear();
                foreach (var inlogDataRecords in inlogDataRecordsList2)
                    this.ComboBoxLoginData.Items.Add(inlogDataRecords.LoginURL);
            }

            var borderInlogMargin = this.BorderInlog.Margin;
            borderInlogMargin.Bottom = 307.0;
            this.InlogLeeg(true);
            this.DataGridElements.Visibility = Visibility.Hidden;
            this.DataGridElements.ItemsSource = null;
            this.TextBoxURL.Text = string.Empty;
            this.href_link = string.Empty;
            this.loginCheck.IsChecked = true;
            this.ToonInloggegevens();
        }

        /// <summary>
        ///     Handles the Click event of the ButtonSave control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonSave_Click
        private void ButtonSave_Click(object sender, RoutedEventArgs e)
        {
            if (this.TextBoxURLSave.Text == string.Empty || this.TextBoxNameSave.Text == string.Empty)
                return;

            var queryI = "UPDATE `autotest`.`login_code` " + "SET ";
            queryI += "`login_url` ='" + MySqlHelper.EscapeString(this.TextBoxURLSave.Text) + "', ";
            queryI += "`login_attribute_username` = '" + MySqlHelper.EscapeString(this.UserAttribute.Text) + "', ";
            queryI += "`login_attribute_password` = '" + MySqlHelper.EscapeString(this.PasswordAtrribute.Text) + "', ";
            queryI += "`login_attribute_button` = '" + MySqlHelper.EscapeString(this.ButtonAttribute.Text) + "', ";
            queryI += "`login_tagname_user` = '" + MySqlHelper.EscapeString(this.UserTag.Text) + "',";
            queryI += "`login_tagname_password` = '" + MySqlHelper.EscapeString(this.PasswordTag.Text) + "', ";
            queryI += "`login_tagname_button` = '" + MySqlHelper.EscapeString(this.ButtonTag.Text) + "', ";
            queryI += "`login_user_value` = '" + MySqlHelper.EscapeString(this.UserText.Text) + "', ";
            queryI += "`login_password_value` = '" + MySqlHelper.EscapeString(this.PasswordText.Password) + "', ";
            queryI += "`login_attribute_extra1` = '" + MySqlHelper.EscapeString(this.ButtonAttributeExtra1.Text)
                                                     + "', ";
            queryI += "`login_attribute_extra2` = '" + MySqlHelper.EscapeString(this.ButtonAttributeExtra2.Text)
                                                     + "', ";
            queryI += "`login_attribute_extra3` = '" + MySqlHelper.EscapeString(this.ButtonAttributeExtra3.Text)
                                                     + "', ";
            queryI += "`login_tagname_extra1` = '" + MySqlHelper.EscapeString(this.ButtonTagnameExtra1.Text) + "', ";
            queryI += "`login_tagname_extra2` = '" + MySqlHelper.EscapeString(this.ButtonTagnameExtra2.Text) + "', ";
            queryI += "`login_tagname_extra3` = '" + MySqlHelper.EscapeString(this.ButtonTagnameExtra3.Text) + "', ";
            queryI += "`login_description_extra1` = '" + MySqlHelper.EscapeString(this.DescriptionExtra1.Text) + "', ";
            queryI += "`login_description_extra2` = '" + MySqlHelper.EscapeString(this.DescriptionExtra2.Text) + "', ";
            queryI += "`login_description_extra3` = '" + MySqlHelper.EscapeString(this.DescriptionExtra3.Text) + "', ";
            queryI += "`login_action1` = '" + MySqlHelper.EscapeString(this.ComboBoxAction1.Text) + "', ";
            queryI += "`login_action2` = '" + MySqlHelper.EscapeString(this.ComboBoxAction2.Text) + "', ";
            queryI += "`login_action3` = '" + MySqlHelper.EscapeString(this.ComboBoxAction3.Text) + "', ";
            queryI += "`login_action4` = '" + MySqlHelper.EscapeString(this.ComboBoxAction4.Text) + "', ";
            queryI += "`login_action5` = '" + MySqlHelper.EscapeString(this.ComboBoxAction5.Text) + "', ";
            queryI += "`login_action6` = '" + MySqlHelper.EscapeString(this.ComboBoxAction6.Text) + "', ";
            queryI += "`login_order1` = '" + MySqlHelper.EscapeString(this.Order1.Text) + "', ";
            queryI += "`login_order2` = '" + MySqlHelper.EscapeString(this.Order2.Text) + "', ";
            queryI += "`login_order3` = '" + MySqlHelper.EscapeString(this.Order3.Text) + "', ";
            queryI += "`login_order4` = '" + MySqlHelper.EscapeString(this.Order4.Text) + "', ";
            queryI += "`login_order5` = '" + MySqlHelper.EscapeString(this.Order5.Text) + "', ";
            queryI += "`login_order6` = '" + MySqlHelper.EscapeString(this.Order6.Text) + "', ";
            queryI += "login_name = '" + MySqlHelper.EscapeString(this.TextBoxNameSave.Text) + "' ";
            queryI += "WHERE `idlogin_code` = '" + MySqlHelper.EscapeString(this.LabelID.Content.ToString()) + "';";

            var queryU = "INSERT INTO `autotest`.`login_code` " + "(`login_url`, " + "`login_attribute_username`, ";
            queryU += "`login_attribute_password`, " + "`login_attribute_button`, " + "`login_tagname_user`, ";
            queryU += "`login_tagname_password`, " + "`login_tagname_button`, " + "`login_user_value`, ";
            queryU += "`login_attribute_extra1`, `login_attribute_extra2`, `login_attribute_extra3`, ";
            queryU += " `login_tagname_extra1`, `login_tagname_extra2`, `login_tagname_extra3`,";
            queryU += "`login_description_extra1`, `login_description_extra2`, `login_description_extra3`, ";
            queryU += "`login_password_value`, ";
            queryU +=
                "`login_action1`, `login_action2`, `login_action3`, `login_action4`, `login_action5`, `login_action6`, ";
            queryU +=
                "`login_order1`, `login_order2`, `login_order3`, `login_order4`, `login_order5`, `login_order6`, `login_name`) ";
            queryU += " VALUES ('";
            queryU += MySqlHelper.EscapeString(this.TextBoxURLSave.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(this.UserAttribute.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(this.PasswordAtrribute.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(this.ButtonAttribute.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(this.UserTag.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(this.PasswordTag.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(this.ButtonTag.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(this.UserText.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(this.ButtonAttributeExtra1.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(this.ButtonAttributeExtra2.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(this.ButtonAttributeExtra3.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(this.ButtonTagnameExtra1.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(this.ButtonTagnameExtra2.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(this.ButtonTagnameExtra3.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(this.DescriptionExtra1.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(this.DescriptionExtra2.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(this.DescriptionExtra3.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(this.PasswordText.Password) + "', '";
            queryU += MySqlHelper.EscapeString(this.ComboBoxAction1.Text) + "', '";
            queryU += MySqlHelper.EscapeString(this.ComboBoxAction2.Text) + "', '";
            queryU += MySqlHelper.EscapeString(this.ComboBoxAction3.Text) + "', '";
            queryU += MySqlHelper.EscapeString(this.ComboBoxAction4.Text) + "', '";
            queryU += MySqlHelper.EscapeString(this.ComboBoxAction5.Text) + "', '";
            queryU += MySqlHelper.EscapeString(this.ComboBoxAction6.Text) + "', '";
            queryU += MySqlHelper.EscapeString(this.Order1.Text) + "', '";
            queryU += MySqlHelper.EscapeString(this.Order2.Text) + "', '";
            queryU += MySqlHelper.EscapeString(this.Order3.Text) + "', '";
            queryU += MySqlHelper.EscapeString(this.Order4.Text) + "', '";
            queryU += MySqlHelper.EscapeString(this.Order5.Text) + "', '";
            queryU += MySqlHelper.EscapeString(this.Order6.Text) + "', '";
            queryU += MySqlHelper.EscapeString(this.TextBoxNameSave.Text) + "');";

            General.ExecuteQueryCommand(this.LabelID.Content != (object)string.Empty ? queryI : queryU);

            this.VulInlogData();
        }

        /// <summary>
        ///     Handles the Click event of the ButtonSelectAll control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonSelectAll_Click
        private void ButtonSelectAllClick(object sender, RoutedEventArgs e)
        {
            // Opslaan();
            var wel = true;
            foreach (var dataGridRow in this.GetDataGridRows(this.DataGridElements))
            {
                var isChecked = (this.DataGridElements.Columns[1].GetCellContent(dataGridRow) as CheckBox).IsChecked;
                var flag = true;
                wel = !((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue);
            }

            this.url = this.ElementSetting != "SET" ? this.TextBoxURL.Text : this.ComboBoxURL.Text;
            ElementsFromDatabase.UpdateAllCheckboxes(this.url, wel, "selenium_check");
            this.DataGridElements.ItemsSource = null;
            this.DataGridElements.ItemsSource = ElementsFromDatabase.GetDataTable(this.url);
            this.ButtonSetToTest.IsEnabled = wel;
            if (wel)
            {
                this.LabelTestCase.Visibility = Visibility.Visible;
                this.TextBoxTestCase.Visibility = Visibility.Visible;
                this.LabelTestPage.Visibility = Visibility.Visible;
                this.TextBoxTestCasePage.Visibility = Visibility.Visible;
                this.ButtonSelectAll.Content = "Unselect All";
                this.TextBoxTestCase.Focusable = true;
                this.TextBoxTestCase.Focus();
            }
            else
            {
                this.LabelTestCase.Visibility = Visibility.Hidden;
                this.TextBoxTestCase.Visibility = Visibility.Hidden;
                this.LabelTestPage.Visibility = Visibility.Hidden;
                this.TextBoxTestCasePage.Visibility = Visibility.Hidden;
                this.ButtonSelectAll.Content = "Select All";
            }
        }

        /// <summary>
        ///     Handles the Click event of the ButtonSetToTest control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonSetToTest_Click
        private void ButtonSetToTest_Click(object sender, RoutedEventArgs e)
        {
            // Opslaan();
            var machineNumber = Convert.ToString(LicentieMachineCode.getMachineCode());
            if (this.TextBoxTestCase.Text != string.Empty)
            {
                General.LogMessageDatabase("test", 1);
                VersionClass.OpenBestand();
                var bestandsnaam = VersionClass.Bestandsnaam;
                if (bestandsnaam != null && bestandsnaam != string.Empty)
                {
                    using (new PleaseWait())
                    {
                        var num6 = 1;
                        var laatsteTestCase = General.GetLaatsteTestCase(bestandsnaam);
                        var num1 = 1;
                        if (laatsteTestCase.Rows.Count > 0)
                            num1 = Convert.ToInt32(laatsteTestCase.Rows[0]["testnr"].ToString()) + 101;
                        this.Topmost = false;
                        var isChecked = this.CheckBoxInlogIncluded.IsChecked;
                        var flag = true;
                        if ((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue)
                        {
                            if (this.UserAttribute.SelectedIndex != 0 && this.UserTag.Text != string.Empty
                                                                      && this.UserText.Text != string.Empty)
                                DataStorage.TestCases.AddTestCase(
                                    bestandsnaam,
                                    this.Order1.Text,
                                    "Login Name",
                                    this.UserTag.Text,
                                    this.UserTag.Text,
                                    this.UserAttribute.Text.ToLower(),
                                    this.ComboBoxAction1.Text,
                                    this.UserText.Text,
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    "no",
                                    string.Empty,
                                    "Fill in the username",
                                    machineNumber,
                                    "input",
                                    string.Empty);

                            var num2 = num1 + 1;
                            if (this.PasswordAtrribute.SelectedIndex != 0 && this.PasswordTag.Text != string.Empty
                                                                          && this.PasswordText.Password != string.Empty)
                                DataStorage.TestCases.AddTestCase(
                                    bestandsnaam,
                                    this.Order2.Text,
                                    "Login Password",
                                    this.PasswordTag.Text,
                                    this.PasswordTag.Text,
                                    this.PasswordAtrribute.Text.ToLower(),
                                    this.ComboBoxAction3.Text,
                                    string.Empty,
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    "no",
                                    string.Empty,
                                    "Fill in the password",
                                    machineNumber,
                                    "input",
                                    string.Empty,
                                    this.PasswordText.Password);

                            var num3 = num2 + 1;
                            if (this.ButtonAttribute.SelectedIndex != 0 && this.ButtonTag.Text != string.Empty)
                                DataStorage.TestCases.AddTestCase(
                                    bestandsnaam,
                                    this.Order3.Text,
                                    "Login Button",
                                    "LoginButton",
                                    this.ButtonTag.Text,
                                    this.ButtonAttribute.Text.ToLower(),
                                    this.ComboBoxAction4.Text,
                                    string.Empty,
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    "no",
                                    string.Empty,
                                    "Push the login button",
                                    machineNumber,
                                    "button",
                                    string.Empty);

                            var num4 = num3 + 1;

                            if (this.ButtonAttributeExtra1.Text != string.Empty
                                && this.ButtonTagnameExtra1.Text != string.Empty
                                && this.ComboBoxAction5.SelectedIndex != 0 && this.Order4.Text != "0"
                                && this.Order4.Text != string.Empty)
                                DataStorage.TestCases.AddTestCase(
                                    bestandsnaam,
                                    this.Order4.Text,
                                    this.DescriptionExtra1.Text,
                                    this.DescriptionExtra1.Text,
                                    this.ButtonTagnameExtra1.Text,
                                    this.ButtonAttributeExtra1.Text.ToLower(),
                                    "click",
                                    string.Empty,
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    "no",
                                    string.Empty,
                                    this.DescriptionExtra1.Text,
                                    machineNumber,
                                    this.ComboBoxAction5.Text,
                                    string.Empty);

                            var num5 = num4 + 1;
                            if (this.ButtonAttributeExtra2.Text != string.Empty
                                && this.ButtonTagnameExtra2.Text != string.Empty
                                && this.ComboBoxAction6.SelectedIndex != 0 && this.Order5.Text != "0"
                                && this.Order5.Text != string.Empty)
                                DataStorage.TestCases.AddTestCase(
                                    bestandsnaam,
                                    this.Order5.Text,
                                    this.DescriptionExtra2.Text,
                                    this.DescriptionExtra2.Text,
                                    this.ButtonTagnameExtra2.Text,
                                    this.ButtonAttributeExtra2.Text.ToLower(),
                                    this.ComboBoxAction6.Text,
                                    string.Empty,
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    "no",
                                    string.Empty,
                                    this.DescriptionExtra2.Text,
                                    machineNumber,
                                    this.ComboBoxAction6.Text,
                                    string.Empty);

                            num6 = num5 + 1;

                            if (this.ButtonAttributeExtra3.Text != string.Empty
                                && this.ButtonTagnameExtra3.Text != string.Empty
                                && this.ComboBoxAction2.SelectedIndex != 0)
                            {
                                var testtext = string.Empty;
                                if ((this.ComboBoxAction2.Text == "select") | (this.ComboBoxAction2.Text == "value"))
                                    testtext = this.DescriptionExtra3.Text;

                                DataStorage.TestCases.AddTestCase(
                                    bestandsnaam,
                                    this.Order6.Text,
                                    this.ButtonTagnameExtra3.Text,
                                    this.ButtonTagnameExtra3.Text,
                                    this.ButtonTagnameExtra3.Text,
                                    this.ButtonAttributeExtra3.Text.ToLower(),
                                    this.ComboBoxAction2.Text,
                                    testtext,
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    "no",
                                    string.Empty,
                                    this.DescriptionExtra3.Text,
                                    machineNumber,
                                    this.ComboBoxAction2.Text,
                                    string.Empty);
                            }

                            num1 = num6 + 11;
                        }

                        if (this.TextBoxURL.Text != this.TextBoxURLSave.Text
                            && this.CheckBoxInlogIncluded.IsChecked == true)
                        {
                            var testtext = string.Empty;

                            var ger6 = num6 + 1;
                            DataStorage.TestCases.AddTestCase(
                                bestandsnaam,
                                ger6.ToString(),
                                this.TextBoxTestCase.Text,
                                string.Empty,
                                string.Empty,
                                string.Empty,
                                "switch to url",
                                testtext,
                                this.TextBoxURL.Text,
                                "yes",
                                string.Empty,
                                "no",
                                "Go to the wanted url: '" + this.TextBoxURL.Text + "'.",
                                "Switch to url",
                                machineNumber,
                                string.Empty,
                                string.Empty);
                        }

                        var num7 = num1 + 1;

                        var query = "SELECT * FROM autotest.selenium_elements ";
                        query += "WHERE url = '" + this.TextBoxURL.Text + "' ";
                        query += "AND selenium_check = '1' ";
                        query += "ORDER BY idselenium_elements";

                        var dt = GenericDataRead.GetData(query);

                        for (var row = 0; row < dt.Rows.Count; ++row)
                        {
                            var checktekst = string.Empty;
                            string testattribute;
                            string text;

                            if (dt.Rows[row][15].ToString() == "1") checktekst = dt.Rows[row][6].ToString();

                            if (dt.Rows[row][7].ToString().Length > 0)
                            {
                                text = dt.Rows[row][7].ToString();
                                testattribute = "id";
                            }
                            else if (dt.Rows[row][8].ToString().Length > 0)
                            {
                                text = dt.Rows[row][8].ToString();
                                testattribute = "name";
                            }
                            else
                            {
                                text = dt.Rows[row][4].ToString();
                                testattribute = "xpath";
                            }

                            DataStorage.TestCases.AddTestCase(
                                bestandsnaam,
                                num7.ToString(),
                                this.TextBoxTestCase.Text,
                                dt.Rows[row][6].ToString(),
                                text,
                                testattribute,
                                string.Empty,
                                checktekst,
                                string.Empty,
                                "yes",
                                string.Empty,
                                "no",
                                string.Empty,
                                string.Empty,
                                machineNumber,
                                dt.Rows[row][5].ToString(),
                                checktekst);
                            ++num7;
                        }

                        General.LogMessageDatabase(
                            "Data added to the testscenario",
                            3,
                            string.Empty,
                            0,
                            string.Empty,
                            string.Empty);
                    }

                    var num8 = (int)MessageBox.Show("Data added to test scenario.");
                    this.MaakLoginLeeg();
                }
                else
                {
                    MessageBox.Show("No file selected! Please try again");
                }
            }
            else
            {
                General.LogMessageDatabase(
                    "Test Case is still empty!!! Please fill in the Test Case name.",
                    4,
                    string.Empty,
                    0,
                    string.Empty,
                    string.Empty);
                var num = (int)MessageBox.Show(
                    "Test Case is still empty!!!\r\nPlease fill in the Test Case name.",
                    "Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Hand);
                this.TextBoxTestCase.Focusable = true;
                this.TextBoxTestCase.Focus();
            }
        }

        /// <summary>
        ///     Handles the IsEnabledChanged event of the ButtonSetToTest control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonSetToTest_IsEnabledChanged
        private void ButtonSetToTest_IsEnabledChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            if (this.ButtonSetToTest.IsEnabled && this.ElementSetting == "GET")
            {
                this.CheckBoxInlogIncluded.Visibility = Visibility.Visible;
                LabelTestCase.Visibility = Visibility.Visible;
                LabelTestPage.Visibility = Visibility.Visible;
                TextBoxTestCase.Visibility = Visibility.Visible;
                TextBoxTestCasePage.Visibility = Visibility.Visible;
            }
            else
            {
                this.CheckBoxInlogIncluded.Visibility = Visibility.Hidden;
                LabelTestCase.Visibility = Visibility.Hidden;
                LabelTestPage.Visibility = Visibility.Hidden;
                TextBoxTestCase.Visibility = Visibility.Hidden;
                TextBoxTestCasePage.Visibility = Visibility.Hidden;
            }
        }

        /// <summary>
        ///     Handles the Click event of the ButtonTest control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonTest_Click
        private void ButtonTest_Click(object sender, RoutedEventArgs e)
        {
            this.Parsing("http://google.com");
        }

        /// <summary>
        ///     CheckBoxes the basis.
        /// </summary>
        /// <param name="keuze">if set to <c>true</c> [keuze].</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CheckBoxBasis
        private void CheckBoxBasis(bool keuze)
        {
            this.CheckBoxA.IsChecked = keuze;
            this.CheckBoxDiv.IsChecked = keuze;
            this.CheckBoxIframe.IsChecked = keuze;
            this.CheckBoxImg.IsChecked = keuze;
            this.CheckBoxInput.IsChecked = keuze;
            this.CheckBoxLi.IsChecked = keuze;
            this.CheckBoxOption.IsChecked = keuze;
            this.CheckBoxSpan.IsChecked = keuze;
            this.CheckBoxTable.IsChecked = keuze;
            this.CheckBoxTh.IsChecked = keuze;
            this.CheckBoxTr.IsChecked = keuze;
            this.CheckBoxTd.IsChecked = keuze;
        }

        /// <summary>
        ///     CheckBoxes the start.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CheckBoxStart
        private void CheckBoxStart()
        {
            this.CheckBoxA.IsChecked = true;
            this.CheckBoxDiv.IsChecked = true;
            this.CheckBoxIframe.IsChecked = true;
            this.CheckBoxImg.IsChecked = false;
            this.CheckBoxInput.IsChecked = true;
            this.CheckBoxLi.IsChecked = false;
            this.CheckBoxOption.IsChecked = false;
            this.CheckBoxSpan.IsChecked = false;
            this.CheckBoxTable.IsChecked = true;
            this.CheckBoxTh.IsChecked = false;
            this.CheckBoxTr.IsChecked = false;
            this.CheckBoxTd.IsChecked = false;
        }

        /// <summary>
        ///     Checks the data URL in database.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CheckDataUrlInDatabase
        private void CheckDataUrlInDatabase()
        {
            if (!(this.ElementSetting == "GET") || ElementsFromDatabase.GetDataTable(this.url).Count <= 0
                                                || MessageBox.Show(
                                                    "Do you want to delete earlier added elements for url '" + this.url
                                                                                                             + "'?",
                                                    "Question",
                                                    MessageBoxButton.YesNo) != MessageBoxResult.Yes)
                return;
            ElementsFromDatabase.DeleteDataFromDatabase(this.url);
            var num = (int)MessageBox.Show("Elements are deleted!", "Deleting elements", MessageBoxButton.OK);
        }

        private void CheckTextAll_Click(object sender, RoutedEventArgs e)
        {
            var wel = true;
            foreach (var dataGridRow in this.GetDataGridRows(this.DataGridElements))
            {
                var isChecked = (this.DataGridElements.Columns[8].GetCellContent(dataGridRow) as CheckBox).IsChecked;
                var flag = true;
                wel = !((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue);
            }

            this.url = this.ElementSetting != "SET" ? this.TextBoxURL.Text : this.ComboBoxURL.Text;
            ElementsFromDatabase.UpdateAllCheckboxes(this.url, wel, "checktext");
            this.DataGridElements.ItemsSource = null;
            this.DataGridElements.ItemsSource = ElementsFromDatabase.GetDataTable(this.url);

            if (wel) this.CheckTextAll.Content = "Unselect All Text";
            else this.CheckTextAll.Content = "Select All Text";
        }

        /// <summary>
        ///     Handles the DropDownClosed event of the ComboBoxLoginData control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ComboBoxLoginData_DropDownClosed
        private void ComboBoxLoginData_DropDownClosed(object sender, EventArgs e)
        {
            foreach (var inlogDataRecords in InlogData.LoginDataGet())
                if (inlogDataRecords.LoginURL == this.ComboBoxLoginData.Text)
                {
                    this.VulLoginDataGer(inlogDataRecords);
                    this.ComboBoxLoginName.Text = inlogDataRecords.LoginName;
                    if (this.TextBoxURLSave.Text == string.Empty)
                        break;
                    this.ButtonSave.IsEnabled = true;
                    break;
                }
        }

        private void ComboBoxLoginName_DropDownClosed(object sender, EventArgs e)
        {
            foreach (var inlogDataRecords in InlogData.LoginDataGet())
                if (inlogDataRecords.LoginName == this.ComboBoxLoginName.Text)
                {
                    this.VulLoginDataGer(inlogDataRecords);
                    this.ComboBoxLoginData.Text = inlogDataRecords.LoginURL;
                    if (this.TextBoxURLSave.Text == string.Empty)
                        break;
                    this.ButtonSave.IsEnabled = true;
                    break;
                }
        }

        /// <summary>
        ///     Handles the DropDownClosed event of the ComboBoxURL control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ComboBoxURL_DropDownClosed
        private void ComboBoxUrlDropDownClosed(object sender, EventArgs e)
        {
            if (this.ComboBoxURL.SelectedIndex == -1)
                return;
            TextBoxURL.Text = ComboBoxURL.Text;
            this.HaalGegevensEnToon();
        }

        private void DataGridElements_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            var dataGridRow = this.DataGridElements.Items.IndexOf(this.DataGridElements.CurrentItem);
            var dataGridColumn = this.DataGridElements.CurrentColumn;

            if (dataGridColumn != null)
            {
                //if (dataGridColumn.DisplayIndex.ToString() == "1")
                if (dataGridColumn.Header.Equals("Select"))
                {
                    var isChecked1 = (this.DataGridElements.Columns[1].GetCellContent(dataGridRow) as CheckBox)
                        .IsChecked;
                    var flag = true;
                    var wel = !((isChecked1.GetValueOrDefault() == flag) & isChecked1.HasValue);
                    this.url = (this.DataGridElements.Columns[0].GetCellContent(dataGridRow) as TextBlock).Text;
                    ElementsFromDatabase.UpdateAllCheckbox8(this.url, wel, "selenium_check");
                }

                //if (dataGridColumn.DisplayIndex.ToString() == "8")
                if (dataGridColumn.Header.Equals("Check Text"))
                {
                    var isChecked8 = (this.DataGridElements.Columns[8].GetCellContent(dataGridRow) as CheckBox)
                        .IsChecked;
                    var flag = true;
                    var wel = !((isChecked8.GetValueOrDefault() == flag) & isChecked8.HasValue);
                    this.url = (this.DataGridElements.Columns[0].GetCellContent(dataGridRow) as TextBlock).Text;
                    ElementsFromDatabase.UpdateAllCheckbox8(this.url, wel, "checktext");
                }

                this.DataGridElements.ItemsSource = null;
                this.DataGridElements.ItemsSource = ElementsFromDatabase.GetDataTable(this.url);
            }
        }

        private void DataGridElements_CurrentCellChanged(object sender, EventArgs e)
        {
            if (this.DataGridElements.Items.IndexOf(this.DataGridElements.CurrentItem) != -1)
            {
                var dataGridRow = this.DataGridElements.Items.IndexOf(this.DataGridElements.CurrentItem);
                var kolom = this.DataGridElements.CurrentColumn;

                var checkedGer = false;
                var checkedGer0 = false;
                var row = (DataGridRow)this.DataGridElements.ItemContainerGenerator.ContainerFromIndex(dataGridRow);
                var cellContent = this.DataGridElements.Columns[0].GetCellContent(row) as TextBlock;
                var cellContentText = this.DataGridElements.Columns[7].GetCellContent(row) as TextBlock;
                var cellContent1 = this.DataGridElements.Columns[8].GetCellContent(row) as CheckBox;
                var cellContent0 = this.DataGridElements.Columns[1].GetCellContent(row) as CheckBox;

                this.url = this.ElementSetting != "SET" ? this.TextBoxURL.Text : this.ComboBoxURL.Text;
                // if (kolom.DisplayIndex == 1)
                if (kolom.Header.Equals("Select"))
                {
                    if (cellContent0.IsChecked == false)
                    {
                        checkedGer0 = true;
                        cellContent0.IsChecked = true;
                    }
                    else
                    {
                        checkedGer0 = false;
                        cellContent0.IsChecked = false;
                    }

                    ElementsFromDatabase.UpdateCheckBox(cellContent.Text, checkedGer0);
                }
                // if (kolom.DisplayIndex == 8)
                if (kolom.Header.Equals("Check Text"))
                {
                    if (cellContent1.IsChecked == false)
                    {
                        checkedGer = true;
                    }
                    else
                    {
                        checkedGer = false;
                    }

                    ElementsFromDatabase.UpdateCheckBox8(cellContent.Text, checkedGer);

                    if (checkedGer)
                        ElementsFromDatabase.UpdateCheckBoxText(cellContent.Text, cellContentText.Text);
                    else
                        ElementsFromDatabase.UpdateCheckBoxText(cellContent.Text, string.Empty);
                }
                //if (kolom.DisplayIndex == 8)
                    if (kolom.Header.Equals("Check Text"))
                {
                    var isChecked = cellContent1.IsChecked;
                    var flag = true;
                    var check1 = "checktext";
                    if (kolom.Header.Equals("Select"))
                    {
                        check1 = " selenium_check";
                    }

                    var wel = !((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue);
                    ElementsFromDatabase.UpdateAllCheckbox8(cellContent.Text, wel, check1);
                }

                if (kolom.Header.Equals("Check Text") || kolom.Header.Equals("Select"))
                {
                    this.DataGridElements.ItemsSource = null;
                    this.DataGridElements.ItemsSource = ElementsFromDatabase.GetDataTable(this.url);
                    ButtonSetToTest.IsEnabled = false;
                    foreach (var itemG in ElementsFromDatabase.GetDataTable(url))
                    {
                        if (itemG.elementCheck == true)
                        {
                            ButtonSetToTest.IsEnabled = true;
                            break;
                        }
                    }
                }
            }
        }

        /// <summary>
        ///     Handles the LostFocus event of the DataGridElements control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for DataGridElements_LostFocus
        private void DataGridElementsLostFocus(object sender, RoutedEventArgs e)
        {
            // Opslaan();
        }

        /// <summary>
        ///     Examines the node.
        /// </summary>
        /// <param name="node">The node.</param>
        /// <param name="driver2WebDriver">The driver2 web driver.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ExamineNode
        private void ExamineNode(HtmlNode node, IWebDriver driver2WebDriver)
        {
            try
            {
                var showBorderColor = OverallSettings.ShowBorderColor;
                var showBorderWidth = OverallSettings.ShowBorderWidth;
                var showDuration = OverallSettings.ShowDuration;
                var sleepTime = 10;
                if (node is HtmlTextNode)
                    return;
                var empty1 = string.Empty;
                if (node.Attributes["href"] != null)
                    empty1 = node.Attributes["href"].Value;
                var empty2 = string.Empty;
                var empty3 = string.Empty;
                var empty4 = string.Empty;
                var str1 = string.Empty;
                var empty5 = string.Empty;
                var empty6 = string.Empty;
                if (node.Attributes["class"] != null)
                    empty2 = node.Attributes["class"].Value;
                if (node.Attributes["name"] != null)
                    empty3 = node.Attributes["name"].Value;
                if (node.Attributes["title"] != null)
                    empty4 = node.Attributes["title"].Value;
                if (node.Attributes["value"] != null)
                    str1 = node.Attributes["value"].Value;
                if (node.Attributes["id"] != null)
                    str1 = node.Attributes["id"].Value;
                if (str1.Length > byte.MaxValue)
                    str1 = str1.Substring(0, 254);
                bool? isChecked;
                if (node.Name == "a")
                {
                    isChecked = this.CheckBoxA.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "input")
                {
                    isChecked = this.CheckBoxInput.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "iframe")
                {
                    isChecked = this.CheckBoxIframe.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "img")
                {
                    isChecked = this.CheckBoxImg.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "div")
                {
                    isChecked = this.CheckBoxDiv.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "li")
                {
                    isChecked = this.CheckBoxLi.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "table")
                {
                    isChecked = this.CheckBoxTable.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "td")
                {
                    isChecked = this.CheckBoxTd.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "th")
                {
                    isChecked = this.CheckBoxTh.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "tr")
                {
                    isChecked = this.CheckBoxTr.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "option")
                {
                    isChecked = this.CheckBoxOption.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "span")
                {
                    isChecked = this.CheckBoxSpan.IsChecked;
                    var flag = true;
                    if (!((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue))
                        goto label_45;
                }
                else
                {
                    goto label_45;
                }

                label_39:
                var str2 = empty4.Replace("'", "\\'");
                isChecked = this.CheckBoxObjectVisibility.IsChecked;
                var flag1 = true;
                if ((isChecked.GetValueOrDefault() == flag1) & isChecked.HasValue && node.XPath != null)
                    if (driver2WebDriver.FindElement(By.XPath(node.XPath)) != null)
                        try
                        {
                            var element = driver2WebDriver.FindElement(By.XPath(node.XPath));
                            Functions.HighlightAndScreenshot(
                                driver2WebDriver,
                                element,
                                sleepTime,
                                showBorderColor,
                                showBorderWidth);
                        }
                        catch (Exception ex)
                        {
                            var num = (int)MessageBox.Show(ex.Message);
                        }

                // if (StripHTML(HttpUtility.HtmlDecode(node.InnerHtml.Trim())).Length < byte.MaxValue)
                var innertekst = string.Empty;
                if (IsNodeVisible(node)) innertekst = StripHTML(HttpUtility.HtmlDecode(node.InnerText.Trim()));

                // if (node.Name == "input" && node.Attributes["type"].Value != "search" && node.Attributes["type"].Value != "checkbox")
                // {
                // if (node.Attributes["value"].Value != null)
                // {
                // innertekst = node.Attributes["value"].Value;
                // }
                // }

                // var te = Encoding.GetEncoding(node.InnerText).ToString();
                if (StripHTML(HttpUtility.HtmlDecode(node.InnerText.Trim())).Length < byte.MaxValue)
                    General.ExecuteQueryCommand(
                        "INSERT INTO `autotest`.`selenium_elements` " + "(`url`, " + "gebruikte_link, " + "`xpath`, "
                        + "`tagname`, " + "`text`, " + "`id`, " + "`name`, " + "`class`, " + "`href`, " + "`title`, "
                        + "`value`, `checktext`) " + "VALUES " + "('" + MySqlHelper.EscapeString(this.TextBoxURL.Text)
                        + "', " + "'" + MySqlHelper.EscapeString(this.href_link) + "', " + "'"
                        + MySqlHelper.EscapeString(node.XPath) + "', " + "'" + MySqlHelper.EscapeString(node.Name)
                        + "', " + "'" + MySqlHelper.EscapeString(innertekst) + "', " + "'"
                        + MySqlHelper.EscapeString(node.Id) + "', " + "'" + MySqlHelper.EscapeString(empty3) + "', "
                        + "'" + MySqlHelper.EscapeString(empty2) + "', " + "'" + MySqlHelper.EscapeString(empty1)
                        + "', " + "'" + MySqlHelper.EscapeString(str2) + "', " + "'" + MySqlHelper.EscapeString(str1)
                        + "', '0'); ");
                label_45:
                foreach (var childNode in node.ChildNodes) this.ExamineNode(childNode, driver2WebDriver);
            }
            catch (Exception ex)
            {
                General.LogMessageDatabase(
                    ex.Message + "\r\n\r\n" + ex.StackTrace + "\r\n\r\n" + ex.Source,
                    4,
                    string.Empty,
                    0,
                    string.Empty,
                    InloggerData.MachineCode);
            }
        }

        private IWebElement FindElement(string AttributeText, string TagText, ChromeDriver driver1, uint timeout = 5)
        {
            IWebElement content = null;
            switch (AttributeText.ToUpper())
            {
                case "NAME":
                    WaitUntilElementExists(driver1, By.Name(TagText));
                    driver1.FindElement(By.Name(TagText));
                    content = driver1.FindElement(By.Name(TagText));
                    break;
                case "XPATH":
                    WaitUntilElementExists(driver1, By.XPath(TagText));
                    driver1.FindElement(By.XPath(TagText));
                    content = driver1.FindElement(By.XPath(TagText));
                    break;
                case "CLASS":
                    WaitUntilElementExists(driver1, By.ClassName(TagText));
                    driver1.FindElement(By.ClassName(TagText));
                    content = driver1.FindElement(By.ClassName(TagText));
                    break;
                case "ID":
                    WaitUntilElementExists(driver1, By.Id(TagText));
                    driver1.FindElement(By.Id(TagText));
                    content = driver1.FindElement(By.Id(TagText));
                    break;
                case "CSSSELECTOR":
                    WaitUntilElementExists(driver1, By.CssSelector(TagText));
                    driver1.FindElement(By.CssSelector(TagText));
                    content = driver1.FindElement(By.CssSelector(TagText));
                    break;
            }

            return content;
        }

        /// <summary>
        ///     Finds the test applications.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for FindTestApplications
        private void FindTestApplications()
        {
            foreach (var file in new DirectoryInfo(Functions.GetCurrentDir(1)).GetFiles("*.xml"))
                this.ComboBoxApplications.Items.Add(
                    new List<string>
                        {
                            Functions.GetSettingsXmlStrings(file.Name.Substring(0, file.Name.Length - 4), 1).ToList()[1]
                        }.Distinct().ToList()[0]);
        }

        /// <summary>
        ///     Haals the gegevens ComboBox.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for HaalGegevensComboBox
        private void HaalGegevensComboBox()
        {
            var urlOverviewList = new List<UrlOverview>();
            var urLs = UrlOverview.GetUrLs();
            this.ComboBoxURL.Items.Clear();
            foreach (var urlOverview in urLs) this.ComboBoxURL.Items.Add(urlOverview.urlstring);
        }

        /// <summary>
        ///     Haals the gegevens en toon.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for HaalGegevensEnToon
        private void HaalGegevensEnToon()
        {
            this.url = !(this.ElementSetting == "GET") ? this.ComboBoxURL.Text : this.TextBoxURL.Text;
            General.LogMessageDatabase(
                "URL: '" + this.url + "'.",
                3,
                string.Empty,
                0,
                string.Empty,
                InloggerData.MachineCode);
            this.CheckDataUrlInDatabase();
            if (!this.url.StartsWith("http://") && !this.url.StartsWith("https://"))
            {
                var num = (int)MessageBox.Show(
                    "The url has to start with 'http://' or 'https://'\r\nPlease try again!!!",
                    "Message",
                    MessageBoxButton.OK,
                    MessageBoxImage.Exclamation);
            }
            else
            {
                this.ButtonSetToTest.IsEnabled = false;
                this.LabelTestCase.Visibility = Visibility.Hidden;
                this.TextBoxTestCase.Visibility = Visibility.Hidden;
                if (this.ElementSetting == "GET")
                    try
                    {
                        using (new PleaseWait())
                        {
                            var _driver = new ChromeDriver(Functions.GetCurrentDir(0));
                            _driver.Navigate().GoToUrl(this.TextBoxURLSave.Text);
                            _driver.Manage().Window.Maximize();
                            _driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);

                            IWebElement content = null;

                            for (var i = 1; i < 7; i++)
                            {
                                // UserName
                                if (this.Order1.Text == i.ToString())
                                    if (this.ComboBoxAction1.Text != string.Empty && this.UserText.Text != string.Empty
                                                                                  && this.UserTag.Text != string.Empty
                                                                                  && this.UserAttribute.Text
                                                                                  != string.Empty)
                                    {
                                        content = this.FindElement(
                                            this.UserAttribute.Text.ToLower(),
                                            this.UserTag.Text.ToLower(),
                                            _driver);
                                        this.ActieUitvoeren(
                                            content,
                                            this.ComboBoxAction1.Text,
                                            this.UserText.Text,
                                            _driver,
                                            this.UserAttribute.Text);
                                    }

                                // Password
                                if (this.Order2.Text == i.ToString())
                                    if (this.ComboBoxAction3.Text != string.Empty
                                        && this.PasswordText.Password != string.Empty
                                        && this.PasswordTag.Text != string.Empty
                                        && this.PasswordAtrribute.Text != string.Empty)
                                    {
                                        content = this.FindElement(
                                            this.PasswordAtrribute.Text.ToLower(),
                                            this.PasswordTag.Text.ToLower(),
                                            _driver);
                                        this.ActieUitvoeren(
                                            content,
                                            this.ComboBoxAction3.Text,
                                            this.PasswordText.Password,
                                            _driver,
                                            this.PasswordAtrribute.Text);
                                    }

                                // Login button
                                if (this.Order3.Text == i.ToString())
                                    if (this.ComboBoxAction4.Text != string.Empty && this.ButtonTag.Text != string.Empty
                                                                                  && this.ButtonAttribute.Text
                                                                                  != string.Empty)
                                    {
                                        content = this.FindElement(
                                            this.ButtonAttribute.Text.ToLower(),
                                            this.ButtonTag.Text.ToLower(),
                                            _driver);
                                        this.ActieUitvoeren(
                                            content,
                                            this.ComboBoxAction4.Text,
                                            string.Empty,
                                            _driver,
                                            this.ButtonAttribute.Text);
                                    }

                                if (this.Order6.Text == i.ToString())
                                    if (this.ComboBoxAction2.Text != string.Empty)
                                    {
                                        if (this.ComboBoxAction2.Text == "sendkeys"
                                            || this.ComboBoxAction2.Text == "select"
                                            || this.ComboBoxAction2.Text == "set_value")
                                        {
                                            if (this.DescriptionExtra3.Text != string.Empty)
                                            {
                                                content = this.FindElement(
                                                    this.ButtonAttributeExtra3.Text.ToLower(),
                                                    this.ButtonTagnameExtra3.Text.ToLower(),
                                                    _driver);
                                                this.ActieUitvoeren(
                                                    content,
                                                    this.ComboBoxAction2.Text,
                                                    this.DescriptionExtra3.Text,
                                                    _driver,
                                                    this.ButtonAttributeExtra3.Text);
                                            }
                                        }
                                        else
                                        {
                                            content = this.FindElement(
                                                this.ButtonAttributeExtra3.Text.ToLower(),
                                                this.ButtonTagnameExtra3.Text.ToLower(),
                                                _driver);
                                            this.ActieUitvoeren(
                                                content,
                                                this.ComboBoxAction2.Text,
                                                this.DescriptionExtra3.Text,
                                                _driver,
                                                this.ButtonAttributeExtra3.Text);
                                        }
                                    }
                            }

                            yy = new HashSet<string>();

                            this.HaalGegevensSite(_driver, this.TextBoxURL.Text);
                            foreach (var urlstring in yy.ToList()) this.HaalGegevensSite(_driver, urlstring);
                            var isChecked = this.CheckBoxWholeWebsite.IsChecked;
                            var flag = true;
                            if ((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue)
                            {
                                Thread.Sleep(5000);

                                var Webget = new HtmlWeb();
                                var doc = new HtmlDocument();
                                Webget.AutoDetectEncoding = false;
                                Webget.OverrideEncoding = Encoding.UTF8;

                                doc = Webget.Load(_driver.Url);
                                var htmlDocument = new HtmlWeb().Load(_driver.Url);

                                // General.LogMessageDatabase(htmlDocument.Text, 0, "", 0, "", "");
                                foreach (var childNode in doc.DocumentNode.SelectSingleNode("*").ChildNodes) ;
                            }

                            _driver.Quit();
                        }
                    }
                    catch (Exception ex)
                    {
                        General.LogMessageDatabase(
                            ex.Message + "\r\n\r\n" + ex.StackTrace + "\r\n\r\n" + ex.Source,
                            4,
                            string.Empty,
                            0,
                            string.Empty,
                            InloggerData.MachineCode);
                        _driver.Quit();
                    }

                this.DataGridElements.ItemsSource = ElementsFromDatabase.GetDataTable(this.url);
                if (this.DataGridElements.Items.Count > 0)
                {
                    foreach (var itemG in ElementsFromDatabase.GetDataTable(url))
                    {
                        if (itemG.elementCheck == true)
                        {
                            ButtonSetToTest.IsEnabled = true;
                            break;
                        }
                    }
                    this.DataGridElements.Visibility = Visibility.Visible;
                    this.ButtonSelectAll.IsEnabled = true;
                    this.CheckTextAll.IsEnabled = true;
                }
                else
                {
                    this.DataGridElements.Visibility = Visibility.Hidden;
                    this.ButtonSelectAll.IsEnabled = false;
                    this.CheckTextAll.IsEnabled = false;
                }

                this.LabelFoundElements.Content = "Found Elements: " + this.DataGridElements.Items.Count;
                this.LabelFoundElements.Visibility = Visibility.Visible;
            }
        }

        /// <summary>
        ///     Haals the gegevens site.
        /// </summary>
        /// <param name="_driver">The driver.</param>
        /// <param name="urlstring">The urlstring.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for HaalGegevensSite
        private void HaalGegevensSite(ChromeDriver _driver1, string urlstring)
        {
            IWebElement content = null;
            _driver1.Navigate().GoToUrl(urlstring);

            if (this.Order4.Text != string.Empty && this.Order4.Text != "0")
            {
                if (this.ComboBoxAction5.Text != string.Empty)
                {
                    if (this.ComboBoxAction5.Text == "sendkeys" || this.ComboBoxAction5.Text == "select"
                                                                || this.ComboBoxAction5.Text == "set_value")
                    {
                        if (this.DescriptionExtra1.Text != string.Empty)
                        {
                            content = this.FindElement(
                                this.ButtonAttributeExtra1.Text.ToLower(),
                                this.ButtonTagnameExtra1.Text.ToLower(),
                                _driver1);
                            this.ActieUitvoeren(
                                content,
                                this.ComboBoxAction5.Text,
                                this.DescriptionExtra1.Text,
                                _driver1,
                                this.ButtonAttributeExtra1.Text);
                        }
                    }
                    else
                    {
                        content = this.FindElement(
                            this.ButtonAttributeExtra1.Text.ToLower(),
                            this.ButtonTagnameExtra1.Text.ToLower(),
                            _driver1,
                            15);
                        this.ActieUitvoeren(
                            content,
                            this.ComboBoxAction5.Text,
                            this.DescriptionExtra1.Text,
                            _driver1,
                            this.ButtonAttributeExtra1.Text);
                    }
                }
            }

            if (this.Order5.Text != string.Empty && this.Order5.Text != "0")
            {
                if (this.ComboBoxAction6.Text != string.Empty)
                    if (this.ComboBoxAction6.Text == "sendkeys" || this.ComboBoxAction6.Text == "select"
                                                                || this.ComboBoxAction6.Text == "set_value")
                    {
                        if (this.DescriptionExtra2.Text != string.Empty)
                        {
                            content = this.FindElement(
                                this.ButtonAttributeExtra2.Text.ToLower(),
                                this.ButtonTagnameExtra2.Text.ToLower(),
                                _driver1);
                            this.ActieUitvoeren(
                                content,
                                this.ComboBoxAction6.Text,
                                this.DescriptionExtra2.Text,
                                _driver1,
                                this.ButtonAttributeExtra2.Text);
                        }
                    }
                    else
                    {
                        content = this.FindElement(
                            this.ButtonAttributeExtra2.Text.ToLower(),
                            this.ButtonTagnameExtra2.Text.ToLower(),
                            _driver1);
                        this.ActieUitvoeren(
                            content,
                            this.ComboBoxAction6.Text,
                            this.DescriptionExtra2.Text,
                            _driver1,
                            this.ButtonAttributeExtra2.Text);
                    }
            }

            try
            {
                // _driver.Url = urlstring;
                string html;

                // using (var webClient = new WebClient())
                // {
                // html = webClient.DownloadString(_driver.Url);
                // }
                var htmlDocument = new HtmlDocument();
                var Webget = new HtmlWeb();
                var doc = new HtmlDocument();
                Webget.AutoDetectEncoding = false;
                Webget.OverrideEncoding = Encoding.UTF8;

                // doc = Webget.Load(_driver.Url);
                doc.LoadHtml(_driver1.PageSource);

                // var htmlDocument = new HtmlWeb().Load(_driver.Url);
                // htmlDocument.LoadHtml(doc);
                this.number = 0;
                foreach (var selectNode in doc.DocumentNode.SelectNodes("*"))
                {
                    this.ExamineNode(selectNode, _driver1);
                    ++this.number;
                }
            }
            catch (Exception ex)
            {
                General.LogMessageDatabase(
                    ex.Message + "\r\n\r\n" + ex.StackTrace + "\r\n\r\n" + ex.Source,
                    4,
                    string.Empty,
                    0,
                    string.Empty,
                    InloggerData.MachineCode);
            }
        }

        /// <summary>
        ///     Inlogs the leeg.
        /// </summary>
        /// <param name="zien">if set to <c>true</c> [zien].</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for inlogLeeg
        private void InlogLeeg(bool zien)
        {
            var visibility = Visibility.Hidden;
            if (zien)
                visibility = Visibility.Visible;
            this.username.Visibility = visibility;
            this.passwordname.Visibility = visibility;
            this.buttonName.Visibility = visibility;
            this.StackPanelLoad.Visibility = visibility;
            this.StackPanelSave.Visibility = visibility;
            this.LabelFoundElements1.Visibility = visibility;
            this.buttonExtaName.Visibility = visibility;
            this.ButtonAttributeExtra2s.Visibility = visibility;
            this.Extra.Visibility = visibility;
        }

        private void LeegMaken()
        {
            this.ComboBoxAction1.SelectedIndex = 2;
            this.ComboBoxAction2.SelectedIndex = 0;
            this.ComboBoxAction3.SelectedIndex = 2;
            this.ComboBoxAction4.SelectedIndex = 1;
            this.ComboBoxAction5.SelectedIndex = 1;
            this.ComboBoxAction6.SelectedIndex = 1;

            this.UserAttribute.SelectedIndex = 2;
            this.PasswordAtrribute.SelectedIndex = 2;
            this.ButtonAttribute.SelectedIndex = 2;
            this.ButtonAttributeExtra1.SelectedIndex = 2;
            this.ButtonAttributeExtra2.SelectedIndex = 2;
            this.ButtonAttributeExtra3.SelectedIndex = 2;
        }

        /// <summary>
        ///     Handles the Click event of the loginCheck control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for loginCheck_Click
        private void loginCheck_Click(object sender, RoutedEventArgs e)
        {
            this.ToonInloggegevens();
        }

        /// <summary>
        ///     Maaks the login leeg.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for MaakLoginLeeg
        private void MaakLoginLeeg()
        {
            this.UserAttribute.Text = string.Empty;
            this.PasswordAtrribute.Text = string.Empty;
            this.ButtonAttribute.Text = string.Empty;
            this.UserTag.Text = string.Empty;
            this.PasswordTag.Text = string.Empty;
            this.ButtonTag.Text = string.Empty;
            this.UserText.Text = string.Empty;
            this.PasswordText.Password = string.Empty;
            this.LabelID.Content = string.Empty;
            this.TextBoxURLSave.Text = string.Empty;
            this.LeegMaken();
        }

        private void Opslaan()
        {
            foreach (var dataGridRow in this.GetDataGridRows(this.DataGridElements))
            {
                var isChecked1 = (this.DataGridElements.Columns[1].GetCellContent(dataGridRow) as CheckBox).IsChecked;
                this.url = (this.DataGridElements.Columns[0].GetCellContent(dataGridRow) as TextBlock).Text;
                ElementsFromDatabase.UpdateAllCheckbox8(this.url, isChecked1.Value, "selenium_check");
            }

            foreach (var dataGridRow in this.GetDataGridRows(this.DataGridElements))
            {
                var isChecked8 = (this.DataGridElements.Columns[8].GetCellContent(dataGridRow) as CheckBox).IsChecked;
                this.url = (this.DataGridElements.Columns[0].GetCellContent(dataGridRow) as TextBlock).Text;
                ElementsFromDatabase.UpdateAllCheckbox8(this.url, isChecked8.Value, "checktext");

                if (((CheckBox)this.DataGridElements.Columns[1].GetCellContent(dataGridRow)).IsChecked.Value)
                {
                    this.ButtonSetToTest.IsEnabled = true;
                    this.CheckTextAll.IsEnabled = true;
                    this.LabelTestCase.Visibility = Visibility.Visible;
                    this.TextBoxTestCase.Visibility = Visibility.Visible;
                    this.LabelTestPage.Visibility = Visibility.Visible;
                    this.TextBoxTestCasePage.Visibility = Visibility.Visible;
                }
            }
        }

        /// <summary>
        ///     Parsings the specified website.
        /// </summary>
        /// <param name="website">The website.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Parsing
        private async void Parsing(string website)
        {
            var byteArrayAsync = await new HttpClient().GetByteArrayAsync("https://vhost-1.corsola.uvt.nl/en");
            var str = WebUtility.HtmlDecode(
                Encoding.GetEncoding("utf-8").GetString(byteArrayAsync, 0, byteArrayAsync.Length - 1));
            var htmlDocument = new HtmlDocument();
            htmlDocument.LoadHtml(str);
            var num = (int)MessageBox.Show(str);
            foreach (var htmlNode in htmlDocument.DocumentNode.Descendants().ToList())
            {
                var textBoxElementen = this.TextBoxElementen;
                textBoxElementen.Text = textBoxElementen.Text + htmlNode.XPath + ";" + htmlNode.Id + ";" + htmlNode.Name
                                        + "\r\n";
            }

            this.TextBoxElementen.Visibility = Visibility.Visible;
        }

        /// <summary>
        ///     Sets the button context.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for SetButtonContext
        private void SetButtonContext()
        {
            this.Title = "Extras - Find Elements - Get elements from ";
            var elementSetting = this.ElementSetting;
            if (!(elementSetting == "GET"))
            {
                if (!(elementSetting == "SET"))
                    return;
                this.Title += "database";
            }
            else
            {
                this.Title += "url";
            }
        }

        /// <summary>
        ///     Handles the KeyDown event of the TextBoxURL control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.Input.KeyEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBoxURL_KeyDown
        private void TextBoxURL_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Return || e.Key == Key.Return) this.HaalGegevensEnToon();
            this.VullenTextBox();
        }

        /// <summary>
        ///     Handles the LostFocus event of the TextBoxURL control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBoxURL_LostFocus
        private void TextBoxURL_LostFocus(object sender, RoutedEventArgs e)
        {
            this.VullenTextBox();
        }

        /// <summary>
        ///     Handles the TextChanged event of the TextBoxURL control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="TextChangedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBoxURL_TextChanged
        private void TextBoxURL_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (!(this.TextBoxURL.Text != string.Empty))
                return;
            var isChecked1 = this.CheckBoxInput.IsChecked;
            var flag1 = true;
            if (!((isChecked1.GetValueOrDefault() == flag1) & isChecked1.HasValue))
            {
                var isChecked2 = this.CheckBoxImg.IsChecked;
                var flag2 = true;
                if (!((isChecked2.GetValueOrDefault() == flag2) & isChecked2.HasValue))
                {
                    var isChecked3 = this.CheckBoxLi.IsChecked;
                    var flag3 = true;
                    if (!((isChecked3.GetValueOrDefault() == flag3) & isChecked3.HasValue))
                    {
                        var isChecked4 = this.CheckBoxTd.IsChecked;
                        var flag4 = true;
                        if (!((isChecked4.GetValueOrDefault() == flag4) & isChecked4.HasValue))
                        {
                            var isChecked5 = this.CheckBoxTr.IsChecked;
                            var flag5 = true;
                            if (!((isChecked5.GetValueOrDefault() == flag5) & isChecked5.HasValue))
                            {
                                var isChecked6 = this.CheckBoxTable.IsChecked;
                                var flag6 = true;
                                if (!((isChecked6.GetValueOrDefault() == flag6) & isChecked6.HasValue))
                                {
                                    var isChecked7 = this.CheckBoxSpan.IsChecked;
                                    var flag7 = true;
                                    if (!((isChecked7.GetValueOrDefault() == flag7) & isChecked7.HasValue))
                                    {
                                        var isChecked8 = this.CheckBoxIframe.IsChecked;
                                        var flag8 = true;
                                        if (!((isChecked8.GetValueOrDefault() == flag8) & isChecked8.HasValue))
                                        {
                                            var isChecked9 = this.CheckBoxOption.IsChecked;
                                            var flag9 = true;
                                            if (!((isChecked9.GetValueOrDefault() == flag9) & isChecked9.HasValue))
                                            {
                                                var isChecked10 = this.CheckBoxDiv.IsChecked;
                                                var flag10 = true;
                                                if (!((isChecked10.GetValueOrDefault() == flag10)
                                                      & isChecked10.HasValue))
                                                {
                                                    var isChecked11 = this.CheckBoxTh.IsChecked;
                                                    var flag11 = true;
                                                    if (!((isChecked11.GetValueOrDefault() == flag11)
                                                          & isChecked11.HasValue))
                                                    {
                                                        var isChecked12 = this.CheckBoxA.IsChecked;
                                                        var flag12 = true;
                                                        if (!((isChecked12.GetValueOrDefault() == flag12)
                                                              & isChecked12.HasValue))
                                                            return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            this.ButtonGetElements.IsEnabled = true;
            this.CheckTextAll.IsEnabled = true;
        }

        /// <summary>
        ///     Handles the LostFocus event of the TextBoxURLSave control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBoxURLSave_LostFocus
        private void TextBoxURLSave_LostFocus(object sender, RoutedEventArgs e)
        {
            if (this.TextBoxURLSave.Text == string.Empty)
            {
                this.LabelID.Content = string.Empty;
                this.ButtonSave.IsEnabled = false;
            }
            else
            {
                this.ButtonSave.IsEnabled = true;
            }
        }

        /// <summary>
        ///     Toons the inloggegevens.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ToonInloggegevens
        private void ToonInloggegevens()
        {
            var margin = this.BorderInlog.Margin;
            var isChecked = this.loginCheck.IsChecked;
            var flag = false;
            if ((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue)
            {
                margin.Bottom = 307.0;
                this.InlogLeeg(false);
            }
            else
            {
                margin.Bottom = 157.0;
                this.InlogLeeg(true);
            }
        }

        /// <summary>
        ///     Vuls the inlog data.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for VulInlogData
        private void VulInlogData()
        {
            var inlogDataRecordsList2 = InlogData.LoginDataGet();
            this.ComboBoxLoginData.Items.Clear();
            this.ComboBoxLoginName.Items.Clear();

            foreach (var inlogDataRecords in inlogDataRecordsList2)
            {
                this.ComboBoxLoginData.Items.Add(inlogDataRecords.LoginURL);
                this.ComboBoxLoginName.Items.Add(inlogDataRecords.LoginName);
            }
        }

        /// <summary>
        ///     Vullens the text box.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for VullenTextBox
        private void VullenTextBox()
        {
            if (this.TextBoxURL.Text.Length > 4)
            {
                this.ButtonGetElements.IsEnabled = true;

                // TextBoxURLSave.Text = TextBoxURL.Text;
                this.href_link = this.TextBoxURL.Text;
            }
            else
            {
                this.ButtonGetElements.IsEnabled = false;

                // TextBoxURLSave.Text = string.Empty;
            }
        }

        private void VulLoginDataGer(InlogData.InlogDataRecords inlogDataRecords)
        {
            this.UserAttribute.Text = inlogDataRecords.LoginAttributeUsername;
            this.PasswordAtrribute.Text = inlogDataRecords.LoginAttributePassword;
            this.ButtonAttribute.Text = inlogDataRecords.LoginAttributeButton;
            this.UserTag.Text = inlogDataRecords.LoginTagUsername;
            this.PasswordTag.Text = inlogDataRecords.LoginTagPassword;
            this.ButtonTag.Text = inlogDataRecords.LoginTagButton;
            this.UserText.Text = inlogDataRecords.LoginValueUsername;
            this.PasswordText.Password = inlogDataRecords.LoginValuePassword;
            this.LabelID.Content = inlogDataRecords.IdLoginCode;
            this.TextBoxURLSave.Text = inlogDataRecords.LoginURL;
            this.TextBoxNameSave.Text = inlogDataRecords.LoginName;
            this.ButtonAttributeExtra1.Text = inlogDataRecords.LoginAttributeExtra1;
            this.ButtonAttributeExtra2.Text = inlogDataRecords.LoginAttributeExtra2;
            this.ButtonAttributeExtra3.Text = inlogDataRecords.LoginAttributeExtra3;
            this.ButtonTagnameExtra1.Text = inlogDataRecords.LoginTagnameExtra1;
            this.ButtonTagnameExtra2.Text = inlogDataRecords.LoginTagnameExtra2;
            this.ButtonTagnameExtra3.Text = inlogDataRecords.LoginTagnameExtra3;
            this.DescriptionExtra1.Text = inlogDataRecords.LoginDescriptionExtra1;
            this.DescriptionExtra2.Text = inlogDataRecords.LoginDescriptionExtra2;
            this.DescriptionExtra3.Text = inlogDataRecords.LoginDescriptionExtra3;
            this.ComboBoxAction1.Text = inlogDataRecords.LoginAction1;
            this.ComboBoxAction2.Text = inlogDataRecords.LoginAction2;
            this.ComboBoxAction3.Text = inlogDataRecords.LoginAction3;
            this.ComboBoxAction4.Text = inlogDataRecords.LoginAction4;
            this.ComboBoxAction5.Text = inlogDataRecords.LoginAction5;
            this.ComboBoxAction6.Text = inlogDataRecords.LoginAction6;
            this.Order1.Text = inlogDataRecords.LoginOrder1;
            this.Order2.Text = inlogDataRecords.LoginOrder2;
            this.Order3.Text = inlogDataRecords.LoginOrder3;
            this.Order4.Text = inlogDataRecords.LoginOrder4;
            this.Order5.Text = inlogDataRecords.LoginOrder5;
            this.Order6.Text = inlogDataRecords.LoginOrder6;
        }

        /// <summary>
        ///     Handles the Closing event of the Window control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="CancelEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Window_Closing
        private void Window_Closing(object sender, CancelEventArgs e)
        {
            ElementsFromDatabase.UpdateAllCheckboxes(this.TextBoxURL.Text, false, "selenium_check");
            ElementsFromDatabase.UpdateAllCheckboxes(this.TextBoxURL.Text, false, "checktext");
        }

        /// <summary>
        ///     Handles the Loaded event of the Window control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Window_Loaded
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            Functions.InitializeDatabaseConnection(false);
            this.FindTestApplications();

            this.LeegMaken();
        }
    }

    /// <summary>
    ///     Class Html2PlainText.
    /// </summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for Html2PlainText
    public static class Html2PlainText
    {
        /// <summary>
        ///     The div endings
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for DivEndings
        private static readonly Regex DivEndings = new Regex("</div>", RegexOptions.IgnoreCase | RegexOptions.Compiled);

        /// <summary>
        ///     The line breaks
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for LineBreaks
        private static readonly Regex LineBreaks = new Regex(
            "</br\\s*>",
            RegexOptions.IgnoreCase | RegexOptions.Compiled);

        /// <summary>
        ///     The non explicit lines
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for NonExplicitLines
        private static readonly Regex NonExplicitLines = new Regex(
            "\\r|\\n",
            RegexOptions.Multiline | RegexOptions.Compiled);

        /// <summary>
        ///     The tags
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Tags
        private static readonly Regex Tags = new Regex("<[^>]*>", RegexOptions.Compiled);

        /// <summary>
        ///     Decodes the specified HTML.
        /// </summary>
        /// <param name="html">The HTML.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Decode
        public static string Decode(string html)
        {
            if (string.IsNullOrEmpty(html))
                return html;

            var decoded = html.Trim();
            if (!HasTags(decoded))
                return html;

            decoded = NonExplicitLines.Replace(decoded, string.Empty);
            decoded = DivEndings.Replace(decoded, Environment.NewLine);
            decoded = LineBreaks.Replace(decoded, Environment.NewLine);
            decoded = Tags.Replace(decoded, string.Empty).Trim();

            return WebUtility.HtmlDecode(decoded);
        }

        /// <summary>
        ///     Determines whether the specified string has tags.
        /// </summary>
        /// <param name="str">The string.</param>
        /// <returns><c>true</c> if the specified string has tags; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for HasTags
        private static bool HasTags(string str)
        {
            return str.StartsWith("<") && str.EndsWith(">");
        }
    }
}