// ***********************************************************************
// Assembly         : SeleniumTestTool
// Author           : G.H.M.H. Schmeits
// Created          : 08-13-2019
//
// Last Modified By : G.H.M.H. Schmeits
// Last Modified On : 08-16-2019
// ***********************************************************************
// <copyright file="ElementsGetSet.xaml.cs" company="SCHMEITS SOFTWARE">
//     Copyright © G.H.M.H. Schmeits  2018-2019
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Media;
using DataStorage;
using GeneralFunctionality;
using HtmlAgilityPack;
using MySql.Data.MySqlClient;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using UrlFactory;
using CheckBox = System.Windows.Controls.CheckBox;
using DataGrid = System.Windows.Controls.DataGrid;
using DataGridCell = System.Windows.Controls.DataGridCell;
using HtmlDocument = HtmlAgilityPack.HtmlDocument;
using KeyEventArgs = System.Windows.Input.KeyEventArgs;
using Keys = OpenQA.Selenium.Keys;
using MessageBox = System.Windows.MessageBox;

namespace WPFTestResults
{
    /// <summary>
    ///     Class ElementsGetSet.
    ///     Implements the <see cref="System.Windows.Window" />
    ///     Implements the <see cref="System.Windows.Markup.IComponentConnector" />
    /// </summary>
    /// <seealso cref="System.Windows.Window" />
    /// <seealso cref="System.Windows.Markup.IComponentConnector" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for ElementsGetSet
    public partial class ElementsGetSet : Window
    {
        /// <summary>
        ///     The driver
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _driver
        private static ChromeDriver _driver;

        private static string loginnaam;

        /// <summary>
        ///     The arr href
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for arrHref
        private static string[] arrHref;

        /// <summary>
        ///     The driver
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for driver
        private static IWebDriver driver;

        /// <summary>
        ///     The yy
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for yy
        private static HashSet<string> yy;

        private readonly string project;
        private readonly string project_id;

        /// <summary>
        ///     The href link
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for href_link
        private string href_link = string.Empty;

        /// <summary>
        ///     Initializes a new instance of the <see cref="ElementsGetSet" /> class.
        /// </summary>
        /// <param name="GetSet">The get set.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public ElementsGetSet(string GetSet, string _project, string projectid)
        {
            InitializeComponent();
            var resHeight = Screen.PrimaryScreen.Bounds.Height;
            var actualHeight = SystemParameters.PrimaryScreenHeight;
            var actualWidth = SystemParameters.PrimaryScreenWidth;
            var dpi =
                resHeight /
                actualHeight; // 1.5 which is true because my settings says my scale is 150%
            UserInterfaceCustomScale(dpi);

            var w = actualWidth * 0.95;
            var h = actualHeight * 0.90;
            project = _project;
            Width = w;
            Height = h;

            project_id = projectid;

            ElementSetting = GetSet;
            ButtonGetElements.IsEnabled = false;
            LabelID.Content = string.Empty;
            SetButtonContext();
            ButtonSave.IsEnabled = false;
            LabelFoundElements.Visibility = Visibility.Hidden;
            ButtonSetToTest.IsEnabled = false;
            LabelTestCase.Visibility = Visibility.Hidden;
            TextBoxTestCase.Visibility = Visibility.Hidden;
            LabelTestPage.Visibility = Visibility.Hidden;
            TextBoxTestCasePage.Visibility = Visibility.Hidden;
            GridCheckText.Visibility = Visibility.Hidden;
            ButtonSetTextCheck.IsEnabled = false;
            CheckBoxClearTextCheck.IsEnabled = false;
            UserAttribute.Text = "Name";
            PasswordAtrribute.Text = "Name";
            ButtonAttribute.Text = "Name";
            href_link = string.Empty;
            ButtonSetToTest.IsEnabled = false;
            CheckBoxClearTextCheck.IsChecked = false;
            CheckBoxInlogIncluded.Visibility = Visibility.Hidden;
            if (ElementSetting == "SET")
            {
                Inlog.Visibility = Visibility.Hidden;
                BorderInlog.Visibility = Visibility.Hidden;
                StackPanelLoad.Visibility = Visibility.Hidden;
                StackPanelSave.Visibility = Visibility.Hidden;
                TextBoxURL.Visibility = Visibility.Collapsed;
                ComboBoxURL.Visibility = Visibility.Visible;
                ButtonGetElements.Visibility = Visibility.Hidden;
                CheckTextAll.Visibility = Visibility.Hidden;
                ButtonCSV.Visibility = Visibility.Hidden;
                CheckBoxWholeWebsite.Visibility = Visibility.Hidden;
                CheckBoxObjectVisibility.Visibility = Visibility.Hidden;
                HaalGegevensComboBox();
                BorderSelect.Visibility = Visibility.Hidden;
                GridSelectTags.Visibility = Visibility.Hidden;
            }
            else
            {
                Inlog.Visibility = Visibility.Visible;
                BorderInlog.Visibility = Visibility.Visible;
                StackPanelLoad.Visibility = Visibility.Visible;
                StackPanelSave.Visibility = Visibility.Visible;
                BorderSelect.Visibility = Visibility.Visible;
                GridSelectTags.Visibility = Visibility.Visible;
                TextBoxURL.Visibility = Visibility.Visible;
                ComboBoxURL.Visibility = Visibility.Collapsed;
                CheckBoxObjectVisibility.Visibility = Visibility.Hidden;
                CheckBoxStart();
                CheckTextAll.Visibility = Visibility.Visible;
                ButtonCSV.Visibility = Visibility.Visible;
                ToonInloggegevens();

                VulInlogData();
            }

            var borderInlogMargin = BorderInlog.Margin;
            borderInlogMargin.Bottom = 307.0;
            DataGridElements.Visibility = Visibility.Visible;
            DataGridElements.Height = Height*0.6;
            DataGridElements.Width = Width*0.8;
            DataGridElements.Visibility = Visibility.Hidden;
            CheckTextAll.Visibility = Visibility.Hidden;
            ButtonCSV.Visibility = Visibility.Hidden;
            CheckBoxSwitchTo.Visibility = Visibility.Hidden;
            CheckBoxSwitchTo.IsChecked = false;
        }

        /// <summary>
        ///     Gets the element setting.
        /// </summary>
        /// <value>The element setting.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ElementSetting
        private string ElementSetting { get; }

        /// <summary>
        ///     Gets or sets the number.
        /// </summary>
        /// <value>The number.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for number
        private int number { get; set; }

        /// <summary>
        ///     Gets or sets the URL.
        /// </summary>
        /// <value>The URL.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for url
        private string url { get; set; }


        private void UserInterfaceCustomScale(double customScale)
        {
            // Change scale of window content 
            LayoutTransform =
                new ScaleTransform(customScale, customScale, 0, 0);
            Width *= customScale;
            Height *= customScale;

            // Bring window center screen
            var screenHeight = SystemParameters.PrimaryScreenHeight;
            var screenWidth = SystemParameters.PrimaryScreenWidth;
            Top = (screenHeight - Height) / 2;
            Left = (screenWidth - Width) / 2;
        }

        /// <summary>
        ///     Gets the visual child.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="parent">The parent.</param>
        /// <returns>T.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetVisualChild`1
        public static T GetVisualChild<T>(Visual parent)
            where T : Visual
        {
            var obj = default(T);
            var childrenCount = VisualTreeHelper.GetChildrenCount(parent);
            for (var childIndex = 0; childIndex < childrenCount; ++childIndex)
            {
                var child =
                    (Visual)VisualTreeHelper.GetChild(parent, childIndex);
                obj = child as T;
                if (obj == null)
                    obj = GetVisualChild<T>(child);
                if (obj != null)
                    break;
            }

            return obj;
        }

        /// <summary>
        ///     Parses the HTML style string.
        /// </summary>
        /// <param name="style">The style.</param>
        /// <returns>Dictionary&lt;System.String, System.String&gt;.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ParseHtmlStyleString
        public static Dictionary<string, string> ParseHtmlStyleString(
            string style)
        {
            var result = new Dictionary<string, string>();

            style = style.Replace(" ", string.Empty).ToLowerInvariant();

            var settings = style.Split(new[] { ';' },
                StringSplitOptions.RemoveEmptyEntries);

            foreach (var s in settings)
            {
                if (!s.Contains(':'))
                    continue;
                var data = s.Split(':');
                result.Add(data[0], data[1]);
            }

            return result;
        }

        /// <summary>
        ///     Strips the HTML.
        /// </summary>
        /// <param name="input">The input.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for StripHTML
        public static string StripHTML(string input)
        {
            var output1 = Regex.Replace(input, "<.*?>", string.Empty);
            var output = new string(output1.Trim()
                .Where(c => !char.IsControl(c)).ToArray());
            var outd = output;

            output = Regex.Replace(outd, @"\s+", " ");
            return output.Trim();
        }

        // this will search for the element until a timeout is reached
        public static IWebElement WaitUntilElementExists(ChromeDriver driver,
            By elementLocator, int timeout = 10)
        {
            try
            {
                var wait =
                    new WebDriverWait(driver, TimeSpan.FromSeconds(timeout));
                return wait.Until(
                    ExpectedConditions.ElementExists(elementLocator));
            }
            catch (NoSuchElementException)
            {
                Console.WriteLine(
                    "Element with locator: '" + elementLocator +
                    "' was not found in current context page.");
                MessageBox.Show("Element with locator: '" + elementLocator +
                                "' was not found in current context page.");
                return null;
            }
        }

        /// <summary>
        ///     Gets the cell.
        /// </summary>
        /// <param name="row">The row.</param>
        /// <param name="column">The column.</param>
        /// <returns>DataGridCell.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetCell
        public DataGridCell GetCell(int row, int column)
        {
            var row1 = GetRow(row);
            if (row1 != null)
            {
                var visualChild = GetVisualChild<DataGridCellsPresenter>(row1);
                if (visualChild != null)
                {
                    var dataGridCell = (DataGridCell)visualChild
                        .ItemContainerGenerator.ContainerFromIndex(column);
                    if (dataGridCell == null)
                    {
                        DataGridElements.ScrollIntoView(row1,
                            DataGridElements.Columns[column]);
                        dataGridCell = (DataGridCell)visualChild
                            .ItemContainerGenerator.ContainerFromIndex(column);
                    }

                    return dataGridCell;
                }
            }

            return null;
        }

        /// <summary>
        ///     Gets the data grid rows.
        /// </summary>
        /// <param name="grid">The grid.</param>
        /// <returns>IEnumerable&lt;DataGridRow&gt;.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetDataGridRows
        public IEnumerable<DataGridRow> GetDataGridRows(DataGrid grid)
        {
            foreach (var obj in grid.ItemsSource)
            {
                var dataGridRow =
                    grid.ItemContainerGenerator.ContainerFromItem(obj) as
                        DataGridRow;
                if (dataGridRow != null)
                    yield return dataGridRow;
            }
        }

        /// <summary>
        ///     Gets the row.
        /// </summary>
        /// <param name="index">The index.</param>
        /// <returns>DataGridRow.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetRow
        public DataGridRow GetRow(int index)
        {
            var dataGridRow = (DataGridRow)DataGridElements
                .ItemContainerGenerator.ContainerFromIndex(index);
            if (dataGridRow == null)
            {
                DataGridElements.UpdateLayout();
                DataGridElements.ScrollIntoView(DataGridElements.Items[index]);
                dataGridRow = (DataGridRow)DataGridElements
                    .ItemContainerGenerator.ContainerFromIndex(index);
            }

            return dataGridRow;
        }

        /// <summary>
        ///     Checks the style visibility.
        /// </summary>
        /// <param name="style">The style.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CheckStyleVisibility
        private static bool CheckStyleVisibility(string style)
        {
            if (string.IsNullOrWhiteSpace(style))
                return true;

            var keys = ParseHtmlStyleString(style);

            if (keys.Keys.Contains("display"))
            {
                var display = keys["display"];
                if (display != null && display == "none")
                    return false;
            }

            if (keys.Keys.Contains("visibility"))
            {
                var visibility = keys["visibility"];
                if (visibility != null && visibility == "hidden")
                    return false;
            }

            return true;
        }

        /// <summary>
        ///     Determines whether [is node visible] [the specified node].
        /// </summary>
        /// <param name="node">The node.</param>
        /// <returns><c>true</c> if [is node visible] [the specified node]; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for IsNodeVisible
        private static bool IsNodeVisible(HtmlNode node)
        {
            var attribute = node.Attributes["style"];

            var thisVisible = attribute == null ||
                              CheckStyleVisibility(attribute.Value);

            if (thisVisible && node.ParentNode != null)
                return IsNodeVisible(node.ParentNode);

            return thisVisible;
        }

        private void ActieUitvoeren(
            IWebElement content,
            string actie,
            string tekst1,
            ChromeDriver driver1,
            string attribute = "")
        {
            var actions = new Actions(driver1);

            switch (actie.ToLower())
            {
                case "click":
                    actions = new Actions(driver1);
                    actions.MoveToElement(content);
                    actions.Perform();
                    content.Click();
                    break;
                case "doubleclick":
                    actions = new Actions(driver1);
                    actions.MoveToElement(content);
                    actions.Perform();
                    content.Click();
                    content.Click();
                    break;
                case "value":
                    if (tekst1 != string.Empty)
                    {
                        actions = new Actions(driver1);
                        actions.MoveToElement(content);
                        actions.Perform();
                        content.Click();
                        content.Clear();
                        content.SendKeys(tekst1);
                    }

                    break;
                case "sendkeys":
                    actions = new Actions(driver1);
                    actions.MoveToElement(content);
                    actions.Perform();
                    if (tekst1.ToUpper().Contains("{ENTER}"))
                    {
                        var splitTekst = tekst1.Split('{');
                        content.Click();
                        content.Clear();
                        content.SendKeys(splitTekst[0] + Keys.Enter);
                    }
                    else
                    {
                        if (tekst1.ToUpper() == "ESC") tekst1 = Keys.Escape;
                        content.SendKeys(tekst1);
                    }


                    break;
                case "select":
                    IWebElement education = null;
                    SelectElement selectElement = null;

                    selectElement = new SelectElement(content);
                    selectElement.SelectByText(tekst1);
                    break;
                case "move_to":
                    actions = new Actions(driver1);
                    actions.MoveToElement(content);
                    actions.Perform();
                    break;
                case "upload":
                    var file1 = tekst1.Replace("\'", "\\'");
                    content.Click();
                    Thread.Sleep(5000);
                    SendKeys.SendWait(file1);
                    SendKeys.SendWait(@"{Enter}");
                    break;
            }
        }

        /// <summary>
        ///     Handles the Click event of the ButtonCheckboxCheckAll control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonCheckboxCheckAll_Click
        private void ButtonCheckboxCheckAll_Click(object sender,
            RoutedEventArgs e)
        {
            CheckBoxBasis(true);
        }

        /// <summary>
        ///     Handles the Click event of the ButtonCheckboxCheckNone control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonCheckboxCheckNone_Click
        private void ButtonCheckboxCheckNone_Click(object sender,
            RoutedEventArgs e)
        {
            CheckBoxBasis(false);
        }

        /// <summary>
        ///     Handles the Click event of the ButtonGetElements control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonGetElements_Click
        private void ButtonGetElements_Click(object sender, RoutedEventArgs e)
        {
            HaalGegevensEnToon();
        }

        /// <summary>
        ///     Handles the Click event of the ButtonNieuw control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonNieuw_Click
        private void ButtonNieuw_Click(object sender, RoutedEventArgs e)
        {
            ButtonGetElements.IsEnabled = false;
            LabelID.Content = string.Empty;
            ButtonSetTextCheck.IsEnabled = false;
            CheckBoxClearTextCheck.IsEnabled = false;
            SetButtonContext();
            ButtonSave.IsEnabled = false;
            LabelFoundElements.Visibility = Visibility.Hidden;
            CheckBoxInlogIncluded.IsChecked = false;
            InlogLeeg(true);
            ButtonSetToTest.IsEnabled = false;
            LabelTestCase.Visibility = Visibility.Hidden;
            TextBoxTestCase.Visibility = Visibility.Hidden;
            LabelTestPage.Visibility = Visibility.Hidden;
            TextBoxTestCasePage.Visibility = Visibility.Hidden;
            GridCheckText.Visibility = Visibility.Hidden;
            ComboBoxURL.SelectedIndex = -1;
            CheckBoxObjectVisibility.IsChecked = false;
            loginCheck.IsChecked = true;
            CheckBoxStart();
            ToonInloggegevens();
            UserAttribute.Text = "Name";
            PasswordAtrribute.Text = "Name";
            ButtonAttribute.Text = "Name";
            UserTag.Text = string.Empty;
            UserText.Text = string.Empty;
            PasswordTag.Text = string.Empty;
            PasswordText.Password = string.Empty;
            ButtonTag.Text = string.Empty;
            TextBoxURLSave.Text = string.Empty;
            ButtonAttributeExtra1.Text = string.Empty;
            ButtonAttributeExtra2.Text = string.Empty;
            ButtonAttributeExtra3.Text = string.Empty;
            ButtonAttributeExtra4.Text = string.Empty;
            ButtonTagnameExtra1.Text = string.Empty;
            ButtonTagnameExtra2.Text = string.Empty;
            ButtonTagnameExtra3.Text = string.Empty;
            ButtonTagnameExtra4.Text = string.Empty;
            DescriptionExtra1.Text = string.Empty;
            DescriptionExtra2.Text = string.Empty;
            DescriptionExtra3.Text = string.Empty;
            DescriptionExtra4.Text = string.Empty;
            TextBoxNameSave.Text = string.Empty;
            ComboBoxLoginName.SelectedIndex = -1;
            CheckTextAll.Visibility = Visibility.Hidden;
            ButtonCSV.Visibility = Visibility.Hidden;
            LeegMaken();
            Order1.Text = string.Empty;
            Order2.Text = string.Empty;
            Order3.Text = string.Empty;
            Order4.Text = string.Empty;
            Order5.Text = string.Empty;
            Order6.Text = string.Empty;
            Order7.Text = string.Empty;
            CheckBoxSwitchTo.IsChecked = false;

            if (ElementSetting == "SET")
            {
                Inlog.Visibility = Visibility.Hidden;
                BorderInlog.Visibility = Visibility.Hidden;
                StackPanelLoad.Visibility = Visibility.Hidden;
                StackPanelSave.Visibility = Visibility.Hidden;
                BorderSelect.Visibility = Visibility.Hidden;
                GridSelectTags.Visibility = Visibility.Hidden;
            }
            else
            {
                Inlog.Visibility = Visibility.Visible;
                loginCheck.IsChecked = false;
                BorderInlog.Visibility = Visibility.Visible;
                StackPanelLoad.Visibility = Visibility.Visible;
                StackPanelSave.Visibility = Visibility.Visible;
                BorderSelect.Visibility = Visibility.Visible;
                GridSelectTags.Visibility = Visibility.Visible;
                var inlogDataRecordsList1 =
                    new List<InlogData.InlogDataRecords>();
                var inlogDataRecordsList2 = InlogData.LoginDataGet();
                ComboBoxLoginData.Items.Clear();
                foreach (var inlogDataRecords in inlogDataRecordsList2)
                    ComboBoxLoginData.Items.Add(inlogDataRecords.LoginURL);
            }

            var borderInlogMargin = BorderInlog.Margin;
            borderInlogMargin.Bottom = 307.0;
            InlogLeeg(true);
            CheckTextAll.Visibility = Visibility.Hidden;
            ButtonCSV.Visibility = Visibility.Hidden;
            DataGridElements.Visibility = Visibility.Hidden;
            ButtonCSV.IsEnabled = false;
            ButtonTotCSV.IsEnabled = false;
            ButtonExcel.IsEnabled = false;
            DataGridElements.ItemsSource = null;
            TextBoxURL.Text = string.Empty;
            href_link = string.Empty;
            loginCheck.IsChecked = true;
            ToonInloggegevens();
        }

        /// <summary>
        ///     Handles the Click event of the ButtonSave control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonSave_Click
        private void ButtonSave_Click(object sender, RoutedEventArgs e)
        {
            if (TextBoxURLSave.Text == string.Empty ||
                TextBoxNameSave.Text == string.Empty)
                return;

            var queryI = "UPDATE `autotest`.`login_code` " + "SET ";
            queryI += "`login_url` ='" +
                      MySqlHelper.EscapeString(TextBoxURLSave.Text) + "', ";
            queryI += "`login_attribute_username` = '" +
                      MySqlHelper.EscapeString(UserAttribute.Text) + "', ";
            queryI += "`login_attribute_password` = '" +
                      MySqlHelper.EscapeString(PasswordAtrribute.Text) + "', ";
            queryI += "`login_attribute_button` = '" +
                      MySqlHelper.EscapeString(ButtonAttribute.Text) + "', ";
            queryI += "`login_tagname_user` = '" +
                      MySqlHelper.EscapeString(UserTag.Text) + "',";
            queryI += "`login_tagname_password` = '" +
                      MySqlHelper.EscapeString(PasswordTag.Text) + "', ";
            queryI += "`login_tagname_button` = '" +
                      MySqlHelper.EscapeString(ButtonTag.Text) + "', ";
            queryI += "`login_user_value` = '" +
                      MySqlHelper.EscapeString(UserText.Text) + "', ";
            queryI += "`login_password_value` = '" +
                      MySqlHelper.EscapeString(PasswordText.Password) + "', ";
            queryI += "`login_attribute_extra1` = '" +
                      MySqlHelper.EscapeString(ButtonAttributeExtra1.Text)
                      + "', ";
            queryI += "`login_attribute_extra2` = '" +
                      MySqlHelper.EscapeString(ButtonAttributeExtra2.Text)
                      + "', ";
            queryI += "`login_attribute_extra3` = '" +
                      MySqlHelper.EscapeString(ButtonAttributeExtra3.Text)
                      + "', ";
            queryI += "`login_attribute_extra4` = '" +
                      MySqlHelper.EscapeString(ButtonAttributeExtra4.Text)
                      + "', ";
            queryI += "`login_tagname_extra1` = '" +
                      MySqlHelper.EscapeString(ButtonTagnameExtra1.Text) +
                      "', ";
            queryI += "`login_tagname_extra2` = '" +
                      MySqlHelper.EscapeString(ButtonTagnameExtra2.Text) +
                      "', ";
            queryI += "`login_tagname_extra3` = '" +
                      MySqlHelper.EscapeString(ButtonTagnameExtra3.Text) +
                      "', ";
            queryI += "`login_tagname_extra4` = '" +
                      MySqlHelper.EscapeString(ButtonTagnameExtra4.Text) +
                      "', ";
            queryI += "`login_description_extra1` = '" +
                      MySqlHelper.EscapeString(DescriptionExtra1.Text) + "', ";
            queryI += "`login_description_extra2` = '" +
                      MySqlHelper.EscapeString(DescriptionExtra2.Text) + "', ";
            queryI += "`login_description_extra3` = '" +
                      MySqlHelper.EscapeString(DescriptionExtra3.Text) + "', ";
            queryI += "`login_description_extra4` = '" +
                      MySqlHelper.EscapeString(DescriptionExtra4.Text) + "', ";
            queryI += "`login_action1` = '" +
                      MySqlHelper.EscapeString(ComboBoxAction1.Text) + "', ";
            queryI += "`login_action2` = '" +
                      MySqlHelper.EscapeString(ComboBoxAction2.Text) + "', ";
            queryI += "`login_action3` = '" +
                      MySqlHelper.EscapeString(ComboBoxAction3.Text) + "', ";
            queryI += "`login_action4` = '" +
                      MySqlHelper.EscapeString(ComboBoxAction4.Text) + "', ";
            queryI += "`login_action5` = '" +
                      MySqlHelper.EscapeString(ComboBoxAction5.Text) + "', ";
            queryI += "`login_action6` = '" +
                      MySqlHelper.EscapeString(ComboBoxAction6.Text) + "', ";
            queryI += "`login_action7` = '" +
                      MySqlHelper.EscapeString(ComboBoxAction7.Text) + "', ";
            queryI += "`login_order1` = '" +
                      MySqlHelper.EscapeString(Order1.Text) + "', ";
            queryI += "`login_order2` = '" +
                      MySqlHelper.EscapeString(Order2.Text) + "', ";
            queryI += "`login_order3` = '" +
                      MySqlHelper.EscapeString(Order3.Text) + "', ";
            queryI += "`login_order4` = '" +
                      MySqlHelper.EscapeString(Order4.Text) + "', ";
            queryI += "`login_order5` = '" +
                      MySqlHelper.EscapeString(Order5.Text) + "', ";
            queryI += "`login_order6` = '" +
                      MySqlHelper.EscapeString(Order6.Text) + "', ";
            queryI += "`login_order7` = '" +
                      MySqlHelper.EscapeString(Order7.Text) + "', ";
            queryI += "login_name = '" +
                      MySqlHelper.EscapeString(TextBoxNameSave.Text) + "' ";
            queryI += "WHERE `idlogin_code` = '" +
                      MySqlHelper.EscapeString(LabelID.Content.ToString()) +
                      "';";

            var queryU = "INSERT INTO `autotest`.`login_code` " +
                         "(`login_url`, " + "`login_attribute_username`, ";
            queryU += "`login_attribute_password`, " +
                      "`login_attribute_button`, " + "`login_tagname_user`, ";
            queryU += "`login_tagname_password`, " +
                      "`login_tagname_button`, " + "`login_user_value`, ";
            queryU +=
                "`login_attribute_extra1`, `login_attribute_extra2`, `login_attribute_extra3`, `login_attribute_extra4`, ";
            queryU +=
                " `login_tagname_extra1`, `login_tagname_extra2`, `login_tagname_extra3`, `login_tagname_extra4`,";
            queryU +=
                "`login_description_extra1`, `login_description_extra2`, `login_description_extra3`, `login_description_extra4`,";
            queryU += "`login_password_value`, ";
            queryU +=
                "`login_action1`, `login_action2`, `login_action3`, `login_action4`, `login_action5`, `login_action6`,`login_action7`, ";
            queryU +=
                "`login_order1`, `login_order2`, `login_order3`, `login_order4`, `login_order5`, `login_order6`, `login_order7`,`login_name`) ";
            queryU += " VALUES ('";
            queryU += MySqlHelper.EscapeString(TextBoxURLSave.Text) + "', " +
                      "'";
            queryU += MySqlHelper.EscapeString(UserAttribute.Text) + "', " +
                      "'";
            queryU += MySqlHelper.EscapeString(PasswordAtrribute.Text) + "', " +
                      "'";
            queryU += MySqlHelper.EscapeString(ButtonAttribute.Text) + "', " +
                      "'";
            queryU += MySqlHelper.EscapeString(UserTag.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(PasswordTag.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(ButtonTag.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(UserText.Text) + "', " + "'";
            queryU += MySqlHelper.EscapeString(ButtonAttributeExtra1.Text) +
                      "', " + "'";
            queryU += MySqlHelper.EscapeString(ButtonAttributeExtra2.Text) +
                      "', " + "'";
            queryU += MySqlHelper.EscapeString(ButtonAttributeExtra3.Text) +
                      "', " + "'";
            queryU += MySqlHelper.EscapeString(ButtonAttributeExtra4.Text) +
                      "', " + "'";
            queryU += MySqlHelper.EscapeString(ButtonTagnameExtra1.Text) +
                      "', " + "'";
            queryU += MySqlHelper.EscapeString(ButtonTagnameExtra2.Text) +
                      "', " + "'";
            queryU += MySqlHelper.EscapeString(ButtonTagnameExtra3.Text) +
                      "', " + "'";
            queryU += MySqlHelper.EscapeString(ButtonTagnameExtra4.Text) +
                      "', " + "'";
            queryU += MySqlHelper.EscapeString(DescriptionExtra1.Text) + "', " +
                      "'";
            queryU += MySqlHelper.EscapeString(DescriptionExtra2.Text) + "', " +
                      "'";
            queryU += MySqlHelper.EscapeString(DescriptionExtra3.Text) + "', " +
                      "'";
            queryU += MySqlHelper.EscapeString(DescriptionExtra4.Text) + "', " +
                      "'";
            queryU += MySqlHelper.EscapeString(PasswordText.Password) + "', '";
            queryU += MySqlHelper.EscapeString(ComboBoxAction1.Text) + "', '";
            queryU += MySqlHelper.EscapeString(ComboBoxAction2.Text) + "', '";
            queryU += MySqlHelper.EscapeString(ComboBoxAction3.Text) + "', '";
            queryU += MySqlHelper.EscapeString(ComboBoxAction4.Text) + "', '";
            queryU += MySqlHelper.EscapeString(ComboBoxAction5.Text) + "', '";
            queryU += MySqlHelper.EscapeString(ComboBoxAction6.Text) + "', '";
            queryU += MySqlHelper.EscapeString(ComboBoxAction7.Text) + "', '";
            queryU += MySqlHelper.EscapeString(Order1.Text) + "', '";
            queryU += MySqlHelper.EscapeString(Order2.Text) + "', '";
            queryU += MySqlHelper.EscapeString(Order3.Text) + "', '";
            queryU += MySqlHelper.EscapeString(Order4.Text) + "', '";
            queryU += MySqlHelper.EscapeString(Order5.Text) + "', '";
            queryU += MySqlHelper.EscapeString(Order6.Text) + "', '";
            queryU += MySqlHelper.EscapeString(Order7.Text) + "', '";
            queryU += MySqlHelper.EscapeString(TextBoxNameSave.Text) + "');";

            if (LabelID.Content != string.Empty &&
                TextBoxNameSave.Text == loginnaam)
                General.ExecuteQueryCommand(queryI);
            else
                General.ExecuteQueryCommand(queryU);
            // General.ExecuteQueryCommand(LabelID.Content != (object) string.Empty ? queryI : queryU);

            VulInlogData();
        }

        /// <summary>
        ///     Handles the Click event of the ButtonSelectAll control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonSelectAll_Click
        private void ButtonSelectAllClick(object sender, RoutedEventArgs e)
        {
            // Opslaan();


            if (TextBoxSelectFrom.Text != string.Empty &&
                TextBoxTestSelectTo.Text != string.Empty)
                if (Convert.ToInt32(TextBoxSelectFrom.Text) >
                    Convert.ToInt32(TextBoxTestSelectTo.Text))
                {
                    MessageBox.Show(
                        "Selected till ID can not be lower than the selected from ID! Please try again");
                    return;
                }

            var wel = true;

            if (ButtonSelectAll.Content == "Unselect All") wel = false;

            /*            foreach (var dataGridRow in GetDataGridRows(DataGridElements))
            {
                TextBlock waarde = DataGridElements.Columns[0].GetCellContent(dataGridRow) as TextBlock;

                var test = dataGridRow.Item;


                if (waarde != null)
                {
                    if (TextBoxSelectFrom.Text != string.Empty &&
                        Convert.ToInt64(waarde.Text) >= Convert.ToInt64(TextBoxSelectFrom.Text))
                    {
                        var isChecked = (DataGridElements.Columns[1].GetCellContent(dataGridRow) as CheckBox).IsChecked;
                        var flag = true;
                        wel = !((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue);
                        i1++;
                    }

                    if (TextBoxTestSelectTo.Text != string.Empty &&
                        Convert.ToInt64(waarde.Text) <= Convert.ToInt64(TextBoxTestSelectTo.Text))
                    {
                        var isChecked = (DataGridElements.Columns[1].GetCellContent(dataGridRow) as CheckBox).IsChecked;
                        var flag = true;
                        wel = !((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue);
                        i2++;
                    }

                    if (TextBoxSelectFrom.Text != string.Empty && TextBoxTestSelectTo.Text != string.Empty)
                    {
                        var isChecked = (DataGridElements.Columns[1].GetCellContent(dataGridRow) as CheckBox).IsChecked;
                        var flag = true;
                        wel = !((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue);
                        i3++;
                    }
                }
            }*/

            var begin = 0;
            var eind = 0;
            if (TextBoxSelectFrom.Text != string.Empty)
                begin = Convert.ToInt32(TextBoxSelectFrom.Text);

            if (TextBoxTestSelectTo.Text != string.Empty)
                eind = Convert.ToInt32(TextBoxTestSelectTo.Text);


            url = ElementSetting != "SET" ? TextBoxURL.Text : ComboBoxURL.Text;
            ElementsFromDatabase.UpdateAllCheckboxes(url, wel, "selenium_check",
                begin, eind);
            DataGridElements.ItemsSource = null;
            DataGridElements.ItemsSource =
                ElementsFromDatabase.GetDataTable(url);
            ButtonSetToTest.IsEnabled = wel;
            if (wel)
            {
                LabelTestCase.Visibility = Visibility.Visible;
                TextBoxTestCase.Visibility = Visibility.Visible;
                LabelTestPage.Visibility = Visibility.Visible;
                TextBoxTestCasePage.Visibility = Visibility.Visible;
                ButtonGetElements.Visibility = Visibility.Hidden;
                ButtonSelectAll.Content = "Unselect All";
                TextBoxTestCase.Focusable = true;
                TextBoxTestCase.Focus();
            }
            else
            {
                LabelTestCase.Visibility = Visibility.Hidden;
                TextBoxTestCase.Visibility = Visibility.Hidden;
                LabelTestPage.Visibility = Visibility.Hidden;
                TextBoxTestCasePage.Visibility = Visibility.Hidden;
                ButtonGetElements.Visibility = Visibility.Visible;
                ButtonSelectAll.Content = "Select All";
            }
        }

        /// <summary>
        ///     Handles the Click event of the ButtonSetToTest control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonSetToTest_Click
        private void ButtonSetToTest_Click(object sender, RoutedEventArgs e)
        {
            // Opslaan();
            var machineNumber =
                "123456"; //Convert.ToString(LicentieMachineCode.getMachineCode());
            ButtonGetElements.Visibility = Visibility.Hidden;
            if (TextBoxTestCase.Text != string.Empty)
            {
                GeneralFunctionality.Functions.CheckDir(project);
                General.LogMessage("test", 1);
                VersionClass.OpenBestand();
                var bestandsnaam = VersionClass.Bestandsnaam;
                if (bestandsnaam != null && bestandsnaam != string.Empty)
                {
                    using (new PleaseWait())
                    {
                        var datacy = string.Empty;
                        var num6 = 1;
                        var laatsteTestCase =
                            General.GetLaatsteTestCase(bestandsnaam);
                        var num1 = 0;
                        if (laatsteTestCase.Rows.Count > 0)
                            num1 = Convert.ToInt32(
                                       laatsteTestCase.Rows[0]["testnr"]
                                           .ToString()) +
                                   101;
                        Topmost = false;
                        var isChecked = CheckBoxInlogIncluded.IsChecked;
                        var flag = true;
                        if (isChecked.GetValueOrDefault() == flag &&
                            isChecked.HasValue)
                        {
                            if (UserAttribute.SelectedIndex != 0 &&
                                UserTag.Text != string.Empty
                                && UserText.Text != string.Empty)
                            {
                                DataStorage.TestCases.AddTestCase(
                                    bestandsnaam,
                                    Convert.ToString(
                                        Convert.ToInt32(Order1.Text) + num1),
                                    "Login Name",
                                    UserTag.Text,
                                    UserTag.Text,
                                    string.Empty,
                                    UserAttribute.Text.ToLower(),
                                    ComboBoxAction1.Text,
                                    UserText.Text,
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    "no",
                                    string.Empty,
                                    "Fill in the username",
                                    machineNumber,
                                    "input",
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    string.Empty,
                                    datacy);


                                if (ButtonCSV.IsChecked != null &&
                                    (bool)ButtonCSV.IsChecked)
                                    General.CSVfile(project, bestandsnaam,
                                        Convert.ToString(
                                            Convert.ToInt32(Order1.Text) +
                                            num1),
                                        "Login Name",
                                        UserTag.Text,
                                        UserTag.Text,
                                        UserAttribute.Text.ToLower(),
                                        ComboBoxAction1.Text,
                                        UserText.Text,
                                        string.Empty,
                                        "yes",
                                        string.Empty,
                                        "no",
                                        string.Empty,
                                        "Fill in the username",
                                        machineNumber,
                                        "input",
                                        string.Empty);
                            }

                            var num2 = num1 + 1;
                            if (PasswordAtrribute.SelectedIndex != 0 &&
                                PasswordTag.Text != string.Empty
                                && PasswordText.Password != string.Empty)
                            {
                                DataStorage.TestCases.AddTestCase(
                                    bestandsnaam,
                                    Convert.ToString(
                                        Convert.ToInt32(Order2.Text) + num1),
                                    "Login Password",
                                    PasswordTag.Text,
                                    PasswordTag.Text,
                                    string.Empty,
                                    PasswordAtrribute.Text.ToLower(),
                                    ComboBoxAction3.Text,
                                    string.Empty,
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    "no",
                                    string.Empty,
                                    "Fill in the password",
                                    machineNumber,
                                    "input",
                                    string.Empty,
                                    "yes",
                                    "",
                                    PasswordText.Password,
                                    datacy);

                                if (ButtonCSV.IsChecked != null &&
                                    (bool)ButtonCSV.IsChecked)
                                    General.CSVfile(project, bestandsnaam,
                                        Convert.ToString(
                                            Convert.ToInt32(Order2.Text) +
                                            num1),
                                        "Login Password",
                                        PasswordTag.Text,
                                        PasswordTag.Text,
                                        PasswordAtrribute.Text.ToLower(),
                                        ComboBoxAction3.Text,
                                        string.Empty,
                                        string.Empty,
                                        "yes",
                                        string.Empty,
                                        "no",
                                        string.Empty,
                                        "Fill in the password",
                                        machineNumber,
                                        "input",
                                        string.Empty,
                                        PasswordText.Password);
                            }

                            var num3 = num2 + 1;
                            if (ButtonAttribute.SelectedIndex != 0 &&
                                ButtonTag.Text != string.Empty)
                            {
                                DataStorage.TestCases.AddTestCase(
                                    bestandsnaam,
                                    Convert.ToString(
                                        Convert.ToInt32(Order3.Text) + num1),
                                    "Login Button",
                                    "LoginButton",
                                    ButtonTag.Text,
                                    string.Empty,
                                    ButtonAttribute.Text.ToLower(),
                                    ComboBoxAction4.Text,
                                    string.Empty,
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    "no",
                                    string.Empty,
                                    "Push the login button",
                                    machineNumber,
                                    "button",
                                    string.Empty,
                                    "yes",
                                    string.Empty, 
                                    string.Empty,
                                    datacy);


                                if (ButtonCSV.IsChecked != null &&
                                    (bool)ButtonCSV.IsChecked)
                                    General.CSVfile(project, bestandsnaam,
                                        Convert.ToString(
                                            Convert.ToInt32(Order3.Text) +
                                            num1),
                                        "Login Button",
                                        "LoginButton",
                                        ButtonTag.Text,
                                        ButtonAttribute.Text.ToLower(),
                                        ComboBoxAction4.Text,
                                        string.Empty,
                                        string.Empty,
                                        "yes",
                                        string.Empty,
                                        "no",
                                        string.Empty,
                                        "Push the login button",
                                        machineNumber,
                                        "button",
                                        string.Empty);
                            }

                            var num4 = num3 + 1;
                            if (ButtonAttributeExtra3.Text != string.Empty
                                && ButtonTagnameExtra3.Text != string.Empty
                                && ComboBoxAction2.SelectedIndex != 0)
                            {
                                var testtext = string.Empty;
                                if ((ComboBoxAction2.Text == "select") |
                                    (ComboBoxAction2.Text == "value"))
                                    testtext = DescriptionExtra3.Text;

                                DataStorage.TestCases.AddTestCase(
                                    bestandsnaam,
                                    Convert.ToString(
                                        Convert.ToInt32(Order6.Text) + num1),
                                    ButtonTagnameExtra3.Text,
                                    ButtonTagnameExtra3.Text,
                                    ButtonTagnameExtra3.Text,
                                    string.Empty,
                                    ButtonAttributeExtra3.Text.ToLower(),
                                    ComboBoxAction2.Text,
                                    testtext,
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    "no",
                                    string.Empty,
                                    DescriptionExtra3.Text,
                                    machineNumber,
                                    ComboBoxAction2.Text,
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    string.Empty,
                                    datacy);

                                if (ButtonCSV.IsChecked != null &&
                                    (bool)ButtonCSV.IsChecked)
                                    General.CSVfile(project, bestandsnaam,
                                        Convert.ToString(
                                            Convert.ToInt32(Order6.Text) +
                                            num1),
                                        ButtonTagnameExtra3.Text,
                                        ButtonTagnameExtra3.Text,
                                        ButtonTagnameExtra3.Text,
                                        ButtonAttributeExtra3.Text.ToLower(),
                                        ComboBoxAction2.Text,
                                        testtext,
                                        string.Empty,
                                        "yes",
                                        string.Empty,
                                        "no",
                                        string.Empty,
                                        DescriptionExtra3.Text,
                                        machineNumber,
                                        ComboBoxAction2.Text,
                                        string.Empty);
                            }

                            var num5 = num4 + 1;
                            if (TextBoxURL.Text != TextBoxURLSave.Text
                                && CheckBoxInlogIncluded.IsChecked == true)
                            {
                                var testtext = string.Empty;

                                var ger6 = 11 + num1;
                                DataStorage.TestCases.AddTestCase(
                                    bestandsnaam,
                                    ger6.ToString(),
                                    TextBoxTestCase.Text,
                                    string.Empty,
                                    string.Empty,
                                    string.Empty,
                                    string.Empty,
                                    "switch to url",
                                    testtext,
                                    TextBoxURL.Text,
                                    "yes",
                                    string.Empty,
                                    "no",
                                    "Go to the wanted url: '" +
                                    TextBoxURL.Text + "'.",
                                    "Switch to url",
                                    machineNumber,
                                    string.Empty,
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    string.Empty,
                                    datacy);

                                if (ButtonCSV.IsChecked != null &&
                                    (bool)ButtonCSV.IsChecked)
                                    General.CSVfile(project, bestandsnaam,
                                        ger6.ToString(),
                                        TextBoxTestCase.Text,
                                        string.Empty,
                                        string.Empty,
                                        string.Empty,
                                        "switch to url",
                                        testtext,
                                        TextBoxURL.Text,
                                        "yes",
                                        string.Empty,
                                        "no",
                                        "Go to the wanted url: '" +
                                        TextBoxURL.Text + "'.",
                                        "Switch to url",
                                        machineNumber,
                                        string.Empty,
                                        string.Empty);
                            }

                            var mum6 = 21 + num1;
                            if (ButtonAttributeExtra1.Text != string.Empty
                                && ButtonTagnameExtra1.Text != string.Empty
                                && ComboBoxAction5.SelectedIndex != 0 &&
                                Order4.Text != "0"
                                && Order4.Text != string.Empty)
                            {
                                DataStorage.TestCases.AddTestCase(
                                    bestandsnaam,
                                    "21",
                                    DescriptionExtra1.Text,
                                    DescriptionExtra1.Text,
                                    ButtonTagnameExtra1.Text,
                                    string.Empty,
                                    ButtonAttributeExtra1.Text.ToLower(),
                                    "click",
                                    string.Empty,
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    "no",
                                    string.Empty,
                                    DescriptionExtra1.Text,
                                    machineNumber,
                                    ComboBoxAction5.Text,
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    string.Empty,
                                    datacy);

                                if (ButtonCSV.IsChecked != null &&
                                    (bool)ButtonCSV.IsChecked)
                                    General.CSVfile(project, bestandsnaam,
                                        Convert.ToString(
                                            Convert.ToInt32(Order1.Text) +
                                            num1),
                                        "Login Name",
                                        UserTag.Text,
                                        UserTag.Text,
                                        UserAttribute.Text.ToLower(),
                                        ComboBoxAction1.Text,
                                        UserText.Text,
                                        string.Empty,
                                        "yes",
                                        string.Empty,
                                        "no",
                                        string.Empty,
                                        "Fill in the username",
                                        machineNumber,
                                        "input",
                                        string.Empty);
                            }

                            var num7 = 22;

                            if (ButtonAttributeExtra2.Text != string.Empty
                                && ButtonTagnameExtra2.Text != string.Empty
                                && ComboBoxAction6.SelectedIndex != 0 &&
                                Order5.Text != "0"
                                && Order5.Text != string.Empty)
                            {
                                DataStorage.TestCases.AddTestCase(
                                    bestandsnaam,
                                    num7.ToString(),
                                    DescriptionExtra2.Text,
                                    DescriptionExtra2.Text,
                                    ButtonTagnameExtra2.Text,
                                    string.Empty,
                                    ButtonAttributeExtra2.Text.ToLower(),
                                    ComboBoxAction6.Text,
                                    string.Empty,
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    "no",
                                    string.Empty,
                                    DescriptionExtra2.Text,
                                    machineNumber,
                                    ComboBoxAction6.Text,
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    PasswordText.Password,
                                    datacy);


                                if (ButtonCSV.IsChecked != null &&
                                    (bool)ButtonCSV.IsChecked)
                                    General.CSVfile(project, bestandsnaam,
                                        num7.ToString(),
                                        DescriptionExtra2.Text,
                                        DescriptionExtra2.Text,
                                        ButtonTagnameExtra2.Text,
                                        ButtonAttributeExtra2.Text.ToLower(),
                                        ComboBoxAction6.Text,
                                        string.Empty,
                                        string.Empty,
                                        "yes",
                                        string.Empty,
                                        "no",
                                        string.Empty,
                                        DescriptionExtra2.Text,
                                        machineNumber,
                                        ComboBoxAction6.Text,
                                        string.Empty);
                            }

                            num7 = num7 + 1;
                            if (Order7.Text != "0"
                                && Order7.Text != string.Empty)
                            {
                                DataStorage.TestCases.AddTestCase(
                                    bestandsnaam,
                                    Order7.Text,
                                    ButtonTagnameExtra4.Text,
                                    ButtonTagnameExtra4.Text,
                                    ButtonTagnameExtra4.Text,
                                    string.Empty,
                                    ButtonAttributeExtra4.Text.ToLower(),
                                    ComboBoxAction7.Text,
                                    string.Empty,
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    "no",
                                    DescriptionExtra4.Text,
                                    DescriptionExtra4.Text,
                                    machineNumber,
                                    ButtonTagnameExtra4.Text,
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    PasswordText.Password,
                                    datacy);

                                if (ButtonCSV.IsChecked != null &&
                                    (bool)ButtonCSV.IsChecked)
                                    General.CSVfile(project, bestandsnaam,
                                        Order7.Text,
                                        ButtonTagnameExtra4.Text,
                                        ButtonTagnameExtra4.Text,
                                        ButtonTagnameExtra4.Text,
                                        ButtonAttributeExtra4.Text.ToLower(),
                                        ComboBoxAction7.Text,
                                        string.Empty,
                                        string.Empty,
                                        "yes",
                                        string.Empty,
                                        "no",
                                        DescriptionExtra4.Text,
                                        DescriptionExtra4.Text,
                                        machineNumber,
                                        ButtonTagnameExtra4.Text,
                                        string.Empty);
                            }
                        }

                        var num8 = 31 + num1;

                        if (CheckBoxSwitchTo.IsVisible &&
                            CheckBoxSwitchTo.IsEnabled)
                        {
                            var testtext = string.Empty;
                            DataStorage.TestCases.AddTestCase(
                                bestandsnaam,
                                num8.ToString(),
                                TextBoxTestCase.Text,
                                string.Empty,
                                string.Empty,
                                string.Empty,
                                string.Empty,
                                "switch to url",
                                testtext,
                                TextBoxURL.Text,
                                "yes",
                                string.Empty,
                                "no",
                                "Go to the wanted url: '" + TextBoxURL.Text +
                                "'.",
                                "Switch to url",
                                machineNumber,
                                string.Empty,
                                string.Empty,
                                "yes",
                                string.Empty,
                                string.Empty,
                                datacy);

                            if (ButtonCSV.IsChecked != null &&
                                (bool)ButtonCSV.IsChecked)
                                General.CSVfile(project, bestandsnaam,
                                    num8.ToString(),
                                    TextBoxTestCase.Text,
                                    string.Empty,
                                    string.Empty,
                                    string.Empty,
                                    "switch to url",
                                    testtext,
                                    TextBoxURL.Text,
                                    "yes",
                                    string.Empty,
                                    "no",
                                    "Go to the wanted url: '" +
                                    TextBoxURL.Text + "'.",
                                    "Switch to url",
                                    machineNumber,
                                    string.Empty,
                                    string.Empty);

                            num8 += 10;
                        }

                        var query = "SELECT * FROM autotest.selenium_elements ";
                        query += "WHERE url = '" + TextBoxURL.Text + "' ";
                        query += "AND selenium_check = '1' ";
                        query += "ORDER BY idselenium_elements";

                        var dt = GenericDataRead.GetData(query);

                        var id_tekst = string.Empty;
                        var name_text = string.Empty;
                        var id_xpath = string.Empty;
                        var name_xpath = string.Empty;

                        for (var row = 0; row < dt.Rows.Count; ++row)
                        {
                            var checktekst = string.Empty;
                            string testattribute;
                            string text;
                            string text1 =string.Empty;
                            datacy = dt.Rows[row]["datacy"].ToString();

                            if (dt.Rows[row][15].ToString() == "1")
                            {
                                checktekst = dt.Rows[row][6].ToString()
                                    .Replace("\n", "\\\\n")
                                    .Replace("\r", "\\\\r")
                                    .Replace("\t", "\\\\t");
                                ; //.Replace("\n", "").Replace("\r", "");

                                checktekst = dt.Rows[row][6].ToString().Replace("\n", "").Replace("\r", "");

                            }

                            if (dt.Rows[row][7].ToString().Length > 0)
                            {
                                text = dt.Rows[row][7].ToString().Replace("\n", "").Replace("\r", ""); ;
                                testattribute = "id";
                                id_tekst = text;
                                id_xpath = dt.Rows[row][4].ToString();
                            }
                            else if (dt.Rows[row][8].ToString().Length > 0)
                            {
                                text = dt.Rows[row][8].ToString().Replace("\n", "").Replace("\r", ""); ;
                                testattribute = "name";
                                name_text = text;
                                name_xpath = dt.Rows[row][4].ToString().Replace("\n", "").Replace("\r", ""); ;
                            }
                            else
                            {
                                text = dt.Rows[row][4].ToString().Replace("\n", "").Replace("\r", ""); ;
                                text1 = dt.Rows[row][4].ToString().Replace("\n", "").Replace("\r", ""); ;
                                if (id_tekst != string.Empty &&
                                    text.IndexOf(id_xpath) > -1 && CheckBoxUseXPath.IsChecked == false)
                                {
                                    var testd = text.IndexOf(id_xpath);

                                    var tekst3 =
                                        text.Substring(id_xpath.Length,
                                            text.Length - id_xpath.Length);
                                    var index = text.IndexOf(id_xpath);

                                    text = "//*[@id=\"" + id_tekst + "\"]" +
                                           tekst3;
                                }

                                testattribute = "xpath";
                            }


                            var testelement = dt.Rows[row][6].ToString().Replace("\n", "").Replace("\r", ""); ; //.Replace("\n", "\\\\n").Replace("\r", "\\\\r");
                            if (testelement.Length > 75)
                            {
                                testelement = testelement.Substring(0, 75);
                            }

                            DataStorage.TestCases.AddTestCase(
                                bestandsnaam,
                                num8.ToString(),
                                TextBoxTestCase.Text,
                                testelement.Trim(new Char[] { '\r', '\n', '\t' }),
                                text.Trim(new Char[] { '\r', '\n', '\t' }),
                                text1.Trim(new Char[] { '\r', '\n', '\t' }),
                                testattribute.Trim(new Char[] { '\r', '\n', '\t' }),
                                string.Empty,
                                checktekst.Trim(new Char[] { '\r', '\n', '\t' }),
                                string.Empty,
                                "yes",
                                string.Empty,
                                "no",
                                string.Empty,
                                string.Empty,
                                machineNumber,
                                dt.Rows[row][5].ToString().Trim(new Char[] { '\r', '\n', '\t' }),
                                checktekst.Trim(new Char[] { '\r', '\n', '\t' }),
                                "yes",
                                string.Empty,
                                string.Empty, 
                                datacy);

                            if (ButtonCSV.IsChecked != null &&
                                (bool)ButtonCSV.IsChecked)
                                General.CSVfile(project, bestandsnaam,
                                    num8.ToString(),
                                    TextBoxTestCase.Text,
                                    dt.Rows[row][6].ToString().Trim(new Char[] { '\r', '\n', '\t' }),
                                    text.Trim(new Char[] { '\r', '\n', '\t' }),
                                    testattribute.Trim(new Char[] { '\r', '\n', '\t' }),
                                    string.Empty,
                                    checktekst.Trim(new Char[] { '\r', '\n', '\t' }),
                                    string.Empty,
                                    "yes",
                                    string.Empty,
                                    "no",
                                    string.Empty,
                                    string.Empty,
                                    machineNumber,
                                    dt.Rows[row][5].ToString().Trim(new Char[] { '\r', '\n', '\t' }),
                                    checktekst.Trim(new Char[] { '\r', '\n', '\t' }));

                            ++num8;
                        }

                        General.LogMessage(
                            "Data added to the testscenario",
                            3,
                            string.Empty,
                            0,
                            string.Empty,
                            string.Empty);
                    }

                    var num9 =
                        (int)MessageBox.Show("Data added to test scenario.");
                    MaakLoginLeeg();
                }
                else
                {
                    MessageBox.Show("No file selected! Please try again");
                }
            }
            else
            {
                General.LogMessage(
                    "Test Case is still empty!!! Please fill in the Test Case name.",
                    4,
                    string.Empty,
                    0,
                    string.Empty,
                    string.Empty);
                var num = (int)MessageBox.Show(
                    "Test Case is still empty!!!\r\nPlease fill in the Test Case name.",
                    "Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Hand);
                TextBoxTestCase.Focusable = true;
                TextBoxTestCase.Focus();
            }
        }


        private string rest_html(string xpath_old, string xpath_new)
        {
            var s1 = xpath_old;
            var s2 = xpath_new;

            List<string> diff;
            var set1 = s1.Split(' ').Distinct();
            var set2 = s2.Split(' ').Distinct();

            if (set2.Count() > set1.Count())
                diff = set2.Except(set1).ToList();
            else
                diff = set1.Except(set2).ToList();

            return diff.ToString();
        }


        /// <summary>
        ///     Handles the IsEnabledChanged event of the ButtonSetToTest control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonSetToTest_IsEnabledChanged
        private void ButtonSetToTest_IsEnabledChanged(object sender,
            DependencyPropertyChangedEventArgs e)
        {
            if (ButtonSetToTest.IsEnabled && ElementSetting == "GET")
            {
                CheckBoxInlogIncluded.Visibility = Visibility.Visible;
                LabelTestCase.Visibility = Visibility.Visible;
                LabelTestPage.Visibility = Visibility.Visible;
                TextBoxTestCase.Visibility = Visibility.Visible;
                TextBoxTestCasePage.Visibility = Visibility.Visible;
                ButtonGetElements.Visibility = Visibility.Hidden;
            }
            else
            {
                CheckBoxInlogIncluded.Visibility = Visibility.Hidden;
                LabelTestCase.Visibility = Visibility.Visible;
                LabelTestPage.Visibility = Visibility.Visible;
                TextBoxTestCase.Visibility = Visibility.Visible;
                TextBoxTestCasePage.Visibility = Visibility.Visible;
                ButtonGetElements.Visibility = Visibility.Hidden;
            }
        }

        /// <summary>
        ///     Handles the Click event of the ButtonTest control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonTest_Click
        private void ButtonTest_Click(object sender, RoutedEventArgs e)
        {
            Parsing("http://google.com");
        }

        /// <summary>
        ///     CheckBoxes the basis.
        /// </summary>
        /// <param name="keuze">if set to <c>true</c> [keuze].</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CheckBoxBasis
        private void CheckBoxBasis(bool keuze)
        {
            CheckBoxA.IsChecked = keuze;
            CheckBoxDiv.IsChecked = keuze;
            CheckBoxIframe.IsChecked = keuze;
            CheckBoxImg.IsChecked = keuze;
            CheckBoxInput.IsChecked = keuze;
            CheckBoxLi.IsChecked = keuze;
            CheckBoxOption.IsChecked = keuze;
            CheckBoxParagraph.IsChecked = keuze;
            CheckBoxButton.IsChecked = keuze;
            CheckBoxSpan.IsChecked = keuze;
            CheckBoxTable.IsChecked = keuze;
            CheckBoxTh.IsChecked = keuze;
            CheckBoxTr.IsChecked = keuze;
            CheckBoxTd.IsChecked = keuze;
            CheckBoxUl.IsChecked = keuze;
            CheckBoxNav.IsChecked = keuze;
            CheckBoxH1.IsChecked = keuze;
            CheckBoxH2.IsChecked = keuze;
            CheckBoxH3.IsChecked = keuze;
            CheckBoxH4.IsChecked = keuze;
            CheckBoxH5.IsChecked = keuze;
            CheckBoxH6.IsChecked = keuze;
            CheckBoxForm.IsChecked = keuze;
            CheckBoxThead.IsChecked = keuze;
        }

        /// <summary>
        ///     CheckBoxes the start.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CheckBoxStart
        private void CheckBoxStart()
        {
            CheckBoxA.IsChecked = true;
            CheckBoxDiv.IsChecked = true;
            CheckBoxIframe.IsChecked = true;
            CheckBoxImg.IsChecked = true;
            CheckBoxInput.IsChecked = true;
            CheckBoxLi.IsChecked = true;
            CheckBoxOption.IsChecked = true;
            CheckBoxParagraph.IsChecked = true;
            CheckBoxButton.IsChecked = true;
            CheckBoxSpan.IsChecked = true;
            CheckBoxTable.IsChecked = true;
            CheckBoxTh.IsChecked = true;
            CheckBoxTr.IsChecked = true;
            CheckBoxTd.IsChecked = true;
            CheckBoxNav.IsChecked = true;
            CheckBoxUl.IsChecked = true;
            CheckBoxH1.IsChecked = true;
            CheckBoxH2.IsChecked = true;
            CheckBoxH3.IsChecked = true;
            CheckBoxH4.IsChecked = true;
            CheckBoxH5.IsChecked = true;
            CheckBoxH6.IsChecked = true;
            CheckBoxForm.IsChecked = true;
            CheckBoxThead.IsChecked = true;
        }

        /// <summary>
        ///     Checks the data URL in database.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CheckDataUrlInDatabase
        private void CheckDataUrlInDatabase()
        {
            if (!(ElementSetting == "GET") || ElementsFromDatabase
                                               .GetDataTable(url).Count <= 0
                                           || MessageBox.Show(
                                               "Do you want to delete earlier added elements for url '" +
                                               url
                                               + "'?",
                                               "Question",
                                               MessageBoxButton.YesNo) !=
                                           MessageBoxResult.Yes)
                return;
            ElementsFromDatabase.DeleteDataFromDatabase(url);
            var num = (int)MessageBox.Show("Elements are deleted!",
                "Deleting elements", MessageBoxButton.OK);
        }

        private void CheckTextAll_Click(object sender, RoutedEventArgs e)
        {
            var wel = true;
            foreach (var dataGridRow in GetDataGridRows(DataGridElements))
            {
                var isChecked =
                    (DataGridElements.Columns[8].GetCellContent(dataGridRow) as
                        CheckBox).IsChecked;
                var flag = true;
                wel = !((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue);
            }

            url = ElementSetting != "SET" ? TextBoxURL.Text : ComboBoxURL.Text;
            ElementsFromDatabase.UpdateAllCheckboxes(url, wel, "checktext");
            DataGridElements.ItemsSource = null;
            DataGridElements.ItemsSource =
                ElementsFromDatabase.GetDataTable(url);

            if (wel) CheckTextAll.Content = "Unselect All Text";
            else CheckTextAll.Content = "Select All Text";
        }

        /// <summary>
        ///     Handles the DropDownClosed event of the ComboBoxLoginData control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ComboBoxLoginData_DropDownClosed
        private void ComboBoxLoginData_DropDownClosed(object sender,
            EventArgs e)
        {
            foreach (var inlogDataRecords in InlogData.LoginDataGet())
                if (inlogDataRecords.LoginURL == ComboBoxLoginData.Text)
                {
                    VulLoginDataGer(inlogDataRecords);
                    ComboBoxLoginName.Text = inlogDataRecords.LoginName;
                    if (TextBoxURLSave.Text == string.Empty)
                        break;
                    ButtonSave.IsEnabled = true;
                    break;
                }
        }

        private void ComboBoxLoginName_DropDownClosed(object sender,
            EventArgs e)
        {
            foreach (var inlogDataRecords in InlogData.LoginDataGet())
                if (inlogDataRecords.LoginName == ComboBoxLoginName.Text)
                {
                    VulLoginDataGer(inlogDataRecords);
                    ComboBoxLoginData.Text = inlogDataRecords.LoginURL;
                    if (TextBoxURLSave.Text == string.Empty)
                        break;
                    ButtonSave.IsEnabled = true;
                    break;
                }
        }

        /// <summary>
        ///     Handles the DropDownClosed event of the ComboBoxURL control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ComboBoxURL_DropDownClosed
        private void ComboBoxUrlDropDownClosed(object sender, EventArgs e)
        {
            if (ComboBoxURL.SelectedIndex == -1)
                return;
            TextBoxURL.Text = ComboBoxURL.Text;
            if (ElementSetting == "SET")
                CheckBoxSwitchTo.Visibility = Visibility.Visible;
            ButtonGetElements.Visibility = Visibility.Visible;
            GridCheckText.Visibility = Visibility.Visible;
            HaalGegevensEnToon();
        }

        private void DataGridElements_CellEditEnding(object sender,
            DataGridCellEditEndingEventArgs e)
        {
            var dataGridRow =
                DataGridElements.Items.IndexOf(DataGridElements.CurrentItem);
            var dataGridColumn = DataGridElements.CurrentColumn;

            if (dataGridColumn != null)
            {
                //if (dataGridColumn.DisplayIndex.ToString() == "1")
                if (dataGridColumn.Header.Equals("Select"))
                {
                    var isChecked1 =
                        (DataGridElements.Columns[1].GetCellContent(dataGridRow)
                            as CheckBox)
                        .IsChecked;
                    var flag = true;
                    var wel = !((isChecked1.GetValueOrDefault() == flag) &
                                isChecked1.HasValue);
                    url = (DataGridElements.Columns[0]
                        .GetCellContent(dataGridRow) as TextBlock).Text;
                    ElementsFromDatabase.UpdateAllCheckbox8(url, wel,
                        "selenium_check");
                }

                //if (dataGridColumn.DisplayIndex.ToString() == "8")
                if (dataGridColumn.Header.Equals("Check Text"))
                {
                    var isChecked8 =
                        (DataGridElements.Columns[8].GetCellContent(dataGridRow)
                            as CheckBox)
                        .IsChecked;
                    var flag = true;
                    var wel = !((isChecked8.GetValueOrDefault() == flag) &
                                isChecked8.HasValue);
                    url = (DataGridElements.Columns[0]
                        .GetCellContent(dataGridRow) as TextBlock).Text;
                    ElementsFromDatabase.UpdateAllCheckbox8(url, wel,
                        "checktext");
                }

                DataGridElements.ItemsSource = null;
                DataGridElements.ItemsSource =
                    ElementsFromDatabase.GetDataTable(url);
            }
        }

        private void DataGridElements_CurrentCellChanged(object sender,
            EventArgs e)
        {
            if (DataGridElements.Items.IndexOf(DataGridElements.CurrentItem) !=
                -1)
            {
                var dataGridRow =
                    DataGridElements.Items.IndexOf(DataGridElements
                        .CurrentItem);
                var kolom = DataGridElements.CurrentColumn;

                var checkedGer = false;
                var checkedGer0 = false;
                var row = (DataGridRow)DataGridElements.ItemContainerGenerator
                    .ContainerFromIndex(dataGridRow);
                var cellContent =
                    DataGridElements.Columns[0]
                        .GetCellContent(row) as TextBlock;
                var cellContentText =
                    DataGridElements.Columns[7]
                        .GetCellContent(row) as TextBlock;
                var cellContent1 =
                    DataGridElements.Columns[8].GetCellContent(row) as CheckBox;
                var cellContent0 =
                    DataGridElements.Columns[1].GetCellContent(row) as CheckBox;

                url = ElementSetting != "SET"
                    ? TextBoxURL.Text
                    : ComboBoxURL.Text;
                // if (kolom.DisplayIndex == 1)
                if (kolom.Header.Equals("Select"))
                {
                    if (cellContent0.IsChecked == false)
                    {
                        checkedGer0 = true;
                        cellContent0.IsChecked = true;
                    }
                    else
                    {
                        checkedGer0 = false;
                        cellContent0.IsChecked = false;
                    }

                    ElementsFromDatabase.UpdateCheckBox(cellContent.Text,
                        checkedGer0);
                }

                // if (kolom.DisplayIndex == 8)
                if (kolom.Header.Equals("Check Text"))
                {
                    if (cellContent1.IsChecked == false)
                        checkedGer = true;
                    else
                        checkedGer = false;

                    ElementsFromDatabase.UpdateCheckBox8(cellContent.Text,
                        checkedGer);

                    //if (checkedGer)
                    //    ElementsFromDatabase.UpdateCheckBoxText(cellContent.Text, cellContentText.Text);
                    //else
                    //    ElementsFromDatabase.UpdateCheckBoxText(cellContent.Text, string.Empty);
                }

                //if (kolom.DisplayIndex == 8)
                if (kolom.Header.Equals("Check Text"))
                {
                    var isChecked = cellContent1.IsChecked;
                    var flag = true;
                    var check1 = "checktext";
                    if (kolom.Header.Equals("Select"))
                        check1 = " selenium_check";

                    var wel = !((isChecked.GetValueOrDefault() == flag) &
                                isChecked.HasValue);
                    ElementsFromDatabase.UpdateAllCheckbox8(cellContent.Text,
                        wel, check1);
                }

                if (kolom.Header.Equals("Check Text") ||
                    kolom.Header.Equals("Select"))
                {
                    DataGridElements.ItemsSource = null;
                    DataGridElements.ItemsSource =
                        ElementsFromDatabase.GetDataTable(url);

                    foreach (var itemG in ElementsFromDatabase.GetDataTable(url)
                    )
                        if (itemG.elementCheck)
                        {
                            ButtonSetToTest.IsEnabled = true;
                            break;
                        }
                        else
                        {
                            ButtonSetToTest.IsEnabled = false;
                        }
                }
            }
        }

        /// <summary>
        ///     Handles the LostFocus event of the DataGridElements control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for DataGridElements_LostFocus
        private void DataGridElementsLostFocus(object sender, RoutedEventArgs e)
        {
            // Opslaan();
        }

        /// <summary>
        ///     Examines the node.
        /// </summary>
        /// <param name="node">The node.</param>
        /// <param name="driver2WebDriver">The driver2 web driver.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ExamineNode
        private void ExamineNode(HtmlNode node, IWebDriver driver2WebDriver)
        {
            try
            {
                var showBorderColor = OverallSettings.ShowBorderColor;
                var showBorderWidth = OverallSettings.ShowBorderWidth;
                //var showDuration = OverallSettings.ShowDuration;
                var showDuration = 10;
                var sleepTime = showDuration;
                if (node is HtmlTextNode)
                    return;
                var empty1 = string.Empty;
                if (node.Attributes["href"] != null)
                    empty1 = node.Attributes["href"].Value;
                var empty2 = string.Empty;
                var empty3 = string.Empty;
                var empty4 = string.Empty;
                var str1 = string.Empty;
                var datacy = string.Empty;
                var empty5 = string.Empty;
                var empty6 = string.Empty;
                if (node.Attributes["data-cy"] != null)
                    datacy = node.Attributes["data-cy"].Value;
                if (node.Attributes["class"] != null)
                    empty2 = node.Attributes["class"].Value;
                if (node.Attributes["name"] != null)
                    empty3 = node.Attributes["name"].Value;
                if (node.Attributes["title"] != null)
                    empty4 = node.Attributes["title"].Value;
                if (node.Attributes["value"] != null)
                    str1 = node.Attributes["value"].Value;
                if (node.Attributes["id"] != null)
                    str1 = node.Attributes["id"].Value;
                if (str1.Length > byte.MaxValue)
                    str1 = str1.Substring(0, 254);
                bool? isChecked;
                if (node.Name == "a")
                {
                    isChecked = CheckBoxA.IsChecked;
                    var flag = true;
                    if (isChecked.GetValueOrDefault() == flag)
                        goto label_39;
                }

                if (node.Name == "input")
                {
                    isChecked = CheckBoxInput.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "textarea")
                {
                    isChecked = CheckBoxInput.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "iframe")
                {
                    isChecked = CheckBoxIframe.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "nav")
                {
                    isChecked = CheckBoxNav.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "ul")
                {
                    isChecked = CheckBoxUl.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "img")
                {
                    isChecked = CheckBoxImg.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "div")
                {
                    isChecked = CheckBoxDiv.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "li")
                {
                    isChecked = CheckBoxLi.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "table")
                {
                    isChecked = CheckBoxTable.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "td")
                {
                    isChecked = CheckBoxTd.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "th")
                {
                    isChecked = CheckBoxTh.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "tr")
                {
                    isChecked = CheckBoxTr.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "option")
                {
                    isChecked = CheckBoxOption.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "p")
                {
                    isChecked = CheckBoxParagraph.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }


                if (node.Name == "button")
                {
                    isChecked = CheckBoxButton.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }


                if (node.Name == "h1")
                {
                    isChecked = CheckBoxH1.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "h2")
                {
                    isChecked = CheckBoxH2.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "h3")
                {
                    isChecked = CheckBoxH3.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "h4")
                {
                    isChecked = CheckBoxH4.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "h5")
                {
                    isChecked = CheckBoxH5.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "h6")
                {
                    isChecked = CheckBoxH6.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "thead")
                {
                    isChecked = CheckBoxThead.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "form")
                {
                    isChecked = CheckBoxForm.IsChecked;
                    var flag = true;
                    if ((isChecked.GetValueOrDefault() == flag) &
                        isChecked.HasValue)
                        goto label_39;
                }

                if (node.Name == "span")
                {
                    isChecked = CheckBoxSpan.IsChecked;
                    var flag = true;
                    if (!((isChecked.GetValueOrDefault() == flag) &
                          isChecked.HasValue))
                        goto label_45;
                }
                else
                {
                    goto label_45;
                }

                label_39:
                var str2 = empty4.Replace("'", "\\'");
                isChecked = CheckBoxObjectVisibility.IsChecked;
                var flag1 = false;
                if ((isChecked.GetValueOrDefault() == flag1) &
                    isChecked.HasValue && node.XPath != null)
                    if (driver2WebDriver.FindElement(By.XPath(node.XPath)) !=
                        null)
                        try
                        {
                            var element =
                                driver2WebDriver.FindElement(
                                    By.XPath(node.XPath));
                            GeneralFunctionality.Functions
                                .HighlightAndScreenshot(
                                    driver2WebDriver,
                                    element,
                                    sleepTime,
                                    showBorderColor,
                                    showBorderWidth);
                        }
                        catch (Exception ex)
                        {
                            //var num = (int) MessageBox.Show(ex.Message);
                        }

                // if (StripHTML(HttpUtility.HtmlDecode(node.InnerHtml.Trim())).Length < byte.MaxValue)
                var innertekst = string.Empty;
                if (IsNodeVisible(node))
                {
                    //innertekst =
                    //    StripHTML(
                    //        HttpUtility.HtmlDecode(node.InnerText.Trim()));


                }
                innertekst =
                    HttpUtility.HtmlDecode(node.InnerText.Trim());

                innertekst = innertekst.Trim(new Char[] { '\r', '\n'});


                // if (node.Name == "input" && node.Attributes["type"].Value != "search" && node.Attributes["type"].Value != "checkbox")
                // {
                // if (node.Attributes["value"].Value != null)
                // {
                // innertekst = node.Attributes["value"].Value;
                // }
                // }

                // var te = Encoding.GetEncoding(node.InnerText).ToString();
                //if (StripHTML(HttpUtility.HtmlDecode(node.InnerText.Trim()))
                //    .Length < byte.MaxValue)

                //var xpath_node = node.XPath.Replace("[1]", "");
                var xpath_node = node.XPath;

                var sSQL = "INSERT INTO `autotest`.`selenium_elements` " +
                           "(`url`, " + "gebruikte_link, " + "`xpath`, "
                           + "`tagname`, " + "`text`, " + "`id`, " +
                           "`name`, " +
                           "`class`, " + "`href`, " + "`title`, " //
                           + "`value`, `checktext`, project_id, datacy) " + "VALUES " +
                           "('" + MySqlHelper.EscapeString(TextBoxURL.Text)
                           + "', " + "'" + MySqlHelper.EscapeString(href_link) +
                           "', " + "'"
                           + MySqlHelper.EscapeString(xpath_node) + "', " +
                           "'" +
                           MySqlHelper.EscapeString(node.Name)
                           + "', " + "'" +
                           MySqlHelper.EscapeString(innertekst) +
                           "', " + "'"
                           + MySqlHelper.EscapeString(node.Id) + "', " + "'" +
                           MySqlHelper.EscapeString(empty3) + "', "
                           + "'" + MySqlHelper.EscapeString(empty2) + "', " +
                           "'" +
                           MySqlHelper.EscapeString(empty1)
                           + "', " + "'" + MySqlHelper.EscapeString(str2) +
                           "', " +
                           "'" + MySqlHelper.EscapeString(str1)
                           + "', '0', " + project_id + ", '" + MySqlHelper.EscapeString(datacy) + "'); ";
                
                General.ExecuteQueryCommand(sSQL);
                label_45:
                foreach (var childNode in node.ChildNodes)
                    ExamineNode(childNode, driver2WebDriver);
            }
            catch (Exception ex)
            {
                General.LogMessage(
                    ex.Message + "\r\n\r\n" + ex.StackTrace + "\r\n\r\n" +
                    ex.Source,
                    4,
                    string.Empty,
                    0,
                    string.Empty,
                    InloggerData.MachineCode);
            }
        }

        private IWebElement FindElement(string AttributeText, string TagText,
            ChromeDriver driver1, uint timeout = 5)
        {
            IWebElement content = null;
            switch (AttributeText.ToUpper())
            {
                case "NAME":
                    WaitUntilElementExists(driver1, By.Name(TagText));
                    driver1.FindElement(By.Name(TagText));
                    content = driver1.FindElement(By.Name(TagText));
                    break;
                case "XPATH":
                    WaitUntilElementExists(driver1, By.XPath(TagText));
                    driver1.FindElement(By.XPath(TagText));
                    content = driver1.FindElement(By.XPath(TagText));
                    break;
                case "CLASS":
                    WaitUntilElementExists(driver1, By.ClassName(TagText));
                    driver1.FindElement(By.ClassName(TagText));
                    content = driver1.FindElement(By.ClassName(TagText));
                    break;
                case "ID":
                    WaitUntilElementExists(driver1, By.Id(TagText));
                    driver1.FindElement(By.Id(TagText));
                    content = driver1.FindElement(By.Id(TagText));
                    break;
                case "CSSSELECTOR":
                    WaitUntilElementExists(driver1, By.CssSelector(TagText));
                    driver1.FindElement(By.CssSelector(TagText));
                    content = driver1.FindElement(By.CssSelector(TagText));
                    break;
            }

            return content;
        }

        /// <summary>
        ///     Finds the test applications.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for FindTestApplications
        private void FindTestApplications()
        {
            foreach (var file in new DirectoryInfo(
                    GeneralFunctionality.Functions.GetCurrentDir(1))
                .GetFiles("*.xml"))
                ComboBoxApplications.Items.Add(
                    new List<string>
                    {
                        GeneralFunctionality.Functions
                            .GetSettingsXmlStrings(
                                file.Name.Substring(0, file.Name.Length - 4), 1)
                            .ToList()[1]
                    }.Distinct().ToList()[0]);
        }

        /// <summary>
        ///     Haals the gegevens ComboBox.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for HaalGegevensComboBox
        private void HaalGegevensComboBox()
        {
            var urlOverviewList = new List<UrlOverview>();
            var urLs = UrlOverview.GetUrLs();
            ComboBoxURL.Items.Clear();
            foreach (var urlOverview in urLs)
                ComboBoxURL.Items.Add(urlOverview.urlstring);
        }

        /// <summary>
        ///     Haals the gegevens en toon.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for HaalGegevensEnToon
        private void HaalGegevensEnToon()
        {
            // var sleepTime = OverallSettings.ShowDuration;
            var sleepTime = 10;
            ButtonGetElements.IsEnabled = false;
            url = !(ElementSetting == "GET")
                ? ComboBoxURL.Text
                : TextBoxURL.Text;
            General.LogMessage(
                "URL: '" + url + "'.",
                3,
                string.Empty,
                0,
                string.Empty,
                InloggerData.MachineCode);
            CheckDataUrlInDatabase();
            if (!url.StartsWith("http://") && !url.StartsWith("https://"))
            {
                var num = (int)MessageBox.Show(
                    "The url has to start with 'http://' or 'https://'\r\nPlease try again!!!",
                    "Message",
                    MessageBoxButton.OK,
                    MessageBoxImage.Exclamation);
            }
            else
            {
                ButtonSetToTest.IsEnabled = false;
                LabelTestCase.Visibility = Visibility.Hidden;
                TextBoxTestCase.Visibility = Visibility.Hidden;
                if (ElementSetting == "GET")
                    //try
                    //{
                    using (new PleaseWait())
                    {
                        var _driver = new ChromeDriver(GeneralFunctionality
                            .Functions.GetCurrentDir(0));

                        if (TextBoxURLSave.Text != string.Empty)
                            url = TextBoxURLSave.Text;

                        _driver.Navigate().GoToUrl(url);
                        _driver.Manage().Window.Maximize();
                        _driver.Manage().Timeouts().ImplicitWait =
                            TimeSpan.FromSeconds(sleepTime);

                        IWebElement content = null;
                        if (loginCheck.IsChecked == true)
                            for (var i = 1; i < 8; i++)
                            {
                                Thread.Sleep(sleepTime);
                                // UserName
                                if (Order1.Text == i.ToString())
                                    if (ComboBoxAction1.Text != string.Empty &&
                                        UserText.Text != string.Empty
                                        && UserTag.Text != string.Empty
                                        && UserAttribute.Text
                                        != string.Empty)
                                    {
                                        content = FindElement(
                                            UserAttribute.Text.ToLower(),
                                            UserTag.Text.ToLower(),
                                            _driver);
                                        ActieUitvoeren(
                                            content,
                                            ComboBoxAction1.Text,
                                            UserText.Text,
                                            _driver,
                                            UserAttribute.Text);
                                    }

                                // Password
                                if (Order2.Text == i.ToString())
                                    if (ComboBoxAction3.Text != string.Empty
                                        && PasswordText.Password != string.Empty
                                        && PasswordTag.Text != string.Empty
                                        && PasswordAtrribute.Text !=
                                        string.Empty)
                                    {
                                        content = FindElement(
                                            PasswordAtrribute.Text.ToLower(),
                                            PasswordTag.Text.ToLower(),
                                            _driver);
                                        ActieUitvoeren(
                                            content,
                                            ComboBoxAction3.Text,
                                            PasswordText.Password,
                                            _driver,
                                            PasswordAtrribute.Text);
                                    }

                                // Login button
                                if (Order3.Text == i.ToString())
                                    if (ComboBoxAction4.Text != string.Empty &&
                                        ButtonTag.Text != string.Empty
                                        && ButtonAttribute.Text
                                        != string.Empty)
                                    {
                                        content = FindElement(
                                            ButtonAttribute.Text.ToLower(),
                                            ButtonTag.Text.ToLower(),
                                            _driver);
                                        ActieUitvoeren(
                                            content,
                                            ComboBoxAction4.Text,
                                            string.Empty,
                                            _driver,
                                            ButtonAttribute.Text);
                                    }

                                if (Order6.Text == i.ToString())
                                    if (ComboBoxAction2.Text != string.Empty)
                                    {
                                        if (ComboBoxAction2.Text == "sendkeys"
                                            || ComboBoxAction2.Text == "select"
                                            || ComboBoxAction2.Text ==
                                            "set_value")
                                        {
                                            if (DescriptionExtra3.Text !=
                                                string.Empty)
                                            {
                                                content = FindElement(
                                                    ButtonAttributeExtra3.Text
                                                        .ToLower(),
                                                    ButtonTagnameExtra3.Text
                                                        .ToLower(),
                                                    _driver);
                                                ActieUitvoeren(
                                                    content,
                                                    ComboBoxAction2.Text,
                                                    DescriptionExtra3.Text,
                                                    _driver,
                                                    ButtonAttributeExtra3.Text);
                                            }
                                        }
                                        else
                                        {
                                            content = FindElement(
                                                ButtonAttributeExtra3.Text
                                                    .ToLower(),
                                                ButtonTagnameExtra3.Text
                                                    .ToLower(),
                                                _driver);
                                            ActieUitvoeren(
                                                content,
                                                ComboBoxAction2.Text,
                                                DescriptionExtra3.Text,
                                                _driver,
                                                ButtonAttributeExtra3.Text);
                                        }
                                    }


                                if (Order7.Text == i.ToString())
                                    if (ComboBoxAction7.Text != string.Empty)
                                    {
                                        if (ComboBoxAction7.Text == "sendkeys"
                                            || ComboBoxAction7.Text == "select"
                                            || ComboBoxAction7.Text ==
                                            "set_value")
                                        {
                                            if (DescriptionExtra4.Text !=
                                                string.Empty)
                                            {
                                                content = FindElement(
                                                    ButtonAttributeExtra4.Text
                                                        .ToLower(),
                                                    ButtonTagnameExtra4.Text
                                                        .ToLower(),
                                                    _driver);
                                                ActieUitvoeren(
                                                    content,
                                                    ComboBoxAction7.Text,
                                                    DescriptionExtra4.Text,
                                                    _driver,
                                                    ButtonAttributeExtra4.Text);
                                            }
                                        }
                                        else
                                        {
                                            content = FindElement(
                                                ButtonAttributeExtra4.Text
                                                    .ToLower(),
                                                ButtonTagnameExtra4.Text
                                                    .ToLower(),
                                                _driver);
                                            ActieUitvoeren(
                                                content,
                                                ComboBoxAction4.Text,
                                                DescriptionExtra4.Text,
                                                _driver,
                                                ButtonAttributeExtra4.Text);
                                        }
                                    }
                            }

                        yy = new HashSet<string>();

                        HaalGegevensSite(_driver, TextBoxURL.Text);
                        foreach (var urlstring in yy.ToList())
                            HaalGegevensSite(_driver, urlstring);
                        var isChecked = CheckBoxWholeWebsite.IsChecked;
                        var flag = true;
                        if ((isChecked.GetValueOrDefault() == flag) &
                            isChecked.HasValue)
                        {
                            Thread.Sleep(5000);

                            var Webget = new HtmlWeb();
                            var doc = new HtmlDocument();
                            Webget.AutoDetectEncoding = false;
                            Webget.OverrideEncoding = Encoding.UTF8;

                            doc = Webget.Load(_driver.Url);
                            var htmlDocument = new HtmlWeb().Load(_driver.Url);

                            // General.LogMessage(htmlDocument.Text, 0, "", 0, "", "");
                            foreach (var childNode in doc.DocumentNode
                                .SelectSingleNode("*").ChildNodes) ;
                        }

                        _driver.Quit();
                    }

                Bouwdatagrid();
            }
        }

        private void Bouwdatagrid()
        {
            DataGridElements.ItemsSource =
                ElementsFromDatabase.GetDataTable(TextBoxURL.Text);
            if (DataGridElements.Items.Count > 0)
            {
                foreach (var itemG in ElementsFromDatabase.GetDataTable(
                    TextBoxURL.Text))
                    if (itemG.elementCheck)
                    {
                        ButtonSetToTest.IsEnabled = true;
                        break;
                    }

                DataGridElements.Visibility = Visibility.Visible;
                GridCheckText.Visibility = Visibility.Visible;
                CheckTextAll.Visibility = Visibility.Visible;
                ButtonCSV.Visibility = Visibility.Visible;
                ButtonSelectAll.IsEnabled = true;
                ButtonJSON.IsEnabled = true;
                CheckTextAll.IsEnabled = true;
                ButtonCSV.IsEnabled = true;
                CheckBoxSwitchTo.Visibility = Visibility.Visible;
                ButtonTotCSV.IsEnabled = true; 
                ButtonExcel.IsEnabled = true;
            }
            else
            {
                DataGridElements.Visibility = Visibility.Hidden;
                CheckTextAll.Visibility = Visibility.Hidden;
                ButtonCSV.Visibility = Visibility.Hidden;
                GridCheckText.Visibility = Visibility.Hidden;
                ButtonTotCSV.IsEnabled = false;
                ButtonExcel.IsEnabled = false;
                ButtonSelectAll.IsEnabled = false;
                ButtonJSON.IsEnabled = false;
                CheckTextAll.IsEnabled = false;
                ButtonCSV.IsEnabled = false;
            }

            LabelFoundElements.Content = "Found Elements: " +
                                         DataGridElements.Items.Count;
            LabelFoundElements.Visibility = Visibility.Visible;
        }

        /// <summary>
        ///     Haals the gegevens site.
        /// </summary>
        /// <param name="_driver">The driver.</param>
        /// <param name="urlstring">The urlstring.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for HaalGegevensSite
        private void HaalGegevensSite(ChromeDriver _driver1, string urlstring)
        {
            IWebElement content = null;
            _driver1.Navigate().GoToUrl(urlstring);


            if (Order4.Text != string.Empty && Order4.Text != "0")
                if (ComboBoxAction5.Text != string.Empty)
                {
                    if (ComboBoxAction5.Text == "sendkeys" ||
                        ComboBoxAction5.Text == "select"
                        || ComboBoxAction5.Text == "set_value")
                    {
                        if (DescriptionExtra1.Text != string.Empty)
                        {
                            content = FindElement(
                                ButtonAttributeExtra1.Text,
                                ButtonTagnameExtra1.Text,
                                _driver1);
                            if (content != null)
                                ActieUitvoeren(
                                    content,
                                    ComboBoxAction5.Text,
                                    DescriptionExtra1.Text,
                                    _driver1,
                                    ButtonAttributeExtra1.Text);
                        }
                    }
                    else
                    {
                        content = FindElement(
                            ButtonAttributeExtra1.Text,
                            ButtonTagnameExtra1.Text,
                            _driver1,
                            15);
                        if (content != null)
                            ActieUitvoeren(
                                content,
                                ComboBoxAction5.Text,
                                DescriptionExtra1.Text,
                                _driver1,
                                ButtonAttributeExtra1.Text);
                    }
                }

            if (Order5.Text != string.Empty && Order5.Text != "0")
                if (ComboBoxAction6.Text != string.Empty)
                {
                    if (ComboBoxAction6.Text == "sendkeys" ||
                        ComboBoxAction6.Text == "select"
                        || ComboBoxAction6.Text == "set_value")
                    {
                        if (DescriptionExtra2.Text != string.Empty)
                        {
                            content = FindElement(
                                ButtonAttributeExtra2.Text,
                                ButtonTagnameExtra2.Text,
                                _driver1);
                            if (content != null)
                                ActieUitvoeren(
                                    content,
                                    ComboBoxAction6.Text,
                                    DescriptionExtra2.Text,
                                    _driver1,
                                    ButtonAttributeExtra2.Text);
                        }
                    }
                    else
                    {
                        content = FindElement(
                            ButtonAttributeExtra2.Text,
                            ButtonTagnameExtra2.Text,
                            _driver1);
                        if (content != null)
                            ActieUitvoeren(
                                content,
                                ComboBoxAction6.Text,
                                DescriptionExtra2.Text,
                                _driver1,
                                ButtonAttributeExtra2.Text);
                    }
                }


            try
            {
                var Webget = new HtmlWeb();
                var doc = new HtmlDocument();
                Webget.AutoDetectEncoding = false;
                Webget.OverrideEncoding = Encoding.UTF8;
                Thread.Sleep(5000);
                //_driver1.Url = urlstring;
                doc.LoadHtml(_driver1.PageSource);
                number = 0;
                foreach (var selectNode in doc.DocumentNode.SelectNodes("*"))
                {
                    ExamineNode(selectNode, _driver1);
                    ++number;
                }
            }
            catch (Exception ex)
            {
                General.LogMessage(
                    ex.Message + "\r\n\r\n" + ex.StackTrace + "\r\n\r\n" +
                    ex.Source,
                    4,
                    string.Empty,
                    0,
                    string.Empty,
                    InloggerData.MachineCode);
                _driver1.Quit();
            }
        }

        /// <summary>
        ///     Inlogs the leeg.
        /// </summary>
        /// <param name="zien">if set to <c>true</c> [zien].</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for inlogLeeg
        private void InlogLeeg(bool zien)
        {
            var visibility = Visibility.Hidden;
            if (zien)
                visibility = Visibility.Visible;
            username.Visibility = visibility;
            passwordname.Visibility = visibility;
            buttonName.Visibility = visibility;
            StackPanelLoad.Visibility = visibility;
            StackPanelHeader.Visibility = visibility;
            StackPanelSave.Visibility = visibility;
            LabelFoundElements1.Visibility = visibility;
            buttonExtaName.Visibility = visibility;
            ButtonAttributeExtra2s.Visibility = visibility;
            Extra.Visibility = visibility;
            if (zien)
            {
                CheckBoxSwitchTo.Visibility = Visibility.Hidden;
                ExtraExtra.Visibility = Visibility.Visible;
            }
            else
            {
                CheckBoxSwitchTo.Visibility = Visibility.Visible;
                ExtraExtra.Visibility = Visibility.Hidden;
            }
        }

        private void LeegMaken()
        {
            ComboBoxAction1.SelectedIndex = 2;
            ComboBoxAction2.SelectedIndex = 0;
            ComboBoxAction3.SelectedIndex = 2;
            ComboBoxAction4.SelectedIndex = 1;
            ComboBoxAction5.SelectedIndex = 0;
            ComboBoxAction6.SelectedIndex = 0;

            UserAttribute.SelectedIndex = 2;
            PasswordAtrribute.SelectedIndex = 2;

            ButtonAttribute.SelectedIndex = 2;
            ButtonAttributeExtra1.SelectedIndex = 2;
            ButtonAttributeExtra2.SelectedIndex = 2;
            ButtonAttributeExtra3.SelectedIndex = 2;
            ButtonAttributeExtra4.SelectedIndex = 2;

            TextBoxTestCase.Text = string.Empty;
            TextBoxTestCasePage.Text = string.Empty;
            ButtonSelectAll.Content = "Select All";
            ButtonSelectAll.IsEnabled = false;
            ButtonJSON.IsEnabled = false;
        }

        /// <summary>
        ///     Handles the Click event of the loginCheck control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for loginCheck_Click
        private void loginCheck_Click(object sender, RoutedEventArgs e)
        {
            ToonInloggegevens();
        }

        /// <summary>
        ///     Maaks the login leeg.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for MaakLoginLeeg
        private void MaakLoginLeeg()
        {
            UserAttribute.Text = string.Empty;
            PasswordAtrribute.Text = string.Empty;
            ButtonAttribute.Text = string.Empty;
            UserTag.Text = string.Empty;
            PasswordTag.Text = string.Empty;
            ButtonTag.Text = string.Empty;
            UserText.Text = string.Empty;
            PasswordText.Password = string.Empty;
            LabelID.Content = string.Empty;
            TextBoxURLSave.Text = string.Empty;
            LeegMaken();
        }

        private void Opslaan()
        {
            foreach (var dataGridRow in GetDataGridRows(DataGridElements))
            {
                var isChecked1 =
                    (DataGridElements.Columns[1].GetCellContent(dataGridRow) as
                        CheckBox).IsChecked;
                url = (DataGridElements.Columns[0].GetCellContent(dataGridRow)
                    as TextBlock).Text;
                ElementsFromDatabase.UpdateAllCheckbox8(url, isChecked1.Value,
                    "selenium_check");
            }

            foreach (var dataGridRow in GetDataGridRows(DataGridElements))
            {
                var isChecked8 =
                    (DataGridElements.Columns[8].GetCellContent(dataGridRow) as
                        CheckBox).IsChecked;
                url = (DataGridElements.Columns[0].GetCellContent(dataGridRow)
                    as TextBlock).Text;
                ElementsFromDatabase.UpdateAllCheckbox8(url, isChecked8.Value,
                    "checktext");

                if (((CheckBox)DataGridElements.Columns[1]
                    .GetCellContent(dataGridRow)).IsChecked.Value)
                {
                    ButtonSetToTest.IsEnabled = true;
                    CheckTextAll.IsEnabled = true;
                    ButtonCSV.IsEnabled = true;
                    LabelTestCase.Visibility = Visibility.Visible;
                    TextBoxTestCase.Visibility = Visibility.Visible;
                    LabelTestPage.Visibility = Visibility.Visible;
                    TextBoxTestCasePage.Visibility = Visibility.Visible;
                    ButtonGetElements.Visibility = Visibility.Hidden;
                }
            }
        }

        /// <summary>
        ///     Parsings the specified website.
        /// </summary>
        /// <param name="website">The website.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Parsing
        private async void Parsing(string website)
        {
            var byteArrayAsync =
                await new HttpClient().GetByteArrayAsync(
                    "https://vhost-1.corsola.uvt.nl/en");
            var str = WebUtility.HtmlDecode(
                Encoding.GetEncoding("utf-8").GetString(byteArrayAsync, 0,
                    byteArrayAsync.Length - 1));
            var htmlDocument = new HtmlDocument();
            htmlDocument.LoadHtml(str);
            var num = (int)MessageBox.Show(str);
            foreach (var htmlNode in htmlDocument.DocumentNode.Descendants()
                .ToList())
            {
                var textBoxElementen = TextBoxElementen;
                textBoxElementen.Text =
                    textBoxElementen.Text + htmlNode.XPath + ";" + htmlNode.Id +
                    ";" + htmlNode.Name
                    + "\r\n";
            }

            TextBoxElementen.Visibility = Visibility.Visible;
        }

        /// <summary>
        ///     Sets the button context.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for SetButtonContext
        private void SetButtonContext()
        {
            Title = "Extras - Find Elements - Get elements from ";
            var elementSetting = ElementSetting;
            if (!(elementSetting == "GET"))
            {
                if (!(elementSetting == "SET"))
                    return;
                Title += "database";
            }
            else
            {
                Title += "url";
            }
        }

        /// <summary>
        ///     Handles the KeyDown event of the TextBoxURL control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.Input.KeyEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBoxURL_KeyDown
        private void TextBoxURL_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Return || e.Key == Key.Return)
                HaalGegevensEnToon();
            VullenTextBox();
        }

        /// <summary>
        ///     Handles the LostFocus event of the TextBoxURL control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBoxURL_LostFocus
        private void TextBoxURL_LostFocus(object sender, RoutedEventArgs e)
        {
            VullenTextBox();
            ButtonGetElements.Visibility = Visibility.Visible;
        }

        /// <summary>
        ///     Handles the TextChanged event of the TextBoxURL control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="TextChangedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBoxURL_TextChanged
        private void TextBoxURL_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            if (!(TextBoxURL.Text != string.Empty))
                return;
            var isChecked1 = CheckBoxInput.IsChecked;
            var flag1 = true;
            if (!((isChecked1.GetValueOrDefault() == flag1) &
                  isChecked1.HasValue))
            {
                var isChecked2 = CheckBoxImg.IsChecked;
                var flag2 = true;
                if (!((isChecked2.GetValueOrDefault() == flag2) &
                      isChecked2.HasValue))
                {
                    var isChecked3 = CheckBoxLi.IsChecked;
                    var flag3 = true;
                    if (!((isChecked3.GetValueOrDefault() == flag3) &
                          isChecked3.HasValue))
                    {
                        var isChecked4 = CheckBoxTd.IsChecked;
                        var flag4 = true;
                        if (!((isChecked4.GetValueOrDefault() == flag4) &
                              isChecked4.HasValue))
                        {
                            var isChecked5 = CheckBoxTr.IsChecked;
                            var flag5 = true;
                            if (!((isChecked5.GetValueOrDefault() == flag5) &
                                  isChecked5.HasValue))
                            {
                                var isChecked6 = CheckBoxTable.IsChecked;
                                var flag6 = true;
                                if (!((isChecked6.GetValueOrDefault() ==
                                       flag6) & isChecked6.HasValue))
                                {
                                    var isChecked7 = CheckBoxSpan.IsChecked;
                                    var flag7 = true;
                                    if (!((isChecked7.GetValueOrDefault() ==
                                           flag7) & isChecked7.HasValue))
                                    {
                                        var isChecked8 =
                                            CheckBoxIframe.IsChecked;
                                        var flag8 = true;
                                        if (!((isChecked8.GetValueOrDefault() ==
                                               flag8) & isChecked8.HasValue))
                                        {
                                            var isChecked9 =
                                                CheckBoxOption.IsChecked;
                                            var flag9 = true;
                                            if (!((isChecked9
                                                       .GetValueOrDefault() ==
                                                   flag9) &
                                                  isChecked9.HasValue))
                                            {
                                                var isChecked10 =
                                                    CheckBoxDiv.IsChecked;
                                                var flag10 = true;
                                                if (!((isChecked10
                                                            .GetValueOrDefault() ==
                                                        flag10)
                                                    & isChecked10.HasValue))
                                                {
                                                    var isChecked11 =
                                                        CheckBoxTh.IsChecked;
                                                    var flag11 = true;
                                                    if (!((isChecked11
                                                                .GetValueOrDefault() ==
                                                            flag11)
                                                        & isChecked11.HasValue))
                                                    {
                                                        var isChecked12 =
                                                            CheckBoxA.IsChecked;
                                                        var flag12 = true;
                                                        if (!((isChecked12
                                                                    .GetValueOrDefault() ==
                                                                flag12)
                                                            & isChecked12
                                                                .HasValue))
                                                        {
                                                            var isChecked14 =
                                                                CheckBoxParagraph
                                                                    .IsChecked;
                                                            var flag14 = true;
                                                            if (!((isChecked14
                                                                        .GetValueOrDefault() ==
                                                                    flag14)
                                                                & isChecked14
                                                                    .HasValue))
                                                            {
                                                                var isChecked15
                                                                    = CheckBoxButton
                                                                        .IsChecked;
                                                                var flag15 =
                                                                    true;
                                                                if (!((
                                                                            isChecked15
                                                                                .GetValueOrDefault() ==
                                                                            flag15
                                                                        )
                                                                        & isChecked15
                                                                            .HasValue
                                                                    ))
                                                                    return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            ButtonGetElements.IsEnabled = true;
            //CheckTextAll.IsEnabled = true;
        }

        /// <summary>
        ///     Handles the LostFocus event of the TextBoxURLSave control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBoxURLSave_LostFocus
        private void TextBoxURLSave_LostFocus(object sender, RoutedEventArgs e)
        {
            if (TextBoxURLSave.Text == string.Empty)
            {
                LabelID.Content = string.Empty;
                ButtonSave.IsEnabled = false;
            }
            else
            {
                ButtonSave.IsEnabled = true;
            }
        }

        /// <summary>
        ///     Toons the inloggegevens.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ToonInloggegevens
        private void ToonInloggegevens()
        {
            var margin = BorderInlog.Margin;
            var isChecked = loginCheck.IsChecked;
            var flag = false;
            if ((isChecked.GetValueOrDefault() == flag) & isChecked.HasValue)
            {
                margin.Bottom = 307.0;
                InlogLeeg(false);
            }
            else
            {
                margin.Bottom = 157.0;
                InlogLeeg(true);
            }
        }

        /// <summary>
        ///     Vuls the inlog data.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for VulInlogData
        private void VulInlogData()
        {
            var inlogDataRecordsList2 = InlogData.LoginDataGet();
            ComboBoxLoginData.Items.Clear();
            ComboBoxLoginName.Items.Clear();

            foreach (var inlogDataRecords in inlogDataRecordsList2)
            {
                ComboBoxLoginData.Items.Add(inlogDataRecords.LoginURL);
                ComboBoxLoginName.Items.Add(inlogDataRecords.LoginName);
            }
        }

        /// <summary>
        ///     Vullens the text box.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for VullenTextBox
        private void VullenTextBox()
        {
            if (TextBoxURL.Text.Length > 4)
            {
                ButtonGetElements.IsEnabled = true;

                // TextBoxURLSave.Text = TextBoxURL.Text;
                href_link = TextBoxURL.Text;
            }
            else
            {
                ButtonGetElements.IsEnabled = false;

                // TextBoxURLSave.Text = string.Empty;
            }
        }

        private void VulLoginDataGer(
            InlogData.InlogDataRecords inlogDataRecords)
        {
            UserAttribute.Text = inlogDataRecords.LoginAttributeUsername;
            PasswordAtrribute.Text = inlogDataRecords.LoginAttributePassword;
            ButtonAttribute.Text = inlogDataRecords.LoginAttributeButton;
            UserTag.Text = inlogDataRecords.LoginTagUsername;
            PasswordTag.Text = inlogDataRecords.LoginTagPassword;
            ButtonTag.Text = inlogDataRecords.LoginTagButton;
            UserText.Text = inlogDataRecords.LoginValueUsername;
            PasswordText.Password = inlogDataRecords.LoginValuePassword;
            LabelID.Content = inlogDataRecords.IdLoginCode;
            TextBoxURLSave.Text = inlogDataRecords.LoginURL;
            TextBoxNameSave.Text = inlogDataRecords.LoginName;
            loginnaam = inlogDataRecords.LoginName;
            ButtonAttributeExtra1.Text = inlogDataRecords.LoginAttributeExtra1;
            ButtonAttributeExtra2.Text = inlogDataRecords.LoginAttributeExtra2;
            ButtonAttributeExtra3.Text = inlogDataRecords.LoginAttributeExtra3;
            ButtonAttributeExtra4.Text = inlogDataRecords.LoginAttributeExtra4;
            ButtonTagnameExtra1.Text = inlogDataRecords.LoginTagnameExtra1;
            ButtonTagnameExtra2.Text = inlogDataRecords.LoginTagnameExtra2;
            ButtonTagnameExtra3.Text = inlogDataRecords.LoginTagnameExtra3;
            ButtonTagnameExtra4.Text = inlogDataRecords.LoginTagnameExtra4;
            DescriptionExtra1.Text = inlogDataRecords.LoginDescriptionExtra1;
            DescriptionExtra2.Text = inlogDataRecords.LoginDescriptionExtra2;
            DescriptionExtra3.Text = inlogDataRecords.LoginDescriptionExtra3;
            DescriptionExtra4.Text = inlogDataRecords.LoginDescriptionExtra4;
            ComboBoxAction1.Text = inlogDataRecords.LoginAction1;
            ComboBoxAction2.Text = inlogDataRecords.LoginAction2;
            ComboBoxAction3.Text = inlogDataRecords.LoginAction3;
            ComboBoxAction4.Text = inlogDataRecords.LoginAction4;
            ComboBoxAction5.Text = inlogDataRecords.LoginAction5;
            ComboBoxAction6.Text = inlogDataRecords.LoginAction6;
            ComboBoxAction7.Text = inlogDataRecords.LoginAction7;
            Order1.Text = inlogDataRecords.LoginOrder1;
            Order2.Text = inlogDataRecords.LoginOrder2;
            Order3.Text = inlogDataRecords.LoginOrder3;
            Order4.Text = inlogDataRecords.LoginOrder4;
            Order5.Text = inlogDataRecords.LoginOrder5;
            Order6.Text = inlogDataRecords.LoginOrder6;
            Order7.Text = inlogDataRecords.LoginOrder7;
        }

        /// <summary>
        ///     Handles the Closing event of the Window control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="CancelEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Window_Closing
        private void Window_Closing(object sender, CancelEventArgs e)
        {
            ElementsFromDatabase.UpdateAllCheckboxes(TextBoxURL.Text, false,
                "selenium_check");
            ElementsFromDatabase.UpdateAllCheckboxes(TextBoxURL.Text, false,
                "checktext");
        }

        /// <summary>
        ///     Handles the Loaded event of the Window control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Window_Loaded
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            GeneralFunctionality.Functions.InitializeDatabaseConnection(false);
            FindTestApplications();

            LeegMaken();
        }

        private void CheckBoxInlogIncluded_Click(object sender,
            RoutedEventArgs e)
        {
            if (CheckBoxInlogIncluded.IsChecked == true)
                CheckBoxSwitchTo.Visibility = Visibility.Hidden;
            else
                CheckBoxSwitchTo.Visibility = Visibility.Visible;
        }

        private void TextBoxSelectFrom_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            TextBoxSelectFrom.Text =
                Regex.Replace(TextBoxSelectFrom.Text, "[^0-9]+", "");
        }

        private void TextBoxTestSelectTo_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            TextBoxTestSelectTo.Text =
                Regex.Replace(TextBoxTestSelectTo.Text, "[^0-9]+", "");
        }

        private void TextBoxSelectFrom_LostFocus(object sender,
            RoutedEventArgs e)
        {
            if (TextBoxSelectFrom.Text != string.Empty)
                ButtonSelectAll.Content = "Select";
            else
                ButtonSelectAll.Content = "Select All";
        }

        private void TextBoxTestSelectTo_LostFocus(object sender,
            RoutedEventArgs e)
        {
            if (TextBoxTestSelectTo.Text != string.Empty)
                ButtonSelectAll.Content = "Select";
            else
                ButtonSelectAll.Content = "Select All";
        }

        private void ButtonJSON_Click(object sender, RoutedEventArgs e)
        {
            // Haal gegevens op


            // Maak bestand aan
            // Controleer of bestand bestaat
            // Indien ja, dan verwijder
        }

        private void ButtonCSV_Click(object sender, RoutedEventArgs e)
        {
        }

        private void ButtonTotCSV_Click(object sender, RoutedEventArgs e)
        {
            GeneralFunctionality.Functions.CheckDir(project);
            var query = "SELECT * FROM autotest.selenium_elements ";
            query += "WHERE url = '" + TextBoxURL.Text + "' ";
            //query += "AND selenium_check = '1' ";
            query += "ORDER BY idselenium_elements";

            var dt = GenericDataRead.GetData(query);

            var uri = new Uri(TextBoxURL.Text);

            for (var row = 0; row < dt.Rows.Count; ++row)
                General.CSVfileElements(project,
                    dt.Rows[row][0].ToString(),
                    dt.Rows[row][1].ToString(),
                    dt.Rows[row][2].ToString(),
                    dt.Rows[row][3].ToString(),
                    dt.Rows[row][4].ToString(),
                    dt.Rows[row][5].ToString(),
                    dt.Rows[row][6].ToString(),
                    dt.Rows[row][7].ToString(),
                    dt.Rows[row][8].ToString(),
                    dt.Rows[row][9].ToString(),
                    dt.Rows[row][10].ToString(),
                    dt.Rows[row][11].ToString(),
                    dt.Rows[row][12].ToString(),
                    dt.Rows[row][13].ToString(),
                    dt.Rows[row][14].ToString(),
                    dt.Rows[row][15].ToString(),
                    dt.Rows[row][16].ToString(),
                    uri.LocalPath.Substring(1));

            var DatumG = string.Empty;
            DatumG += DateTime.Now.Year.ToString();
            if (DateTime.Now.Month < 10) DatumG += "0";
            DatumG += DateTime.Now.Month.ToString();
            if (DateTime.Now.Day < 10) DatumG += "0";
            DatumG += DateTime.Now.Day.ToString();
            if (DateTime.Now.Hour < 10) DatumG += "0";
            DatumG += DateTime.Now.Hour.ToString();
            if (DateTime.Now.Minute < 10) DatumG += "0";
            DatumG += DateTime.Now.Minute.ToString();
            if (DateTime.Now.Second < 10) DatumG += "0";
            DatumG += DateTime.Now.Second.ToString();

            MessageBox.Show("CSV file '" +
                            GeneralFunctionality.Functions.GetCurrentDir(1) +
                            project + @"\CSV\CSV_" + project + "_" +
                            DatumG +
                            ".csv" +
                            "' is created.");
        }

        private void ButtonSetTextCheck_Click(object sender, RoutedEventArgs e)
        {
            using (new PleaseWait())
            {
                var kolom = CheckClassText.Text;
                var clearText = 1;
                if (CheckBoxClearTextCheck.IsChecked == true)
                {
                    clearText = 0;
                }

                var sSQL = "UPDATE selenium_elements SET checktext = " +
                           clearText + " WHERE url = '";
                sSQL += TextBoxURL.Text + "' AND " + kolom + " = '" +
                        TextBoxChangeText.Text + "';";

                GenericDataRead.INUPDEL(sSQL);

                Bouwdatagrid();
            }
        }

        private void CheckClassText_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (CheckClassText.Text != string.Empty)
            {
                ButtonSetToTest.IsEnabled = true;
                CheckBoxClearTextCheck.IsEnabled = true;
            }
        }

        private void TextBoxChangeText_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (TextBoxChangeText.Text != string.Empty)
            {
                ButtonSetTextCheck.IsEnabled = true;
                CheckBoxClearTextCheck.IsEnabled = true;
            }
            else
            {
                ButtonSetTextCheck.IsEnabled = false;
                CheckBoxClearTextCheck.IsEnabled = false;
            }
        }

        private void ButtonExcel_Click(object sender, RoutedEventArgs e)
        {
            var DatumG = string.Empty;
            DatumG += DateTime.Now.Year.ToString();
            if (DateTime.Now.Month < 10) DatumG += "0";
            DatumG += DateTime.Now.Month.ToString();
            if (DateTime.Now.Day < 10) DatumG += "0";
            DatumG += DateTime.Now.Day.ToString();
            if (DateTime.Now.Hour < 10) DatumG += "0";
            DatumG += DateTime.Now.Hour.ToString();
            if (DateTime.Now.Minute < 10) DatumG += "0";
            DatumG += DateTime.Now.Minute.ToString();
            if (DateTime.Now.Second < 10) DatumG += "0";
            DatumG += DateTime.Now.Second.ToString();
            using (new PleaseWait())
            {
                var query =
                    "SELECT * FROM autotest.selenium_elements ";
                query += "WHERE url = '" + TextBoxURL.Text +
                         "' ORDER BY idselenium_elements;";
                var dt = GenericDataRead.GetData(query);

                General.exportToExcel(dt,
                    GeneralFunctionality.Functions._project,
                    "excel_" );
            }

            MessageBox.Show("Excel-file is created", "Create Excel-file",
                MessageBoxButton.OK, MessageBoxImage.Information);
        }
    }

    /// <summary>
    ///     Class Html2PlainText.
    /// </summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for Html2PlainText
    public static class Html2PlainText
    {
        /// <summary>
        ///     The div endings
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for DivEndings
        private static readonly Regex DivEndings = new Regex("</div>",
            RegexOptions.IgnoreCase | RegexOptions.Compiled);

        /// <summary>
        ///     The line breaks
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for LineBreaks
        private static readonly Regex LineBreaks = new Regex(
            "</br\\s*>",
            RegexOptions.IgnoreCase | RegexOptions.Compiled);

        /// <summary>
        ///     The non explicit lines
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for NonExplicitLines
        private static readonly Regex NonExplicitLines = new Regex(
            "\\r|\\n",
            RegexOptions.Multiline | RegexOptions.Compiled);

        /// <summary>
        ///     The tags
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Tags
        private static readonly Regex Tags =
            new Regex("<[^>]*>", RegexOptions.Compiled);

        /// <summary>
        ///     Decodes the specified HTML.
        /// </summary>
        /// <param name="html">The HTML.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Decode
        public static string Decode(string html)
        {
            if (string.IsNullOrEmpty(html))
                return html;

            var decoded = html.Trim();
            if (!HasTags(decoded))
                return html;

            decoded = NonExplicitLines.Replace(decoded, string.Empty);
            decoded = DivEndings.Replace(decoded, Environment.NewLine);
            decoded = LineBreaks.Replace(decoded, Environment.NewLine);
            decoded = Tags.Replace(decoded, string.Empty).Trim();

            return WebUtility.HtmlDecode(decoded);
        }

        /// <summary>
        ///     Determines whether the specified string has tags.
        /// </summary>
        /// <param name="str">The string.</param>
        /// <returns><c>true</c> if the specified string has tags; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for HasTags
        private static bool HasTags(string str)
        {
            return str.StartsWith("<") && str.EndsWith(">");
        }
    }
}