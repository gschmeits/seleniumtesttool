// ***********************************************************************
// Assembly         : WPFTestResults
// Author           : G.H.M.H. Schmeits
// Created          : 03-19-2018
//
// Last Modified By : G.H.M.H. Schmeits
// Last Modified On : 08-17-2018
// ***********************************************************************
// <copyright file="DeleteBulkData.xaml.cs" company="SCHMEITS">
//     Copyright ©  2018
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Forms;
using System.Windows.Threading;
using DataStorage;
using MessageBox = System.Windows.Forms.MessageBox;

namespace WPFTestResults
{
    /// <summary>
    ///     Class DeleteBulkData.
    /// </summary>
    /// <seealso cref="System.Windows.Window" />
    /// <seealso cref="System.Windows.Markup.IComponentConnector" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for DeleteBulkData
    public partial class TestCaseBulkData : Window
    {

        private DispatcherTimer dispatcherTimer;

        private void dispatcherTimer_Tick(object sender, EventArgs e)
        {
            LabelMessage.Visibility = Visibility.Hidden;
            dispatcherTimer.IsEnabled = false;
        }
        /// <summary>
        ///     Initializes a new instance of the <see cref="DeleteBulkData" /> class.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public TestCaseBulkData(string bestandsnaamopen = "")
        {
            InitializeComponent();

            dispatcherTimer = new DispatcherTimer();
            dispatcherTimer.Tick += new EventHandler(dispatcherTimer_Tick);
            dispatcherTimer.Interval = new TimeSpan(0, 0, 2);

            TextBoxTestCase.Focus();
            if (bestandsnaamopen != string.Empty)
            {
                ButtonGetTestSet.Visibility = Visibility.Hidden;
                LabelTestSET.Content = bestandsnaamopen;

                General.LogMessage(
                    "Selected TestCase: '" + bestandsnaamopen + "'.",
                    3,
                    string.Empty,
                    0,
                    string.Empty,
                    InloggerData.MachineCode);

                if (LabelTestSET.Content.ToString().Length > 0)
                {
                    ButtonTestCase.IsEnabled = true;
                    txtFrom.IsEnabled = true;
                    txtUpto.IsEnabled = true;
                }
            }
        }

        /// <summary>
        ///     Handles the Click event of the ButtonDatabaseConnectionCancel control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonDatabaseConnectionCancel_Click
        private void ButtonDatabaseConnectionCancel_Click(object sender,
            RoutedEventArgs e)
        {
            Close();
        }

        /// <summary>
        ///     Handles the Click event of the ButtonGetTestSet control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonGetTestSet_Click
        private void ButtonGetTestSet_Click(object sender, RoutedEventArgs e)
        {
            VersionClass.OpenBestand();
            var bestandsnaam = VersionClass.Bestandsnaam;
            LabelTestSET.Content = bestandsnaam;

            General.LogMessage(
                "Selected TestCase: '" + bestandsnaam + "'.",
                3,
                string.Empty,
                0,
                string.Empty,
                InloggerData.MachineCode);

            if (LabelTestSET.Content.ToString().Length > 0)
            {
                //ButtonTestCase.IsEnabled = true;
                txtFrom.IsEnabled = true;
                txtUpto.IsEnabled = true;
            }
        }

        /// <summary>
        ///     Handles the KeyDown event of the TextBoxDeletion control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.Input.KeyEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBoxDeletion_KeyDown
        private void TxtFrom_TextChanged(object sender, TextChangedEventArgs e)
        {
            txtFrom.Text = Regex.Replace(txtFrom.Text, "[^0-9]+", "");
            if (txtFrom.Text != string.Empty)
                ButtonTestCase.IsEnabled = true;
            else
                ButtonTestCase.IsEnabled = true;
        }

        private void TxtUpto_TextChanged(object sender, TextChangedEventArgs e)
        {
            txtUpto.Text = Regex.Replace(txtUpto.Text, "[^0-9]+", "");
            if (txtUpto.Text != string.Empty)
                ButtonTestCase.IsEnabled = true;
            else
                ButtonTestCase.IsEnabled = true;
        }

        private void TextBoxTestCase_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            if (TextBoxTestCase.Text != string.Empty)
                ButtonTestCase.IsEnabled = true;
            else
                ButtonTestCase.IsEnabled = false;
        }

        private void ButtonTestCase_Click(object sender, RoutedEventArgs e)
        {
                var testcaseString =
                    "UPDATE testcases_selenium SET testcase = '" +
                    TextBoxTestCase.Text + "' WHERE testname = '" +
                    LabelTestSET.Content + "'";

                if (txtFrom.Text.Length > 0 && txtUpto.Text.Length > 0)
                    if (Convert.ToInt64(txtUpto.Text) <
                        Convert.ToInt64(txtFrom.Text))
                    {
                        MessageBox.Show(
                            "Up to testnr can not be lower than from testnr!!!",
                            "Message",
                            MessageBoxButtons.OK,
                            MessageBoxIcon.Error);
                        return;
                    }

                if (txtFrom.Text != string.Empty)
                    testcaseString += " AND testnr >= " + txtFrom.Text;

                if (txtUpto.Text != string.Empty)
                    testcaseString += " AND testnr <= " + txtUpto.Text;

                General.LogMessage(
                    "Query for updating TestCases: '" + testcaseString + "'.",
                    3,
                    string.Empty,
                    0,
                    string.Empty,
                    InloggerData.MachineCode);

                var ok = false;
                try
                {

                    General.ExecuteQueryCommand(testcaseString);
                    ok = true;

                }
                catch (Exception ex)
                {
                    General.LogMessage(
                        ex.Message + "\r\n\r\n" + ex.StackTrace + "\r\n\r\n" +
                        ex.Source,
                        4,
                        string.Empty,
                        0,
                        string.Empty,
                        InloggerData.MachineCode);
                    MessageBox.Show(
                        "Selected TestSteps are NOT updated from the database!!!",
                        "Message",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }

                if (ok)
                {
                    //MessageBox.Show(
                    //    "Selected TestSteps are deleted from the database!!!",
                    //    "Message",
                    //    MessageBoxButtons.OK,
                    //    MessageBoxIcon.Information);
                    General.LogMessage(
                        "Selected TestSteps are deleted from the database",
                        3,
                        string.Empty,
                        0,
                        string.Empty,
                        InloggerData.MachineCode);
                    //this.Refresh();
                    LabelMessage.Visibility = Visibility.Visible;
                    dispatcherTimer.Start();
                    //Close();
                }
                else
                {
                    ButtonTestCase.IsEnabled = false;
                    txtFrom.IsEnabled = false;
                    txtUpto.IsEnabled = false;
                }
            
        }


    }
}