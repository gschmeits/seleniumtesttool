// ***********************************************************************
// Assembly         : WPFTestResults
// Author           : G.H.M.H. Schmeits
// Created          : 01-18-2018
//
// Last Modified By : G.H.M.H. Schmeits
// Last Modified On : 08-17-2018
// ***********************************************************************
// <copyright file="TestCases.xaml.cs" company="SCHMEITS">
//     Copyright ©  2018
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.IO;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml;
using DataStorage;
using GeneralFunctionality;
using MySql.Data.MySqlClient;
using OpenQA.Selenium;
using DataGrid = System.Windows.Controls.DataGrid;
using DataGridCell = System.Windows.Controls.DataGridCell;
using KeyEventArgs = System.Windows.Input.KeyEventArgs;
using MessageBox = System.Windows.MessageBox;

namespace WPFTestResults
{
    /// <summary>
    ///     Class TestCases.
    /// </summary>
    /// <seealso cref="System.Windows.Window" />
    /// <seealso cref="System.Windows.Markup.IComponentConnector" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for TestCases
    public partial class TestCases : Window
    {
        private ICollectionView defaultView;

        /// <summary>
        ///     Initializes a new instance of the <see cref="TestCases" /> class.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public TestCases()
        {
            InitializeComponent();
            Title = "Selenium Test Tool - Test Steps (Version: " +
                    VersionClass.GetRunningVersion() + ")";
            MakeEmpty();

            machinestatic = InloggerData.MachineCode;
            intRow = -1;

            var resHeight = Screen.PrimaryScreen.Bounds.Height;
            var actualHeight = SystemParameters.PrimaryScreenHeight;
            var actualWidth = SystemParameters.PrimaryScreenWidth;
            var dpi =
                resHeight /
                actualHeight; // 1.5 which is true because my settings says my scale is 150%
            UserInterfaceCustomScale(dpi);

            var w = actualWidth * 0.95;
            var h = actualHeight * 0.90;

            Width = w;
            Height = h;
            checkSaveble();

            TextBoxTestName.Width = Width / 3.684848;
            TextBoxTestCase.Width = Width / 3.684848;
            TextBoxTestElementName.Width = Width / 3.684848;

            TextBoxTestText.Width = Width / 3.684848;
            PasswordTestText.Width = Width / 3.684848;
            TextBoxComment.Width = Width / 3.684848;

            TextBoxTestDescription.Width = Width / 3.684848;

            buttonCloseWindow.IsEnabled = false;
            ButtonPreConditions.IsEnabled = false;
            StackPanelCoDeEx.Visibility = Visibility.Hidden;
            AddDataGrid.Visibility = Visibility.Hidden;
            ButtonSubmitFromTo.IsEnabled = false;
            ButtonRangschik.IsEnabled = false;
            TextBoxNrFrom.IsEnabled = false;
            TextBoxNrTo.IsEnabled = false;
            ButtonAdd.Visibility = Visibility.Hidden;
            ButtonEdit.Visibility = Visibility.Hidden;
            ButtonDelete.Visibility = Visibility.Hidden;
            ModuleImport.Visibility = Visibility.Hidden;
            CSVImport.Visibility = Visibility.Hidden;
            ModuleWebdriver.Visibility = Visibility.Hidden;
        }

        private static string bestandsnaamgeopend { get; set; }
        private static int intRow { get; set; }

        private static bool verplicht { get; set; }

        private static string machinestatic { get; set; }

        /// <summary>
        ///     Gets or sets the test cases.
        /// </summary>
        /// <value>The test cases.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for testCases
        private static List<TestResultsFactory.TestCases> testCases
        {
            get;
            set;
        }

        private static long testCasesCount { get; set; }

        private void UserInterfaceCustomScale(double customScale)
        {
            // Change scale of window content 
            LayoutTransform =
                new ScaleTransform(customScale, customScale, 0, 0);
            Width *= customScale;
            Height *= customScale;

            // Bring window center screen
            var screenHeight = SystemParameters.PrimaryScreenHeight;
            var screenWidth = SystemParameters.PrimaryScreenWidth;
            Top = (screenHeight - Height) / 2;
            Left = (screenWidth - Width) / 2;
        }

        public static T GetVisualChild<T>(Visual parent) where T : Visual
        {
            var obj = default(T);
            var childrenCount = VisualTreeHelper.GetChildrenCount(parent);
            for (var childIndex = 0; childIndex < childrenCount; ++childIndex)
            {
                var child =
                    (Visual)VisualTreeHelper.GetChild(parent, childIndex);
                obj = child as T;
                if (obj == null)
                    obj = GetVisualChild<T>(child);
                if (obj != null)
                    break;
            }

            return obj;
        }

        public static void SelectRowByIndex(DataGrid dataGrid, int rowIndex)
        {
            if (!dataGrid.SelectionUnit.Equals(DataGridSelectionUnit.FullRow))
                throw new ArgumentException(
                    "The SelectionUnit of the DataGrid must be set to FullRow.");

            if (rowIndex < 0 || rowIndex > dataGrid.Items.Count - 1)
                throw new ArgumentException(
                    string.Format("{0} is an invalid row index.", rowIndex));

            dataGrid.SelectedItems.Clear();
            /* set the SelectedItem property */
            var item = dataGrid.Items[rowIndex]; // = Product X
            dataGrid.SelectedItem = item;

            var row =
                dataGrid.ItemContainerGenerator.ContainerFromIndex(rowIndex) as
                    DataGridRow;
            if (row == null)
            {
                /* bring the data item (Product object) into view
                 * in case it has been virtualized away */
                dataGrid.ScrollIntoView(item);
                row = dataGrid.ItemContainerGenerator.ContainerFromIndex(
                    rowIndex) as DataGridRow;
            }

            //TODO: Retrieve and focus a DataGridCell object
        }

        public DataGridCell GetCell(int row, int column)
        {
            var row1 = GetRow(row);
            if (row1 != null)
            {
                var visualChild = GetVisualChild<DataGridCellsPresenter>(row1);
                if (visualChild != null)
                {
                    var dataGridCell = (DataGridCell)visualChild
                        .ItemContainerGenerator.ContainerFromIndex(column);
                    if (dataGridCell == null)
                    {
                        AddDataGrid.ScrollIntoView(row1,
                            AddDataGrid.Columns[column]);
                        dataGridCell = (DataGridCell)visualChild
                            .ItemContainerGenerator.ContainerFromIndex(column);
                    }

                    return dataGridCell;
                }
            }

            return null;
        }

        /// <summary>Gets the data grid rows.</summary>
        /// <param name="grid">The grid.</param>
        /// <returns>IEnumerable&lt;DataGridRow&gt;.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetDataGridRows
        public IEnumerable<DataGridRow> GetDataGridRows(DataGrid grid)
        {
            foreach (var obj in grid.ItemsSource)
            {
                var dataGridRow =
                    grid.ItemContainerGenerator.ContainerFromItem(obj) as
                        DataGridRow;
                if (dataGridRow != null)
                    yield return dataGridRow;
            }
        }

        /// <summary>Gets the row.</summary>
        /// <param name="index">The index.</param>
        /// <returns>DataGridRow.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetRow
        public DataGridRow GetRow(int index)
        {
            var dataGridRow =
                (DataGridRow)AddDataGrid.ItemContainerGenerator
                    .ContainerFromIndex(index);
            if (dataGridRow == null)
            {
                AddDataGrid.UpdateLayout();
                AddDataGrid.ScrollIntoView(AddDataGrid.Items[index]);
                dataGridRow = (DataGridRow)AddDataGrid.ItemContainerGenerator
                    .ContainerFromIndex(index);
            }

            return dataGridRow;
        }

        /// <summary>
        ///     Handles the MouseDoubleClick event of the AddDataGrid control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="MouseButtonEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AddDataGrid_MouseDoubleClick
        private void AddDataGrid_MouseDoubleClick(object sender,
            MouseButtonEventArgs e)
        {
            //intRow = AddDataGrid.SelectedIndex;
            var intRow = AddDataGrid.Items.IndexOf(AddDataGrid.CurrentItem);

            var test = GetCell(intRow, 0);

            var idNumber = test.ToString().Split(':')[1];

            LabelTestRecord.Content = intRow + 1;

            if (intRow == -1) return;
            var teller = 0;
            var idNummer = string.Empty;
            foreach (var testcase in testCases)
            {
                if (teller == intRow) idNummer = testcase.id;

                teller++;
            }

            HaalGegevensInEdit(idNumber);
        }


        private void HaalGegevensInEdit(string idNumber, bool datagrid = true)
        {
            PasswordTestText.Password = string.Empty;
            var warder = General.GetTestCase(idNumber);

            if (datagrid)
            {
                warder = General.GetTestCase(idNumber);
                ComboboxSelectNr.Text = warder.Rows[0]["testnr"].ToString();
            }
            else
            {
                warder = General.GetTestCaseTestnr(ComboboxSelectNr.Text,
                    TextBoxTestName.Text);
            }

            TextBoxTestId.Text = warder.Rows[0]["id"].ToString();
            TextBoxTestName.Text = warder.Rows[0]["testname"].ToString();
            TextBoxTestNr.Text = warder.Rows[0]["testnr"].ToString();
            TextBoxTestCase.Text = warder.Rows[0]["testcase"].ToString();
            TextBoxTestElementName.Text =
                warder.Rows[0]["testlogicalobjectname"].ToString();
            TextBoxTestElement.Text = warder.Rows[0]["testelement"].ToString();
            ComboBoxAttribute.Text = warder.Rows[0]["testattribute"].ToString();
            ComboBoxAction.Text = warder.Rows[0]["testaction"].ToString();
            TextBoxTestText.Text = warder.Rows[0]["testtext"].ToString();
            TextBoxTestUrl.Text = warder.Rows[0]["testurl"].ToString();
            ComboBoxSwitch.Text = warder.Rows[0]["testswitch"].ToString();
            TextBoxTestDescription.Text =
                warder.Rows[0]["testext_check"].ToString();
            TextBoxComment.Text = warder.Rows[0]["test_comment"].ToString();
            ComboBoxExecute.Text = warder.Rows[0]["testexecution"].ToString();
            ComboBoxInverse.Text = warder.Rows[0]["testinverse"].ToString();
            if (warder.Rows[0]["test_check_strict"].ToString() == "yes")
                CheckBoxStrict.IsChecked = true;
            if (warder.Rows[0]["test_check_strict"].ToString() == "no")
                CheckBoxStrict.IsChecked = false;
            PasswordTestText.Password =
                warder.Rows[0]["test_password"].ToString();

            VerplichtElement();

            if (PasswordTestText.Password != string.Empty)
            {
                CheckBoxPassword.IsChecked = true;
                if (CheckBoxPassword.IsChecked == true)
                {
                    PasswordTestText.Visibility = Visibility.Visible;
                    TextBoxTestText.Visibility = Visibility.Hidden;
                }
                else
                {
                    PasswordTestText.Visibility = Visibility.Hidden;
                    TextBoxTestText.Visibility = Visibility.Visible;
                }
            }
            else
            {
                CheckBoxPassword.IsChecked = false;
            }

            LabelTextBox.Content = CheckBoxPassword.IsChecked == true
                ? "Password:"
                : "Text:";
            if (ComboBoxAction.Text == "checkbox")
            {
                if (TextBoxTestText.Text.ToUpper() == "TRUE")
                    ComboBoxTestText.SelectedIndex = 1;
                else if (TextBoxTestText.Text.ToUpper() == "FALSE")
                    ComboBoxTestText.SelectedIndex = 2;
                else
                    ComboBoxTestText.SelectedIndex = 0;
            }

            if (ComboBoxAction.Text == "switch_to")
            {
                if (TextBoxTestText.Text.ToUpper() == "IFRAME")
                    ComboBoxTestText.SelectedIndex = 1;
                else
                    ComboBoxTestText.SelectedIndex = 0;
            }

            if (ComboBoxAction.Text == "set_value")
            {
                LabelTextBox.Visibility = Visibility.Hidden;
                LabelNameGetValue.Visibility = Visibility.Visible;
                TextBoxSetValueName.Visibility = Visibility.Visible;
                TextBoxSetValueName.Text = TextBoxTestText.Text;
                ComboBoxAttributeSave.Text =
                    warder.Rows[0]["save_attribute"].ToString();
            }
            else
            {
                LabelNameGetValue.Visibility = Visibility.Hidden;
                LabelTextBox.Visibility = Visibility.Visible;
                LabelNameGetValue.Visibility = Visibility.Hidden;
                TextBoxSetValueName.Visibility = Visibility.Hidden;
            }

            if (ComboBoxAction.Text == "get_value")
            {
                VulGetValues(TextBoxTestName.Text);
                LabelNameGetValue.Visibility = Visibility.Hidden;
                LabelTextBox.Content = "Get Value from:";
                LabelTextBox.Visibility = Visibility.Visible;
                ComboBoxGetValue.Text = TextBoxTestText.Text;
            }


            if (ComboBoxAction.Text == "scroll")
            {
                ComboBoxScroll.Visibility = Visibility.Visible;
                ComboBoxScroll.Text = TextBoxTestText.Text;
            }

            ShowCheckbox();

            ButtonAdd.Visibility = Visibility.Visible;
            ButtonEdit.Visibility = Visibility.Visible;
            ButtonDelete.Visibility = Visibility.Visible;

            checkSaveble();
        }


        /// <summary>
        ///     Handles the Click event of the Button control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Button_Click
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            MakeEmpty();
            AddDataGrid.Visibility = Visibility.Hidden;
            ButtonSubmitFromTo.IsEnabled = false;
            ButtonRangschik.IsEnabled = false;
            TextBoxNrFrom.IsEnabled = false;
            TextBoxNrTo.IsEnabled = false;
            AddDataGrid.ItemsSource = null;

            VersionClass.OpenBestand();
            var bestandsnaam = VersionClass.Bestandsnaam;
            if (bestandsnaam != null && bestandsnaam.Length != 0)
            {
                var credits =
                    GeneralFunctionality.Functions.GetCredentials(
                        GeneralFunctionality.Functions._project + @"\" +
                        bestandsnaam);

                LabelUrl.Text = credits.Url;
                textboxApplictionname.Content = bestandsnaam + ".xml";
                bestandsnaamgeopend = bestandsnaam;
                if (bestandsnaam != null)
                {
                    VulLabel();
                    TextBoxTestName.Text = textboxApplictionname.Content
                        .ToString().Substring(
                            0,
                            textboxApplictionname.Content.ToString().Length -
                            4);
                    ButtonAdd.Visibility = Visibility.Visible;
                    ButtonEdit.Visibility = Visibility.Visible;
                    ButtonDelete.Visibility = Visibility.Visible;
                    if (AddDataGrid.ItemsSource != null)
                    {
                        AddDataGrid.Visibility = Visibility.Visible;
                        ButtonSubmitFromTo.IsEnabled = true;
                        ButtonRangschik.IsEnabled = true;
                        ButtonImportModule.IsEnabled = true;
                        TextBoxNrFrom.IsEnabled = true;
                        TextBoxNrTo.IsEnabled = true;
                    }

                    VulGetValues(bestandsnaam);
                    ButtonPreConditions.IsEnabled = true;
                    StackPanelCoDeEx.Visibility = Visibility.Visible;
                    buttonCreateCSV.IsEnabled = true;
                    buttonCreateExcel.IsEnabled = true;
                    buttonImportCSV.IsEnabled = true;
                    ButtonImportModule.IsEnabled = true;
                    ButtonGenWebdriverIo.IsEnabled = true;
                    ButtonGenCypressIO.IsEnabled = true;
                }
            }

            if (bestandsnaam == string.Empty)
            {
                MakeEmpty();
                MessageBox.Show("You need to select a file", "Message",
                    MessageBoxButton.OK, MessageBoxImage.Stop);
            }

            buttonCloseWindow.IsEnabled = true;
        }


        /// <summary>
        ///     Handles the Click event of the ButtonAdd control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonAdd_Click
        private void ButtonAdd_Click(object sender, RoutedEventArgs e)
        {
            MakeEmpty();
            ButtonAdd.Visibility = Visibility.Visible;
            ButtonEdit.Visibility = Visibility.Visible;
            ButtonDelete.Visibility = Visibility.Visible;
        }

        /// <summary>
        ///     Handles the Click event of the buttonCloseWindow control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for buttonCloseWindow_Click
        private void buttonCloseWindow_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        /// <summary>
        ///     Handles the Click event of the ButtonDelete control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonDelete_Click
        private void ButtonDelete_Click(object sender, RoutedEventArgs e)
        {
            var result = MessageBox.Show(
                "Do you really want to delete this test step",
                "Question",
                MessageBoxButton.YesNo,
                MessageBoxImage.Question);
            if (result == MessageBoxResult.Yes)
            {
                DataStorage.TestCases.DeleteTestCase(TextBoxTestId.Text);
                MakeEmpty();
                VulLabel();
            }
        }

        /// <summary>
        ///     Handles the Click event of the ButtonEdit control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonEdit_Click
        private void ButtonEdit_Click(object sender, RoutedEventArgs e)
        {
            if (TextBoxTestName.Text != string.Empty &&
                TextBoxTestNr.Text != string.Empty &&
                TextBoxTestCase.Text != string.Empty)
            {
                var tekst = TextBoxTestText.Text;
                if (ComboBoxAction.Text == "checkbox")
                    tekst = ComboBoxTestText.Text;

                var ganaar = false;

                var bestandsnaam =
                    GeneralFunctionality.Functions.SplitBestand(
                        textboxApplictionname.Content.ToString());

                if (ComboBoxAction.Text == "set_value")
                {
                    VulGetValues(bestandsnaam);
                    var query = string.Empty;

                    query = "SELECT * FROM saved_values WHERE ";
                    query += "saved_values_testname = '" + bestandsnaam +
                             "' AND ";
                    query += "saved_values_name = '" +
                             TextBoxSetValueName.Text + "';";
                    var dt = GenericDataRead.GetData(query);

                    if (dt.Rows.Count > 0)
                    {
                        // Indien variable voor testscript bestaat, update deze uit tabel 'saved_values'
                        var saved_id = dt.Rows[0][0].ToString();
                        query = "UPDATE saved_values SET saved_values_name = '";
                        query += TextBoxSetValueName.Text + "', ";
                        query += "attribute = '";
                        query += ComboBoxAttributeSave.Text + "' ";
                        query += "WHERE ";
                        query += "saved_values_id = '" + saved_id + "';";
                    }
                    else
                    {
                        // anders Voeg de gegevens toe aan de tabel 'saved_values'
                        query =
                            "INSERT INTO saved_values (saved_values_testname, ";
                        query += "saved_values_name, projectid, attribute) ";
                        query += "VALUES('" + bestandsnaam + "', ";
                        query += "'" + TextBoxSetValueName.Text + "', '";
                        query += ComboBoxAttributeSave.Text + "', ";
                        query += GeneralFunctionality.Functions.getProjectID() +
                                 ");";
                    }

                    GenericDataRead.INUPDEL(query);
                }

                var wachtwoord = PasswordTestText.Password;
                if (CheckBoxPassword.IsChecked == false)
                    wachtwoord = string.Empty;

                var checkstrict = "yes";
                if (CheckBoxStrict.IsChecked == false) checkstrict = "no";

                if (TextBoxTestId.Text == string.Empty)
                {
                    DataStorage.TestCases.AddTestCase(
                        TextBoxTestName.Text,
                        TextBoxTestNr.Text,
                        TextBoxTestCase.Text,
                        TextBoxTestElementName.Text,
                        TextBoxTestElement.Text,
                        string.Empty,
                        ComboBoxAttribute.Text,
                        ComboBoxAction.Text,
                        tekst,
                        TextBoxTestUrl.Text,
                        ComboBoxExecute.Text,
                        ComboBoxSwitch.Text,
                        ComboBoxInverse.Text,
                        TextBoxTestDescription.Text.Replace("'", "\'"),
                        TextBoxComment.Text.Replace("'", "\'"),
                        machinestatic,
                        TextBoxTag.Text,
                        TextBoxTestDescription.Text.Replace("'", "\'"),
                        checkstrict,
                        ComboBoxAttributeSave.Text,
                        wachtwoord
                    ); // text_password
                }
                else
                {
                    DataStorage.TestCases.EditTestCase(
                        TextBoxTestId.Text,
                        TextBoxTestName.Text,
                        TextBoxTestNr.Text,
                        TextBoxTestCase.Text,
                        TextBoxTestElementName.Text,
                        TextBoxTestElement.Text,
                        ComboBoxAttribute.Text,
                        ComboBoxAction.Text,
                        TextBoxTestText.Text,
                        TextBoxTestUrl.Text,
                        ComboBoxExecute.Text,
                        ComboBoxSwitch.Text,
                        ComboBoxInverse.Text,
                        TextBoxTestDescription.Text.Replace("'", "\'"),
                        TextBoxComment.Text.Replace("'", "\'"),
                        TextBoxTag.Text,
                        checkstrict,
                        ComboBoxAttributeSave.Text,
                        wachtwoord);
                    ganaar = true;
                }

                VulLabel();
                if (ganaar == false)
                {
                    SelectRowByIndex(AddDataGrid,
                        Convert.ToInt32(testCasesCount) - 1);
                    LabelTestRecord.Content =
                        Convert.ToInt32(testCasesCount) - 1;
                }
                else
                {
                    SelectRowByIndex(AddDataGrid, intRow);
                    LabelTestRecord.Content = intRow + 1;
                }

                MakeEmpty();
                LabelTestRecord.Content = "-";
            }
            else
            {
                MessageBox.Show(
                    "No Data to save!!!\r\nYou have to fill the required fields.",
                    "Message",
                    MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }


        /// <summary>
        ///     Handles the Click event of the ButtonNoExecution control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonNoExecution_Click
        private void ButtonNoExecution_Click(object sender, RoutedEventArgs e)
        {
            var nrs = TextBoxNoExecution.Text.Split('-');
            var begin = nrs[0];
            var eind = nrs[1];

            DataStorage.TestCases.ChangeExecution(begin, eind);
        }

        private void ButtonPreConditions_Click(object sender, RoutedEventArgs e)
        {
            OverallSettings.applicationName =
                (string)textboxApplictionname.Content;
            var preConditions = new PreConditions();
            preConditions.Show();
        }

        private void CheckBoxPassword_Click(object sender, RoutedEventArgs e)
        {
            LabelTextBox.Content = CheckBoxPassword.IsChecked == true
                ? "Password:"
                : "Text:";


            if (CheckBoxPassword.IsChecked == true)
            {
                PasswordTestText.Visibility = Visibility.Visible;
                TextBoxTestText.Visibility = Visibility.Hidden;
            }
            else
            {
                PasswordTestText.Visibility = Visibility.Hidden;
                TextBoxTestText.Visibility = Visibility.Visible;
            }
        }

        /// <summary>
        ///     Checks the saveble.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for checkSaveble
        private void checkSaveble()
        {
            if (TextBoxTestName.Text != string.Empty &&
                TextBoxTestNr.Text != string.Empty
                && TextBoxTestCase.Text != string.Empty
                && TextBoxTestElement.Text != string.Empty
                && ComboBoxAttribute.Text != string.Empty)
            {
                ButtonEdit.IsEnabled = true;
            }
            else
            {
                if (TextBoxTestElement.Text == string.Empty &&
                    TextBoxTestNr.Text != string.Empty)
                {
                    if (elementname.Content == "*Element:" &&
                        Convert.ToInt32(TextBoxTestNr.Text) > 0)
                        ButtonEdit.IsEnabled = false;
                    else
                        ButtonEdit.IsEnabled = true;
                }
            }

            if (TextBoxTestId.Text != string.Empty)
                ButtonDelete.IsEnabled = true;
        }

        private void ComboBoxAction_DropDownClosed(object sender, EventArgs e)
        {
            VerplichtElement();
            ShowCheckbox();
        }

        private void VerplichtElement()
        {
            ComboBoxAttributeSave.Visibility = Visibility.Hidden;
            switch (ComboBoxAction.Text)
            {
                case "click":
                    verplicht = true;
                    break;
                case "sendkeys":
                    verplicht = true;
                    break;
                case "select":
                    verplicht = true;
                    break;
                case "value":
                    verplicht = true;
                    break;
                case "checkbox":
                    verplicht = true;
                    break;
                case "move_to":
                    verplicht = true;
                    break;
                case "upload":
                    verplicht = false;
                    break;
                case "switch to iFrame":
                    verplicht = false;
                    break;
                case "switch to default":
                    verplicht = false;
                    break;
                case "set_value":
                    verplicht = false;
                    ComboBoxAttributeSave.Visibility = Visibility.Visible;
                    break;
                case "get_value":
                    verplicht = false;
                    break;
                case "wait":
                    verplicht = false;
                    break;
                case "scroll":
                    verplicht = false;
                    break;
                case "switch to url":
                    verplicht = false;
                    break;
                case "cmd":
                    verplicht = false;
                    break;
                case "screenshot":
                    verplicht = false;
                    break;
                case "logout":
                    verplicht = false;
                    break;
            }

            if (verplicht)
            {
                elementname.Content = "*Element:";
                ButtonEdit.IsEnabled = false;
                if (TextBoxTestElement.Text.Length > 0)
                    ButtonEdit.IsEnabled = true;
            }
            else
            {
                elementname.Content = "Element:";
                ButtonEdit.IsEnabled = true;
                ButtonEdit.IsEnabled = true;
            }
        }

        /// <summary>
        ///     Handles the DropDownClosed event of the ComboBoxAttribute control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ComboBoxAttribute_DropDownClosed
        private void ComboBoxAttribute_DropDownClosed(object sender,
            EventArgs e)
        {
            checkSaveble();
        }

        private void ComboBoxGetValue_DropDownClosed(object sender, EventArgs e)
        {
            TextBoxTestText.Text = ComboBoxGetValue.Text;
        }

        private void ComboBoxSwitchTo_DropDownClosed(object sender, EventArgs e)
        {
            TextBoxTestText.Text = ComboBoxSwitchTo.Text;
        }

        private void ComboBoxTestText_DropDownClosed(object sender, EventArgs e)
        {
            TextBoxTestText.Text = ComboBoxTestText.Text;
        }

        private void LabelUrl_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
                if (bestandsnaamgeopend != null)
                {
                    var credits =
                        GeneralFunctionality.Functions.GetCredentials(
                            GeneralFunctionality.Functions._project + "\\" +
                            bestandsnaamgeopend);
                    credits.Url = LabelUrl.Text;

                    try
                    {
                        var settingsXML = new XmlWriterSettings();
                        settingsXML.Indent = true;
                        settingsXML.OmitXmlDeclaration = true;
                        settingsXML.IndentChars = "\t";

                        using (var writer =
                            XmlWriter.Create(
                                GeneralFunctionality.Functions
                                    .GetCurrentDir(1) +
                                GeneralFunctionality.Functions._project + "\\" +
                                bestandsnaamgeopend + ".xml",
                                settingsXML))
                        {
                            writer.WriteStartDocument();
                            writer.WriteStartElement("settings");
                            writer.WriteStartElement("start");
                            writer.WriteElementString("url", credits.Url);
                            writer.WriteElementString("application",
                                credits.Application);
                            writer.WriteElementString("page", credits.Page);
                            writer.WriteEndElement();
                            writer.WriteEndElement();
                            writer.WriteEndDocument();
                        }

                        MessageBox.Show(
                            "TestSet settings are saved!!!",
                            "Message",
                            MessageBoxButton.OK,
                            MessageBoxImage.Information);
                    }
                    catch (Exception exception)
                    {
                        General.LogMessage(
                            exception.Message + "\r\n" + exception.Source +
                            "\r\n" + exception.StackTrace, 4);
                    }
                }
        }

        /// <summary>
        ///     Makes the empty.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for MakeEmpty
        private void
            MakeEmpty()
        {
            PanelNamen.Visibility = Visibility.Hidden;
            if (textboxApplictionname.Content != null)
            {
                PanelNamen.Visibility = Visibility.Visible;
                var data = General.GetLaatsteTestCase(
                    textboxApplictionname.Content.ToString().Substring(
                        0,
                        textboxApplictionname.Content.ToString().Length - 4));

                TextBoxTestId.Text = string.Empty;
                TextBoxTestName.Text = textboxApplictionname.Content.ToString()
                    .Substring(
                        0,
                        textboxApplictionname.Content.ToString().Length - 4);
                if (data.Rows.Count > 0)
                {
                    TextBoxTestNr.Text =
                        Convert.ToString(
                            Convert.ToInt32(data.Rows[0][0].ToString()) + 1);
                    TextBoxTestCase.Text = data.Rows[0][1].ToString();
                    buttonCreateCSV.IsEnabled = true;
                    buttonCreateExcel.IsEnabled = true;
                    buttonImportCSV.IsEnabled = true;
                    buttonImportModule.IsEnabled = true;
                }
                else
                {
                    TextBoxTestNr.Text = string.Empty;
                    TextBoxTestCase.Text = string.Empty;
                    buttonCreateCSV.IsEnabled = false;
                    buttonCreateExcel.IsEnabled = false;
                    buttonImportCSV.IsEnabled = false;
                    buttonImportModule.IsEnabled = false;
                }
            }
            else
            {
                PanelNamen.Visibility = Visibility.Hidden;
                TextBoxTestNr.Text = string.Empty;
                TextBoxTestCase.Text = string.Empty;
            }

            TextBoxTestElementName.Text = string.Empty;
            TextBoxTestElement.Text = string.Empty;
            ComboBoxAttribute.SelectedIndex = 0;
            ComboBoxAction.SelectedIndex = -1;
            TextBoxTestText.Text = string.Empty;
            TextBoxTestUrl.Text = string.Empty;
            ComboBoxSwitch.SelectedIndex = -1;
            TextBoxTestDescription.Text = string.Empty;
            ComboBoxExecute.SelectedIndex = 0;
            ComboBoxTestText.SelectedIndex = 0;
            ComboBoxInverse.SelectedIndex = 0;
            CheckBoxStrict.IsChecked = true;
            TextBoxComment.Text = string.Empty;
            ComboBoxSwitchTo.SelectedIndex = 0;
            LabelSwitchTo.Visibility = Visibility.Hidden;
            ButtonDelete.IsEnabled = false;


            PasswordTestText.Password = "";
            PasswordTestText.Visibility = Visibility.Hidden;

            LabelTextBox.Visibility = Visibility.Visible;
            LabelNameSetValue.Visibility = Visibility.Hidden;
            LabelNameGetValue.Visibility = Visibility.Hidden;
            LabelTextBox.Content = "Text:";
            CheckBoxPassword.IsChecked = false;
            LabelTextBox.Content = CheckBoxPassword.IsChecked == true
                ? "Password:"
                : "Text:";
            TextBoxTestText.Visibility = Visibility.Visible;
            CheckBoxPassword.IsChecked = false;
            LabelNameGetValue.Visibility = Visibility.Hidden;
            ComboBoxSwitchTo.Visibility = Visibility.Hidden;
            ComboBoxTestText.Visibility = Visibility.Hidden;
            ComboBoxScroll.Visibility = Visibility.Hidden;
            LabelCheckBox.Visibility = Visibility.Hidden;
            LabelTestRecord.Content = "-";
            ComboBoxGetValue.Visibility = Visibility.Hidden;
        }

        private void ShowCheckbox()
        {
            TextBoxSetValueName.Visibility = Visibility.Hidden;
            ComboBoxTestText.Visibility = Visibility.Hidden;
            TextBoxTestText.Visibility = Visibility.Hidden;
            ComboBoxSwitchTo.Visibility = Visibility.Hidden;
            LabelCheckBox.Visibility = Visibility.Hidden;
            LabelTextBox.Visibility = Visibility.Hidden;
            LabelSwitchTo.Visibility = Visibility.Hidden;
            ComboBoxGetValue.Visibility = Visibility.Hidden;
            ComboBoxScroll.Visibility = Visibility.Hidden;
            LabelNameGetValue.Visibility = Visibility.Hidden;
            LabelNameSetValue.Visibility = Visibility.Hidden;

            switch (ComboBoxAction.Text)
            {
                case "checkbox":
                    LabelCheckBox.Visibility = Visibility.Visible;
                    ComboBoxTestText.Visibility = Visibility.Visible;
                    if (ComboBoxTestText.Text == string.Empty)
                        ComboBoxTestText.SelectedIndex = 2; // 'false'
                    break;
                case "switch_to":
                    LabelSwitchTo.Visibility = Visibility.Visible;
                    ComboBoxSwitchTo.Visibility = Visibility.Visible;
                    break;
                case "set_value":
                    TextBoxSetValueName.Visibility = Visibility.Visible;
                    LabelNameSetValue.Visibility = Visibility.Visible;
                    break;
                case "get_value":
                    LabelTextBox.Content = "Get Value:";
                    LabelTextBox.Visibility = Visibility.Visible;
                    ComboBoxGetValue.Visibility = Visibility.Visible;
                    break;
                case "scroll":
                    LabelTextBox.Content = "Scroll:";
                    LabelTextBox.Visibility = Visibility.Visible;
                    ComboBoxScroll.Visibility = Visibility.Visible;
                    break;
                default:
                    LabelTextBox.Visibility = Visibility.Visible;
                    TextBoxTestText.Visibility = Visibility.Visible;
                    break;
            }

            if (ComboBoxAction.Text == "sendkeys")
            {
                CheckBoxPassword.IsEnabled = true;
                TextBoxTestUrl.IsEnabled = true;
            }
            else
            {
                CheckBoxPassword.IsEnabled = false;
            }
        }

        private void TextBoxSetValueName_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            TextBoxTestText.Text = TextBoxSetValueName.Text;
        }

        /// <summary>
        ///     Handles the TextChanged event of the TextBoxTestCase control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="TextChangedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBoxTestCase_TextChanged
        private void TextBoxTestCase_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            checkSaveble();
        }

        private void TextBoxTestElement_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            checkSaveble();
        }

        private void TextBoxTestNr_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            checkSaveble();
        }

        private void VulGetValues(string bestandsnaam)
        {
            var query = "SELECT saved_values_name FROM saved_values ";
            query += "WHERE projectid = " +
                     GeneralFunctionality.Functions.getProjectID() + ";";
            var dt = GenericDataRead.GetData(query);

            if (dt.Rows.Count > 0)
            {
                ComboBoxGetValue.Items.Clear();
                ComboBoxGetValue.Items.Add("");

                for (var rij = 0; rij < dt.Rows.Count; rij++)
                    ComboBoxGetValue.Items.Add(dt.Rows[rij][0].ToString());
            }
        }

        private void VulLabel()
        {
            testCases = TestResultsFactory.GetTestCases(
                textboxApplictionname.Content.ToString().Substring(
                    0,
                    textboxApplictionname.Content.ToString().Length - 4));
            testCasesCount = TestResultsFactory.GetTestCasesCount(
                textboxApplictionname.Content.ToString().Substring(
                    0,
                    textboxApplictionname.Content.ToString().Length - 4));
            LabelTestSteps.Content = testCasesCount;
            AddDataGrid.ItemsSource = null;
            AddDataGrid.ItemsSource = testCases;
            AddDataGrid.SelectedIndex = -1;
            if (AddDataGrid.Items.Count == 0) TextBoxTestNr.Text = "1";
            PanelNamen.Visibility = Visibility.Visible;
            VulTestNr(testCases);
        }

        private void VulTestNr(List<TestResultsFactory.TestCases> testCases)
        {
            ComboboxSelectNr.Items.Clear();
            for (var x = 0; x < testCases.Count; x++)
                ComboboxSelectNr.Items.Add(testCases[x].testnr);
        }

        private void Window_IsVisibleChanged(object sender,
            DependencyPropertyChangedEventArgs e)
        {
            if (AddDataGrid.SelectedIndex != -1) buttonClear.IsEnabled = true;
            else buttonClear.IsEnabled = false;
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            MakeEmpty();
        }

        private void ComboBoxScroll_DropDownClosed(object sender, EventArgs e)
        {
            TextBoxTestText.Text = ComboBoxScroll.Text;
        }

        private void AddDataGrid_GotFocus(object sender, RoutedEventArgs e)
        {
            intRow = AddDataGrid.Items.IndexOf(AddDataGrid.CurrentItem);

            LabelTestRecord.Content = intRow + 1;
        }

        private void ButtonInsertRow_Click(object sender, RoutedEventArgs e)
        {
            var teller = 1;

            if (TextHowManyRows.Text != string.Empty)
                teller = Convert.ToInt32(TextHowManyRows.Text);
            if (TextInsertRow.Text != string.Empty)
            {
                var row = Convert.ToInt32(TextInsertRow.Text);
                if (row > 0)
                {
                    var query =
                        "UPDATE testcases_selenium SET testnr = testnr + " +
                        teller + " ";
                    query += "WHERE testname = '" + bestandsnaamgeopend +
                             "' AND ";
                    query += "testnr >= " + row + ";";
                    GeneralFunctionality.Functions.InitializeDatabaseConnection(
                        false);
                    GenericDataRead.INUPDEL(query);
                    VulLabel();
                }

                TextInsertRow.Text = string.Empty;
                TextHowManyRows.Text = "1";
                ButtonInsertRow.IsEnabled = false;
            }
        }

        private void TextInsertRow_KeyDown(object sender, KeyEventArgs e)
        {
            if (TextInsertRow.Text != string.Empty)
                ButtonInsertRow.IsEnabled = true;
            else
                ButtonInsertRow.IsEnabled = false;
        }

        private void ComboboxSelectNr_DropDownClosed(object sender, EventArgs e)
        {
            if (ComboboxSelectNr.Text != string.Empty)
            {
                HaalGegevensInEdit(ComboboxSelectNr.Text, false);
                AddDataGrid.SelectedValuePath = "id";
                AddDataGrid.SelectedValue = TextBoxTestId.Text;
                intRow = AddDataGrid.SelectedIndex;
            }
        }

        private void TextBoxNrFrom_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            TextBoxNrFrom.Text =
                Regex.Replace(TextBoxNrFrom.Text, "[^0-9]+", "");
        }

        private void TextBoxNrTo_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            TextBoxNrTo.Text = Regex.Replace(TextBoxNrTo.Text, "[^0-9]+", "");
        }

        private void ButtonSubmitFromTo_Click(object sender, RoutedEventArgs e)
        {
            if (TextBoxNrFrom.Text != string.Empty &&
                TextBoxNrTo.Text != string.Empty)
            {
                var query = "INSERT INTO testcases_selenium";
                query += "(testname, ";
                query += "testnr, ";
                query += "testcase, ";
                query += "testpage, ";
                query += "testlogicalobjectname, ";
                query += "testelement, ";
                query += "testattribute, ";
                query += "testaction, ";
                query += "testtag, ";
                query += "testtext, ";
                query += "testurl, ";
                query += "testswitch, ";
                query += "testdescription, ";
                query += "testexecution, ";
                query += "testext_check, ";
                query += "testinverse, ";
                query += "test_comment, ";
                query += "machinenumber, ";
                query += "test_password) ";
                query += "SELECT ";
                query += "testname, ";
                query += TextBoxNrTo.Text + ", ";
                query += "testcase, ";
                query += "testpage, ";
                query += "testlogicalobjectname, ";
                query += "testelement, ";
                query += "testattribute, ";
                query += "testaction, ";
                query += "testtag, ";
                query += "testtext, ";
                query += "testurl, ";
                query += "testswitch, ";
                query += "testdescription, ";
                query += "testexecution, ";
                query += "testext_check, ";
                query += "testinverse, ";
                query += "test_comment, ";
                query += "machinenumber, ";
                query += "test_password ";
                query += "FROM testcases_selenium ";
                query += "WHERE testname = '" + TextBoxTestName.Text + "' ";
                query += "AND testnr = " + TextBoxNrFrom.Text;

                GenericDataRead.INUPDEL(query);

                TextBoxNrFrom.Text = string.Empty;
                TextBoxNrTo.Text = string.Empty;

                VulLabel();
            }
        }

        private void ButtonCreateCSV_Click(object sender, RoutedEventArgs e)
        {
            using (new PleaseWait())
            {
                foreach (var testCase in testCases)
                    General.CSVfile(
                        GeneralFunctionality.Functions._project,
                        testCase.testname,
                        testCase.testnr.ToString(),
                        testCase.testcase,
                        testCase.testelementname,
                        testCase.testelement,
                        testCase.testattribute,
                        testCase.testaction,
                        testCase.testtext,
                        testCase.testurl,
                        testCase.testexecution,
                        testCase.testswitch,
                        testCase.testinverse,
                        testCase.testcomment,
                        testCase.testcomment,
                        machinestatic,
                        testCase.testtag,
                        testCase.testext_check);
            }

            MessageBox.Show("CSV-file is created", "Create CSV-file",
                MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void ButtonImportCSV_Click(object sender, RoutedEventArgs e)
        {
            CSVImport.Visibility = Visibility.Visible;
        }

        private void readCSVElement(string bestandsnaam, char scheidingsteken,
            int vanaf, int totenmet, int testnr)
        {
            using (var reader = new StreamReader(bestandsnaam))
            {
                var testcase = string.Empty;

                var data = General.GetLaatsteTestBlock(TextBoxTestName.Text);

                if (data.Rows.Count > 0)
                    testnr = Convert.ToInt32(data.Rows[0][0].ToString()) + 101;

                var teller = 0;

                if (TextBoxInsertAfter.Text != string.Empty)
                    testnr = Convert.ToInt32(TextBoxInsertAfter.Text) + 1;
                while (!reader.EndOfStream)
                {
                    var line = reader.ReadLine();
                    if (teller > 0)
                    {
                        var text = string.Empty;
                        var testattribute = string.Empty;

                        var values = line.Split(scheidingsteken);
                        testcase = string.Empty;

                        if (teller <= vanaf && teller >= totenmet)
                        {
                            if (values[8].Length > 0)
                            {
                                text = values[8];
                                testattribute = "id";
                            }
                            else if (values[9].Length > 0)
                            {
                                text = values[9];
                                testattribute = "name";
                            }
                            else
                            {
                                text = values[5];
                                testattribute = "xpath";
                            }

                            DataStorage.TestCases.AddTestCase(
                                textboxApplictionname.Content.ToString()
                                    .Substring(
                                        0,
                                        textboxApplictionname.Content.ToString()
                                            .Length - 4),
                                testnr.ToString(),
                                testcase,
                                string.Empty,
                                text,
                                text,
                                testattribute,
                                string.Empty,
                                values[7],
                                values[2],
                                "yes",
                                string.Empty,
                                "no",
                                string.Empty,
                                string.Empty,
                                string.Empty,
                                values[6],
                                string.Empty,
                                "yes",
                                values[7],
                                string.Empty);

                            testnr++;
                        }
                    }

                    teller++;
                }
            }
        }

        /// <summary>
        ///     Reads the CSV test case.
        /// </summary>
        /// <param name="bestandsnaam">The bestandsnaam.</param>
        /// <param name="scheidingsteken">The scheidingsteken.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for readCSVTestCase
        private void readCSVTestCase(string bestandsnaam, char scheidingsteken,
            int vanaf, int totenmet, int testnr)
        {
            using (var reader = new StreamReader(bestandsnaam))
            {
                var testcase = string.Empty;

                var data = General.GetLaatsteTestBlock(TextBoxTestName.Text);

                if (data.Rows.Count > 0)
                    testnr = Convert.ToInt32(data.Rows[0][0].ToString()) + 101;

                var teller = 0;

                if (TextBoxInsertAfter.Text != string.Empty)
                    testnr = Convert.ToInt32(TextBoxInsertAfter.Text) + 1;
                while (!reader.EndOfStream)
                {
                    var line = reader.ReadLine();
                    if (teller > 0)
                    {
                        var values = line.Split(scheidingsteken);

                        if (Convert.ToInt32(values[1]) >= vanaf &&
                            Convert.ToInt32(values[1]) <= totenmet)
                        {
                            testcase = values[2];
                            var testelementname = values[3];
                            var testelement = values[4];
                            var testattribute = values[5];
                            var testaction = values[6];
                            var testtext = values[7];
                            var testurl = values[8];
                            var testexecution = values[9];
                            var testswitch = values[10];
                            var testinverse = values[11];
                            var testdescription = values[12];
                            var testcomment = values[13];
                            var testmachinecode = values[14];
                            var testtag = values[15];
                            var testcheck = values[16];

                            DataStorage.TestCases.AddTestCase(
                                textboxApplictionname.Content.ToString()
                                    .Substring(
                                        0,
                                        textboxApplictionname.Content.ToString()
                                            .Length - 4),
                                testnr.ToString(),
                                testcase,
                                testelementname,
                                testelement,
                                string.Empty,
                                testattribute,
                                testaction,
                                testtext,
                                testurl,
                                testexecution,
                                testswitch,
                                testinverse,
                                testdescription,
                                testcomment,
                                testmachinecode,
                                testtag,
                                testcheck,
                                "yes",
                                testcheck,
                                string.Empty);

                            testnr++;
                        }
                    }

                    teller++;
                }
            }
        }

        private void readCSVElement_org(string bestandsnaam,
            char scheidingsteken)
        {
            using (var reader = new StreamReader(bestandsnaam))
            {
                var testcase = string.Empty;
                var testnr = 0;

                var data = General.GetLaatsteTestCase(
                    textboxApplictionname.Content.ToString().Substring(
                        0,
                        textboxApplictionname.Content.ToString().Length - 4));

                if (data.Rows.Count > 0)
                    testnr = Convert.ToInt32(data.Rows[0][0].ToString()) + 101;

                var teller = 0;
                while (!reader.EndOfStream)
                {
                    var line = reader.ReadLine();
                    if (teller > 0)
                    {
                        var text = string.Empty;
                        var testattribute = string.Empty;

                        var values = line.Split(scheidingsteken);
                        testcase = string.Empty;

                        if (values[8].Length > 0)
                        {
                            text = values[8];
                            testattribute = "id";
                        }
                        else if (values[9].Length > 0)
                        {
                            text = values[9];
                            testattribute = "name";
                        }
                        else
                        {
                            text = values[5];
                            testattribute = "xpath";
                        }

                        DataStorage.TestCases.AddTestCase(
                            textboxApplictionname.Content.ToString().Substring(
                                0,
                                textboxApplictionname.Content.ToString()
                                    .Length - 4),
                            testnr.ToString(),
                            testcase,
                            string.Empty,
                            text,
                            text,
                            testattribute,
                            string.Empty,
                            values[7],
                            values[2],
                            "yes",
                            string.Empty,
                            "no",
                            string.Empty,
                            string.Empty,
                            string.Empty,
                            values[6],
                            string.Empty,
                            "yes",
                            values[7],
                            string.Empty);
                    }

                    testnr++;
                    teller++;
                }
            }
        }

        private void readCSVTestCase_org(string bestandsnaam,
            char scheidingsteken)
        {
            using (var reader = new StreamReader(bestandsnaam))
            {
                var testcase = string.Empty;

                var data = General.GetLaatsteTestCase(
                    textboxApplictionname.Content.ToString().Substring(
                        0,
                        textboxApplictionname.Content.ToString().Length - 4));

                if (data.Rows.Count > 0)
                {
                    //TextBoxTestNr.Text = Convert.ToString(Convert.ToInt32(data.Rows[0][0].ToString()) + 100);
                    //TextBoxTestCase.Text = data.Rows[0][1].ToString();
                    var testnr = Convert.ToInt32(data.Rows[0][0].ToString()) +
                                 101;


                    var teller = 0;
                    while (!reader.EndOfStream)
                    {
                        var line = reader.ReadLine();

                        if (teller > 0)
                        {
                            var values = line.Split(scheidingsteken);

                            testcase = values[2];
                            var testelementname = values[3];
                            var testelement = values[4];
                            var testattribute = values[5];
                            var testaction = values[6];
                            var testtext = values[7];
                            var testurl = values[8];
                            var testexecution = values[9];
                            var testswitch = values[10];
                            var testinverse = values[11];
                            var testdescription = values[12];
                            var testcomment = values[13];
                            var testmachinecode = values[14];
                            var testtag = values[15];
                            var testcheck = values[16];

                            DataStorage.TestCases.AddTestCase(
                                textboxApplictionname.Content.ToString()
                                    .Substring(
                                        0,
                                        textboxApplictionname.Content.ToString()
                                            .Length - 4),
                                testnr.ToString(),
                                testcase,
                                testelementname,
                                testelement,
                                testelement,
                                testattribute,
                                testaction,
                                testtext,
                                testurl,
                                testexecution,
                                testswitch,
                                testinverse,
                                testdescription,
                                testcomment,
                                testmachinecode,
                                testtag,
                                testcheck,
                                "yes",
                                testcheck,
                                string.Empty);
                        }

                        testnr++;
                        teller++;
                    }
                }
            }
        }

        private void ButtonRangschik_Click(object sender, RoutedEventArgs e)
        {
            var query = "SELECT id FROM testcases_selenium";
            query += " WHERE testname = '" + bestandsnaamgeopend +
                     "' ORDER BY testnr ";

            var dt = GenericDataRead.GetData(query);
            var teller = 1;
            if (dt.Rows.Count > 0)
            {
                for (var row = 0; row < dt.Rows.Count; ++row)
                {
                    var query1 = "UPDATE testcases_selenium SET testnr = " +
                                 teller + " WHERE id = " + dt.Rows[row][0];

                    GenericDataRead.INUPDEL(query1);
                    teller++;
                }

                VulLabel();
            }
        }

        private void TextHowManyRows_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            TextHowManyRows.Text =
                Regex.Replace(TextHowManyRows.Text, "[^0-9]+", "");
        }

        private void ButtonImportModule_Click(object sender, RoutedEventArgs e)
        {
            ModuleImport.Visibility = Visibility.Visible;
        }

        private void ComboBoxModules_DropDownClosed(object sender, EventArgs e)
        {
            if (ComboBoxModules.Text != string.Empty)
            {
                ButtonImportModule.IsEnabled = true;
                ButtonGenWebdriverIo.IsEnabled = true;
                ButtonGenCypressIO.IsEnabled = true;
                TextBoxModuleFrom.Focusable = true;
                TextBoxModuleFrom.Focus();
            }
            else
            {
                //ButtonImportModule.IsEnabled = false;
                ButtonGenWebdriverIo.IsEnabled = false;
                ButtonGenCypressIO.IsEnabled = false;
            }
        }

        private void ButtonCloseModule_Click(object sender, RoutedEventArgs e)
        {
            ModuleImport.Visibility = Visibility.Hidden;
        }

        private void ModuleImport_IsVisibleChanged(object sender,
            DependencyPropertyChangedEventArgs e)
        {
            if (ModuleImport.IsVisible) VulComboBox();
        }

        private void VulComboBox()
        {
            var query =
                "select testblock from testblock group by testblock order by testblock, testnr";

            var dt = GenericDataRead.GetData(query);

            if (dt.Rows.Count > 0)
            {
                ComboBoxModules.Items.Clear();
                ComboBoxModules.Items.Add("");
                for (var row = 0; row < dt.Rows.Count; ++row)
                    ComboBoxModules.Items.Add(dt.Rows[row][0].ToString());
            }
        }

        private void TextBoxModuleFrom_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            TextBoxModuleFrom.Text =
                Regex.Replace(TextBoxModuleFrom.Text, "[^0-9]+", "");
        }

        private void TextBoxModuleTill_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            TextBoxModuleTill.Text =
                Regex.Replace(TextBoxModuleTill.Text, "[^0-9]+", "");
        }

        private void TextBoxInsertAfter_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            TextBoxInsertAfter.Text =
                Regex.Replace(TextBoxInsertAfter.Text, "[^0-9]+", "");
        }

        private void ButtonImportModule_Click_1(object sender,
            RoutedEventArgs e)
        {
            var testnr = zoeklaatstetestnr();
            var dt = zoekmodule();

            if (dt.Rows.Count > 0)
            {
                var aantaltoetevoegen = dt.Rows.Count + 20;

                if (TextBoxInsertAfter.Text != string.Empty)
                {
                    var query =
                        "UPDATE testcases_selenium SET testnr = testnr + " +
                        aantaltoetevoegen;
                    query += " WHERE testname = '" + TextBoxTestName.Text +
                             "' AND testnr > " + TextBoxInsertAfter.Text;
                    GenericDataRead.INUPDEL(query);

                    testnr = Convert.ToInt32(TextBoxInsertAfter.Text) + 10;
                }

                for (var row = 0; row < dt.Rows.Count; ++row)
                {
                    var testcase = dt.Rows[row]["testcase"].ToString();
                    var testelement = dt.Rows[row]["testelement"].ToString();
                    var testelementname = dt.Rows[row]["testlogicalobjectname"]
                        .ToString();
                    var testattribute =
                        dt.Rows[row]["testattribute"].ToString();
                    var testaction = dt.Rows[row]["testaction"].ToString();
                    var testtext = dt.Rows[row]["testtext"].ToString();
                    var testurl = dt.Rows[row]["testurl"].ToString();
                    var testexecution =
                        dt.Rows[row]["testexecution"].ToString();
                    var testswitch = dt.Rows[row]["testswitch"].ToString();
                    var testinverse = dt.Rows[row]["testinverse"].ToString();
                    var testdescription =
                        dt.Rows[row]["testdescription"].ToString();
                    var testcomment = dt.Rows[row]["test_comment"].ToString();
                    var testmachinecode = "";
                    var testtag = dt.Rows[row]["testtag"].ToString();
                    var testcheck = dt.Rows[row]["testext_check"].ToString();

                    DataStorage.TestCases.AddTestCase(
                        textboxApplictionname.Content.ToString().Substring(
                            0,
                            textboxApplictionname.Content.ToString().Length -
                            4),
                        testnr.ToString(),
                        testcase,
                        testelementname,
                        testelement,
                        string.Empty,
                        testattribute,
                        testaction,
                        testtext,
                        testurl,
                        testexecution,
                        testswitch,
                        testinverse,
                        testdescription,
                        testcomment,
                        testmachinecode,
                        testtag,
                        testcheck,
                        "yes",
                        testcheck,
                        string.Empty);

                    testnr++;
                }

                VulLabel();
                ModuleImport.Visibility = Visibility.Hidden;
            }
        }

        private int zoeklaatstetestnr()
        {
            var testnr = 0;
            var data = General.GetLaatsteTestCase(
                textboxApplictionname.Content.ToString().Substring(
                    0,
                    textboxApplictionname.Content.ToString().Length - 4));

            if (data.Rows.Count > 0)
                testnr = Convert.ToInt32(data.Rows[0][0].ToString()) + 10;

            return testnr;
        }

        private DataTable zoekmodule()
        {
            var query = "SELECT * FROM testblock WHERE testblock = '" +
                        ComboBoxModules.Text + "' ";
            // Controleer van tot en met
            if (TextBoxModuleFrom.Text != string.Empty)
                query += " AND testnr >= " + TextBoxModuleFrom.Text;
            if (TextBoxModuleTill.Text != string.Empty)
                query += " AND testnr <= " + TextBoxModuleTill.Text;
            var dt = GenericDataRead.GetData(query);
            return dt;
        }

        private void CSVImport_IsVisibleChanged(object sender,
            DependencyPropertyChangedEventArgs e)
        {
            TextBoxCSVFrom.Text = string.Empty;
            TextBoxCSVTill.Text = string.Empty;
            TextBoxInsertAfterCSV.Text = string.Empty;
            TextBoxCSVFrom.IsEnabled = false;
            TextBoxCSVTill.IsEnabled = false;
            TextBoxInsertAfterCSV.IsEnabled = false;
        }

        private void TextBoxCSVFrom_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            TextBoxCSVFrom.Text =
                Regex.Replace(TextBoxCSVFrom.Text, "[^0-9]+", "");
        }

        private void TextBoxCSVTill_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            TextBoxCSVTill.Text =
                Regex.Replace(TextBoxCSVTill.Text, "[^0-9]+", "");
        }

        private void TextBoxInsertAfterCSV_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            TextBoxInsertAfterCSV.Text =
                Regex.Replace(TextBoxInsertAfterCSV.Text, "[^0-9]+", "");
        }

        private int TotalLines(string filePath)
        {
            using (var r = new StreamReader(filePath))
            {
                var i = 0;
                while (r.ReadLine() != null) i++;
                return i;
            }
        }

        private void ButtonImportCSV1_Click(object sender, RoutedEventArgs e)
        {
            if (TextBoxCSVFrom.Text != string.Empty ||
                TextBoxCSVTill.Text != string.Empty)
            {
                if (Convert.ToInt32(TextBoxCSVTill.Text) <
                    Convert.ToInt32(TextBoxCSVFrom.Text))
                    MessageBox.Show(
                        "The to number must be greater or equal to the from number",
                        "Message",
                        MessageBoxButton.OK, MessageBoxImage.Exclamation);
                else
                    HaalGegevensCSV();
            }
            else
            {
                HaalGegevensCSV();
            }
        }

        private void HaalGegevensCSV()
        {
            using (new PleaseWait())
            {
                var testnr = zoeklaatstetestnr();
                if (testnr == 0) testnr++;
                var bestandsnaam = bestandsnaamVol.Content.ToString();

                var beginTeller = 1;
                var eindTeller = 0;

                eindTeller = TotalLines(bestandsnaam);

                if (TextBoxCSVFrom.Text != string.Empty)
                    beginTeller = Convert.ToInt32(TextBoxCSVFrom.Text);
                if (TextBoxCSVTill.Text != string.Empty)
                    eindTeller = Convert.ToInt32(TextBoxCSVTill.Text);

                var aantaltoetevoegen = eindTeller - beginTeller + 20;
                if (bestandsnaam != null && bestandsnaam.Length != 0)
                    try
                    {
                        if (TextBoxInsertAfterCSV.Text != string.Empty)
                        {
                            var query =
                                "UPDATE testcases_selenium SET testnr = testnr + " +
                                aantaltoetevoegen;
                            query +=
                                " WHERE testname = '" + TextBoxTestName.Text +
                                "' AND testnr > " +
                                TextBoxInsertAfterCSV.Text;
                            GenericDataRead.INUPDEL(query);
                            testnr =
                                Convert.ToInt32(TextBoxInsertAfterCSV.Text) +
                                10;
                        }

                        using (var reader = new StreamReader(bestandsnaam))
                        {
                            var line = reader.ReadLine();
                            var scheidingsteken = ';';
                            var values = line.Split(scheidingsteken);
                            // Met alleen elementen -> 1e project
                            if (values[0] == "project")
                                readCSVElement(bestandsnaam, scheidingsteken,
                                    beginTeller,
                                    eindTeller, testnr);
                            if (values[0] == "testname")
                                readCSVTestCase(bestandsnaam, scheidingsteken,
                                    beginTeller,
                                    eindTeller, testnr);

                            VulLabel();
                        }
                    }
                    catch (Exception exception)
                    {
                        General.LogMessage(
                            exception.Message + "\r\n" + exception.Source +
                            "\r\n" + exception.StackTrace, 4);
                        MessageBox.Show(exception.Message, "Error",
                            MessageBoxButton.OK, MessageBoxImage.Error);
                    }

                VulLabel();
                TextBoxCSVFrom.Text = string.Empty;
                TextBoxCSVTill.Text = string.Empty;
                TextBoxInsertAfterCSV.Text = string.Empty;
                TextBlockCVSFile.Content = string.Empty;
                CSVImport.Visibility = Visibility.Hidden;
            }

            this.Refresh();
        }

        private void ButtonCloseCSV_Click(object sender, RoutedEventArgs e)
        {
            CSVImport.Visibility = Visibility.Hidden;
        }

        private void ButtonSelectCVSFile_Click(object sender, RoutedEventArgs e)
        {
            VersionClass.OpenBestandCSV();
            var bestandsnaam = GeneralFunctionality.Functions.GetCurrentDir(1) +
                               GeneralFunctionality.Functions._project +
                               "\\CSV\\" + VersionClass.Bestandsnaam + ".csv";
            bestandsnaamVol.Content = bestandsnaam;

            if (bestandsnaam != null && bestandsnaam.Length != 0)
            {
                TextBlockCVSFile.Content = VersionClass.Bestandsnaam + "csv";
                TextBoxCSVFrom.IsEnabled = true;
                TextBoxCSVTill.IsEnabled = true;
                if (AddDataGrid.Items.Count > 0)
                {
                    TextBoxInsertAfterCSV.IsEnabled = true;
                    TextBoxInsertAfterCSV.Focusable = true;
                }
                else
                {
                    TextBoxInsertAfterCSV.IsEnabled = false;
                    TextBoxInsertAfterCSV.Focusable = false;
                }

                ButtonImportCSV1.IsEnabled = true;
                TextBoxCSVFrom.Focusable = true;
                TextBoxCSVTill.Focusable = true;

                TextBoxCSVFrom.Focus();
            }
        }

        private void generateJavascript()
        {
            var inhoud = "";
            var iTeller = 0;
            foreach (var testCase in testCases)
                if (testCase.testexecution == "yes")
                {
                    var from1 = 10000000;
                    var till1 = -1;

                    if (TextBoxLoginFrom.Text != string.Empty)
                        if (Convert.ToInt32(TextBoxLoginFrom.Text) > 0)
                            from1 = Convert.ToInt32(TextBoxLoginFrom.Text);

                    if (TextBoxLoginFrom.Text != string.Empty)
                        if (Convert.ToInt32(TextBoxLoginTill.Text) > 0)
                            till1 = Convert.ToInt32(TextBoxLoginTill.Text);

                    if (iTeller == 0)
                    {
                        inhoud += TextBoxImportApp.Text;
                        if (TextBoxImportApp.Text != string.Empty)
                            inhoud += "\r\n";

                        inhoud += TextBoxImportLogin.Text;
                        if (TextBoxImportLogin.Text != string.Empty)
                            inhoud += "\r\n\r\n";

                        inhoud += "describe('" +
                                  GeneralFunctionality.Functions._project +
                                  "_" +
                                  TextBoxTestName.Text + "', function() {\r\n";
                        inhoud += "\tit('" + TextBoxTestName.Text +
                                  "', function() {\r\n";

                        inhoud += "\t\t\r\n";
                        if (TextBoxAppFunction.Text != string.Empty)
                            inhoud += "\t\t" + TextBoxAppFunction.Text +
                                      ";\r\n\r\n";
                        else
                            inhoud += "\t\tbrowser.url('" + LabelUrl.Text +
                                      "');\r\n\r\n";
                    }

                    iTeller++;
                    var content = string.Empty;
                    var controleText =
                        MySqlHelper.EscapeString(testCase.testext_check);
                    var cleaned = controleText.Replace("\n", "\\n")
                        .Replace("\r", "\\r").Replace("\t", "\\t");
                    controleText = cleaned;

                    if (testCase.testexecution == "yes")
                    {
                        if (testCase.testnr ==
                            from1)
                            if (checkboxLoginrows.IsChecked.ToString() ==
                                "True")
                            {
                                inhoud +=
                                    "\t\tLoginPage.formSingleSingOnIsVisible();\r\n";
                                inhoud += "\t\tLoginPage.fillForm();\r\n";
                                inhoud += "\t\tLoginPage.submitForm();\r\n\r\n";
                            }

                        if (testCase.testnr <
                            from1 ||
                            testCase.testnr >
                            till1)
                        {
                            switch (testCase.testattribute.ToUpper())
                            {
                                case "ID":
                                    content =
                                        "//*[@id=\"" + testCase.testelement +
                                        "\"]";
                                    break;

                                case "NAME":
                                    content =
                                        "[name=\"" + testCase.testelement +
                                        "\"]";
                                    break;

                                case "CLASS":
                                    content =
                                        "[class=\"" + testCase.testelement +
                                        "\"]";
                                    break;

                                case "XPATH":
                                    content = testCase.testelement;
                                    break;

                                case "CSSSELECTOR":
                                    content = testCase.testelement;
                                    break;
                            }

                            if (testCase.testelementname != string.Empty)
                                inhoud += "\t\t// " + testCase.testelementname
                                              .Replace("\n", "")
                                              .Replace("\r", "")
                                              .Replace("\t", "") +
                                          "\r\n";

                            if (testCase.testelement != string.Empty)
                                inhoud += "\t\t$('" + content +
                                          "').isExisting();\r\n";


                            if (testCase.testext_check != string.Empty)
                            {
                                if (testCase.testcheckstrict == "no")
                                    inhoud += "\t\texpect($('" + content +
                                              "')).toHaveTextContaining('" +
                                              controleText +
                                              "');\r\n";

                                if (testCase.testcheckstrict == "yes")
                                    inhoud += "\t\texpect($('" + content +
                                              "')).toHaveText('" +
                                              controleText +
                                              "');\r\n";
                            }

                            switch (testCase.testaction.ToUpper())
                            {
                                case "CLICK":
                                    inhoud += waitForEx(content); //+ ";";
                                    inhoud += "\t\t$('" + content +
                                              "').click()\r\n";
                                    break;
                                case "DOUBLECLICK":
                                    inhoud += waitForEx(content);
                                    inhoud += "\t\t$('" + content +
                                              "').doubleClick()\r\n";
                                    break;
                                case "SENDKEYS":
                                    var text = testCase.testtext;
                                    if (testCase.testtext == string.Empty)
                                        text = testCase.testpassword;
                                    inhoud += waitForEx(content);
                                    inhoud +=
                                        "\t\t$('" + content + "').setValue('" +
                                        text + "')\r\n";

                                    if (text.Contains("{ENTER}"))
                                        inhoud += "browser.keys(\"\uE007\");";

                                    if (text.Contains("{TAP}"))
                                        inhoud +=
                                            "\t\tbrowser.setValue('input', ['Tab']);\r\n";

                                    break;
                                case "SELECT":
                                    inhoud += waitForEx(content);
                                    inhoud += "\t\t$('" + content +
                                              "').selectByVisibleText('" +
                                              testCase.testtext + "');\r\n";
                                    break;
                                case "VALUE":
                                    inhoud += waitForEx(content);
                                    inhoud +=
                                        "\t\t$('" + content + "').setValue('" +
                                        testCase.testtext + "');\r\n";
                                    break;
                                case "CHECKBOX":
                                    /*var Bestandsnaam = TextBoxTestName.Text;
                                    IWebElement checkbox1 = null;
                                    var chromePath = GeneralFunctionality.Functions
                                        .GetCurrentDir(0);
                                    var credits = GeneralFunctionality.Functions
                                        .GetCredentials(
                                            GeneralFunctionality.Functions
                                                ._project +
                                            @"\" + Bestandsnaam);
                                    var urlstring = credits.Url;
                                    IWebDriver driver = new ChromeDriver(chromePath)
                                        { Url = urlstring };
    
                                    checkbox1 = HaalElementop(driver,
                                        testCase.testelement,
                                        testCase.testattribute);
    
                                    var oldScript =
                                        checkbox1.GetAttribute(
                                            "checked");*/
                                    var keuze = "false";
                                    var tekst3 =
                                        testCase.testtext.Trim();
                                    if (tekst3.ToUpper() == "TRUE")
                                        keuze = "true";
                                    inhoud += waitForEx(content);
                                    inhoud += "\t\t$('" + content +
                                              "').isSelected(" + keuze +
                                              ");\r\n";
                                    break;
                                case "MOVE TO":
                                    inhoud += waitForEx(content);
                                    inhoud += "\t\t$('" + content +
                                              "').moveTo()\r\n";
                                    break;
                                case "UPLOAD":
                                    var tekst1 =
                                        TekstVervanging(
                                            testCase.testtext.Trim());
                                    var file1 =
                                        tekst1.Replace("\'", "\\'");

                                    var laatste = tekst1.Split('\\');

                                    inhoud +=
                                        "\r\n\t\tconst path = require('path');\r\n";
                                    inhoud +=
                                        "\t\tconst filePath = path.join(__dirname, '/Downloads/" +
                                        laatste[laatste.Length - 1] + "');\r\n";
                                    inhoud +=
                                        "\t\tconst remoteFilePath = browser.uploadFile(filePath);\r\n";
                                    inhoud +=
                                        "\t\t$('" + content +
                                        "').setValue(remoteFilePath);\r\n\r\n";

                                    break;
                                case "SWITCH TO IFRAME":
                                    var detailFrame = content;
                                    inhoud += waitForEx(content);
                                    inhoud +=
                                        "\t\tbrowser.frame(" + detailFrame +
                                        ");\r\n";
                                    break;
                                case "SWITCH TO DEFAULT":
                                    inhoud +=
                                        "\t\tbrowser.SwitchTo().DefaultContent();\r\n";
                                    break;
                                case "SET_VALUE":
                                    break;
                                case "GET_VALUE":
                                    break;
                                case "WAIT":
                                    inhoud += "\t\tbrowser.pause('" +
                                              Convert.ToInt32(testCase
                                                  .testtext) *
                                              1000 + "');\r\n";
                                    ;
                                    break;
                                case "SCROLL":
                                    break;
                                case "SWITCH TO URL":
                                    if (TextBoxSwitchUrl.Text != string.Empty)
                                        CheckBoxSwitch.IsChecked = true;
                                    if (CheckBoxSwitch.IsChecked == true)
                                    {
                                        var voor = string.Empty;
                                        if (TextBoxSwitchUrl.Text !=
                                            string.Empty)
                                            voor = "// ";
                                        inhoud +=
                                            "\t\t// Define <switchTo> in ../pageobjects/App.js file!\r\n";
                                        inhoud +=
                                            "\t\t" + voor + "browser.url('" +
                                            testCase.testurl +
                                            "');\r\n";
                                        if (TextBoxSwitchUrl.Text !=
                                            string.Empty)
                                            inhoud += "\t\t" +
                                                TextBoxSwitchUrl.Text +
                                                ";\r\n\r\n";
                                        else
                                            inhoud +=
                                                "\t\t// App.<url-function in App.js>();\r\n\r\n";
                                    }

                                    break;
                                case "CMD":
                                    break;
                                case "SCREENSHOT":
                                    inhoud += "browser.screenshot();";
                                    break;
                                case "LOGOUT":
                                    break;
                            }
                        }
                    }
                }

            inhoud += "\t})\r\n";
            inhoud += "})\r\n";

            if (Directory.Exists(
                GeneralFunctionality.Functions.GetCurrentDir(2)))
            {
                // Genereer het bestand
                var appendtext =
                    GeneralFunctionality.Functions.GetCurrentDir(2) +
                    "\\" + TextBoxTestName.Text + ".js";
                var sw = File.CreateText(appendtext);
                sw.WriteLine(inhoud);

                sw.Close();
                MessageBox.Show("webdriver.id javasscript created!",
                    "Create javascript", MessageBoxButton.OK,
                    MessageBoxImage.Information);
            }
            else
            {
                MessageBox.Show(
                    GeneralFunctionality.Functions.GetCurrentDir(2) +
                    " is not a valid directory.\r\n\r\nGo to Settings -> Overall Settings and correct this!!!",
                    "Error",
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }

            ModuleWebdriver.Visibility = Visibility.Hidden;
        }

        private void ButtonGenWebdriverIo_Click(object sender,
            RoutedEventArgs e)
        {
            checkboxLoginrows.IsChecked = true;
            MaakVeldenLeeg();

            StackPanelRowsLogin.Visibility = Visibility.Visible;
            LabelHeader.Content = "Generate webdriver.io javascript";
            LabelHomePage.Content = "HomePage App function:";
            TextBoxImportApp.Text = "import App from '../../pageobjects/App'";
            TextBoxImportLogin.Text =
                "import LoginPage from '../../pageobjects/Pages/LoginPage'";
            TextBoxAppFunction.Text = "App.";
            TextBoxSwitchUrl.Text = "App.";

            ModuleWebdriver.Visibility = Visibility.Visible;
        }


        private void MaakVeldenLeeg()
        {
            //TextBoxLoginFrom.Text = string.Empty;
            //TextBoxLoginTill.Text = string.Empty;
            //TextBoxAppFunction.Text = string.Empty;
            //TextBoxSwitchUrl.Text = string.Empty;
        }

        private string waitForDis(string content)
        {
            return "\t\t$('" + content + "').waitForDisplayed();\r\n";
        }

        private string waitForEx(string content, string soort = "get")
        {
            if (LabelHeader.Content.ToString() ==
                "Generate webdriver.io javascript")
                return "\t\t$('" + content + "').waitForExist()\r\n";
            return "\t\tcy." + soort + "('" + content + "').waitForExist()\r\n";
        }

        public static string TekstVervanging(string tekst)
        {
            var tekstGewijzigd = tekst;
            switch (tekst)
            {
                case "=CurrentDate()":
                    tekstGewijzigd = DateTime.Now.Day + "-" +
                                     DateTime.Now.Month + "-" +
                                     DateTime.Now.Year;
                    break;
            }

            return tekstGewijzigd;
        }

        /// <summary>
        ///     Haals the elementop.
        /// </summary>
        /// <param name="driver">The driver.</param>
        /// <param name="testElement">The test element.</param>
        /// <param name="testAttribute">The test attribute.</param>
        /// <returns>IWebElement.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for HaalElementop
        public static IWebElement HaalElementop(IWebDriver driver,
            string testElement, string testAttribute)
        {
            IWebElement webElement = null;

            switch (testAttribute)
            {
                case "ID":
                    // select the drop down list
                    webElement = driver.FindElement(By.Id(testElement));
                    break;
                case "NAME":
                    webElement = driver.FindElement(By.Name(testElement));
                    break;
                case "CLASS":
                    webElement = driver.FindElement(By.ClassName(testElement));
                    break;
                case "XPATH":
                    webElement = driver.FindElement(By.XPath(testElement));
                    break;
                case "CSSSELECTOR":
                    webElement =
                        driver.FindElement(By.CssSelector(testElement));
                    break;
            }

            return webElement;
        }

        private void CheckboxLoginrows_Click(object sender, RoutedEventArgs e)
        {
            if (checkboxLoginrows.IsChecked == true)
            {
                TextBoxImportLogin.Text =
                    "import LoginPage from '../../pageobjects/Pages/LoginPage'";
                StackPanelRowsLogin.Visibility = Visibility.Visible;
            }
            else
            {
                TextBoxImportLogin.Text =
                    "";
                StackPanelRowsLogin.Visibility = Visibility.Hidden;
                ButtonWebdriverGenerate.IsEnabled = true;
            }
        }

        private void TextBoxLoginTill_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            TextBoxLoginTill.Text =
                Regex.Replace(TextBoxLoginTill.Text, "[^0-9]+", "");
            if (TextBoxLoginFrom.Text != string.Empty &&
                TextBoxLoginTill.Text != string.Empty)
                ButtonWebdriverGenerate.IsEnabled = true;
            else
                ButtonWebdriverGenerate.IsEnabled = false;
        }

        private void TextBoxLoginFrom_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            TextBoxLoginFrom.Text =
                Regex.Replace(TextBoxLoginFrom.Text, "[^0-9]+", "");
            if (TextBoxLoginFrom.Text != string.Empty &&
                TextBoxLoginTill.Text != string.Empty)
                ButtonWebdriverGenerate.IsEnabled = true;
            else
                ButtonWebdriverGenerate.IsEnabled = false;
        }

        private void ButtonCloseWebdriver_Click(object sender,
            RoutedEventArgs e)
        {
            ModuleWebdriver.Visibility = Visibility.Hidden;
        }

        private void ButtonWebdriverGenerate_Click(object sender,
            RoutedEventArgs e)
        {
            if (LabelHeader.Content.ToString() ==
                "Generate webdriver.io javascript") generateJavascript();
            if (LabelHeader.Content.ToString() ==
                "Generate Cypress.io javascript") generateJavascriptCypress();
        }

        private void ButtonWebdriverMaakleeg_Click(object sender,
            RoutedEventArgs e)
        {
            MaakVeldenLeeg();
        }

        private void SearchButton_Click(object sender, RoutedEventArgs e)
        {
            var sSQL = "SELECT id FROM testcases_selenium WHERE testname = '" +
                       TextBoxTestName.Text +
                       "' AND testelement LIKE '%" + SearchTextBox.Text + "%';";

            var dt = GenericDataRead.GetData(sSQL);
            if (dt.Rows.Count > 0)
            {
                var testid = dt.Rows[0][0].ToString();

                testCases = TestResultsFactory.GetTestCase(
                    textboxApplictionname.Content.ToString().Substring(
                        0,
                        textboxApplictionname.Content.ToString().Length - 4),
                    SearchTextBox.Text);

                AddDataGrid.ItemsSource = null;
                AddDataGrid.ItemsSource = testCases;
            }
        }

        private void ClearSearchButton_Click(object sender, RoutedEventArgs e)
        {
            SearchTextBox.Text = string.Empty;
            testCases = TestResultsFactory.GetTestCases(
                textboxApplictionname.Content.ToString().Substring(
                    0,
                    textboxApplictionname.Content.ToString().Length - 4));

            AddDataGrid.ItemsSource = null;
            AddDataGrid.ItemsSource = testCases;
        }

        private void ButtonCreateExcel_Click(object sender, RoutedEventArgs e)
        {
            using (new PleaseWait())
            {
                var query =
                    "SELECT * FROM testcases_selenium ";
                query += "WHERE testname = '" + bestandsnaamgeopend +
                         "' ORDER BY testnr;";
                var dt = GenericDataRead.GetData(query);

                General.exportToExcel(dt,
                    GeneralFunctionality.Functions._project,
                    TextBoxTestName.Text);
            }

            MessageBox.Show("Excel-file is created", "Create Excel-file",
                MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void TextBoxSwitchUrl_TextChanged(object sender,
            TextChangedEventArgs e)
        {
            if (TextBoxSwitchUrl.Text == string.Empty)
            {
                CheckBoxSwitch.Visibility = Visibility.Visible;
            }
            else
            {
                if (CheckBoxSwitch != null)
                    CheckBoxSwitch.Visibility = Visibility.Hidden;
            }
        }

        private void ButtonGenCypressIO_Click(object sender, RoutedEventArgs e)
        {
            checkboxLoginrows.IsChecked = true;
            MaakVeldenLeeg();

            StackPanelRowsLogin.Visibility = Visibility.Visible;

            LabelHeader.Content = "Generate Cypress.io javascript";
            LabelHomePage.Content = "URL 'Nickname':";
            //TextBoxImportApp.Text = "";
            TextBoxImportLogin.Text =
                "import LoginUVT from '../../../support/LoginUVT'";
            //TextBoxAppFunction.Text = "";
            //TextBoxSwitchUrl.Text = "";
            ModuleWebdriver.Visibility = Visibility.Visible;
        }

        private void generateJavascriptCypress()
        {
            var inhoud = "";
            var iTeller = 0;
            foreach (var testCase in testCases)
                if (testCase.testexecution == "yes")
                {
                    var from1 = 10000000;
                    var till1 = -1;

                    if (TextBoxLoginFrom.Text != string.Empty)
                        if (Convert.ToInt32(TextBoxLoginFrom.Text) > 0)
                            from1 = Convert.ToInt32(TextBoxLoginFrom.Text);

                    if (TextBoxLoginFrom.Text != string.Empty)
                        if (Convert.ToInt32(TextBoxLoginTill.Text) > 0)
                            till1 = Convert.ToInt32(TextBoxLoginTill.Text);

                    if (iTeller == 0)
                    {
                        inhoud += TextBoxImportApp.Text;
                        if (TextBoxImportApp.Text != string.Empty)
                            inhoud += "\r\n";

                        inhoud += TextBoxImportLogin.Text;
                        if (TextBoxImportLogin.Text != string.Empty)
                            inhoud += "\r\n\r\n";

                        inhoud += "describe('" +
                                  GeneralFunctionality.Functions._project +
                                  "_" +
                                  TextBoxTestName.Text + "', () => {\r\n";
                        inhoud += "\tit('" + TextBoxTestName.Text +
                                  "', () => {\r\n";

                        //inhoud += "\t\t\r\n";

                        if (TextBoxSwitchUrl.Text != string.Empty)
                        {
                            inhoud += "\r\n\t\tcy.step('Visit the URL')\r\n";
                            inhoud += "\t\tcy.visit('" +
                                      TextBoxSwitchUrl.Text + "')\r\n";
                        }
                    }

                    iTeller++;
                    var content = string.Empty;
                    var controleText =
                        MySqlHelper.EscapeString(testCase.testext_check);
                    var cleaned = controleText.Replace("\n", "\\n")
                        .Replace("\r", "\\r").Replace("\t", "\\t");
                    controleText = cleaned;

                    if (testCase.testexecution == "yes")
                    {
                        if (testCase.testnr < from1)
                        {
                            switch (testCase.testattribute.ToUpper())
                            {
                                case "ID":
                                    content = "#" + testCase.testelement;
                                    break;

                                case "NAME":
                                    content =
                                        "[name=\"" + testCase.testelement +
                                        "\"]";
                                    break;

                                case "CLASS":
                                    content = "." + testCase.testelement;
                                    break;

                                case "XPATH":
                                    content = testCase.testelement;
                                    break;

                                case "CSSSELECTOR":
                                    content = testCase.testelement;
                                    break;
                            }

                            var soort = "get";
                            if (testCase.testattribute.ToUpper() == "XPATH")
                                soort = "xpath";

                            inhoud += "\r\n\t\tcy.step('Click on the element " + testCase.testelementname + "')\r\n";
                            inhoud +=
                                "\t\tcy." + soort + "('" + content +
                                "').click({force: true})\r\n";
                        }

                        if (testCase.testnr == from1)
                            if (checkboxLoginrows.IsChecked == true)
                            {
                                inhoud += "\r\n\t\tcy.step('Login via SSO')\r\n";
                                inhoud +=
                                    "\t\tLoginUVT.login('" +
                                    TextBoxAppFunction.Text + "', '0')\r\n";
                            }

                        if (testCase.testnr > till1)
                        {
                            switch (testCase.testattribute.ToUpper())
                            {
                                case "ID":
                                    content = "#" + testCase.testelement;
                                    break;

                                case "NAME":
                                    content =
                                        "[name=\"" + testCase.testelement +
                                        "\"]";
                                    break;

                                case "CLASS":
                                    content = "." + testCase.testelement;
                                    break;

                                case "XPATH":
                                    content = testCase.testelement;
                                    break;

                                case "CSSSELECTOR":
                                    content = testCase.testelement;
                                    break;
                            }

                            var soort = "get";
                            if (testCase.testattribute.ToUpper() == "XPATH")
                                soort = "xpath";

                            //inhoud += "\r\n\t\tcy.step('')\r\n";

                            var vergelijking = "contain";
                            var vergelijking1 = "include";


                            //if (CheckBoxStrict.IsChecked == true)
                            //{
                            //    vergelijking = "equal"; 
                            //    vergelijking1 = "equal";
                           // }

                            if (testCase.testelement != string.Empty)

                                if (testCase.testext_check != string.Empty)
                                {
                                    inhoud += "\r\n\t\tcy.step('Check the text of the element "+ testCase.testelementname+"')\r\n";
                                    inhoud += "\t\tif (cy." + soort + "('" +
                                              content +
                                              "').should('have.prop', 'tagName') === 'INPUT') {\r\n";
                                    inhoud +=
                                        "\t\t\tcy." + soort + "('" + content +
                                        "').invoke('attr', 'value').should('" +
                                        vergelijking + "', '" +
                                        controleText + "')\r\n\t\t}\r\n";
                                    inhoud += "\t\telse {\r\n";
                                    inhoud +=
                                        "\t\t\tcy." + soort + "('" + content +
                                        "').should($div => {\r\n\t\t\texpect($div.text().trim())." +
                                        vergelijking1 + "('" +
                                        controleText + "')})\r\n\t\t}\r\n\r\n";
                                }
                            
                            switch (testCase.testaction.ToUpper())
                            {
                                case "CLICK":
                                    inhoud += "\t\tcy.step('Click on the element " + testCase.testelementname + "')\r\n";
                                    inhoud +=
                                        "\t\tcy." + soort + "('" + content +
                                        "').click({force: true})\r\n\r\n";
                                    break;
                                case "DOUBLECLICK":

                                    inhoud += "\t\tcy.step('Double click on the element "+testCase.testelementname+"')\r\n";
                                    inhoud +=
                                        "\t\tcy." + soort + "('" + content +
                                        "').doubleClick()\r\n\r\n";
                                    break;
                                case "SENDKEYS":
                                    var text = testCase.testtext;
                                    if (testCase.testtext == string.Empty)
                                        text = testCase.testpassword;

                                    if (text == "{ENTER}")
                                    {
                                        inhoud += "\t\tcy.step('Sendkey Enter to "+testCase.testelementname+"')\r\n";
                                        inhoud +=
                                            "\t\tcy." + soort + "('" + content +
                                            "').type('" +
                                            text.ToLower() + "')\r\n\r\n";
                                    }
                                    else
                                    {
                                        inhoud += "\t\tcy.step('Sendkeys: " + text +" to "+testCase.testelementname+ "')\r\n";
                                        inhoud +=
                                            "\t\tcy." + soort + "('" + content +
                                            "').clear()\r\n";
                                        inhoud +=
                                            "\t\tcy." + soort + "('" + content +
                                            "').type('" +
                                            text + "')\r\n\r\n";
                                    }
                                    break;
                                case "SELECT":
                                    inhoud += "\t\tcy.step('Select: " + testCase.testtext +" from " +testCase.testelementname+ "')\r\n";

                                    if (testCase.testtext.Contains("|"))
                                    {
                                        var split1 =
                                            testCase.testtext.Split('|');

                                        inhoud +=
                                            "\t\tcy." + soort + "('" + content +
                                            "').select([";
                                        foreach (var waarde in split1)
                                        {
                                            inhoud += "'" + waarde + "', ";
                                        }

                                        var inh = inhoud.Substring(0, inhoud.Length - 2);
                                        inhoud = inh + "])\r\n\r\n";
                                    }
                                    else
                                    {
                                        inhoud +=
                                            "\t\tcy." + soort + "('" + content +
                                            "').select('" +
                                            testCase.testtext + "')\r\n\r\n";
                                    }

                                    break;
                                case "VALUE":
                                    inhoud += "\t\tcy.step('Set value: '" + testCase.testtext +" to " +testCase.testelementname+ "')\r\n";
                                    inhoud +=
                                        "\t\tcy." + soort + "('" + content +
                                        "').setValue('" +
                                        testCase.testtext + "')\r\n\r\n";
                                    break;
                                case "CHECKBOX":
                                    var keuze = "false";
                                    var tekst3 =
                                        testCase.testtext.Trim();
                                    if (tekst3.ToUpper() == "TRUE")
                                        keuze = "true";
                                    inhoud += "\t\tcy.step('Set checkbox "+testCase.testelementname +" to: '" + keuze + "')\r\n";
                                    inhoud += waitForEx(content, soort);
                                    inhoud +=
                                        "\t\tcy." + soort + "('" + content +
                                        "').isSelected(" + keuze + ")\r\n\r\n";
                                    break;
                                case "MOVE TO":
                                    inhoud += "\t\tcy.step('Move to element " +testCase.testelementname+ "')\r\n";
                                    inhoud +=
                                        "\t\tcy." + soort + "('" + content +
                                        "').scrollTo('center')\r\n\r\n";
                                    break;
                                case "UPLOAD":
                                    var tekst1 =
                                        TekstVervanging(
                                            testCase.testtext.Trim());
                                    var file1 =
                                        tekst1.Replace("\'", "\\'");

                                    var laatste = tekst1.Split('\\');

                                    inhoud += "\t\tcy.step('Select: upload a file')\r\n";
                                    inhoud +=
                                        "\r\n\t\tconst path = require('path');\r\n";
                                    inhoud +=
                                        "\t\tconst filePath = path.join(__dirname, '/Downloads/" +
                                        laatste[laatste.Length - 1] + "')\r\n";
                                    inhoud +=
                                        "\t\tconst remoteFilePath = browser.uploadFile(filePath);\r\n";
                                    inhoud +=
                                        "\t\tcy." + soort + "('" + content +
                                        "').setValue(remoteFilePath)\r\n\r\n";

                                    break;
                                case "SWITCH TO IFRAME":
                                    var detailFrame = content;
                                    //inhoud += waitForEx(content, soort);
                                    inhoud +=
                                        "\t\tbrowser.frame(" + detailFrame +
                                        ")\r\n";
                                    break;
                                case "SWITCH TO DEFAULT":
                                    inhoud +=
                                        "\t\tbrowser.SwitchTo().DefaultContent()\r\n";
                                    break;
                                case "SET_VALUE":
                                    break;
                                case "GET_VALUE":
                                    break;
                                case "WAIT":
                                    inhoud += "\t\tcy.step('Wait for " + testCase.testtext + " seconds')\r\n";
                                    inhoud += "\t\tcy.wait(" +
                                              Convert.ToInt32(testCase
                                                  .testtext) *
                                              1000 + ")\r\n\r\n";
                                    break;
                                case "SCROLL":
                                    inhoud += "\t\tcy.step('Scroll to: '" + testCase.testtext + "')\r\n";
                                    inhoud +=
                                        "\t\tcy.scrollTo('" +
                                        testCase.testtext +
                                        "')\r\n\r\n";
                                    break;
                                case "SWITCH TO URL":
                                    if (TextBoxSwitchUrl.Text != string.Empty)
                                    {
                                        inhoud += "\t\tcy.step('Visit the URL')\r\n";
                                        inhoud += "\t\tcy.visit('" +
                                                  TextBoxSwitchUrl.Text + "')\r\n";
                                    }

                                    break;
                                case "CMD":
                                    break;
                                case "SCREENSHOT":
                                    inhoud += "browser.screenshot();";
                                    break;
                                case "LOGOUT":
                                    break;
                                default:
                                    inhoud += "\t\tcy.step('Check if the element exists')\r\n";
                                    inhoud +=
                                        "\t\tcy." + soort + "('" + content +
                                        "').should('exist')\r\n\r\n";
                                    break;
                            }
                        }
                    }
                }

            inhoud += "\t})\r\n";
            inhoud += "})\r\n";

            if (Directory.Exists(
                GeneralFunctionality.Functions.GetCurrentDir(3)))
            {
                // Genereer het bestand
                var appendtext =
                    GeneralFunctionality.Functions.GetCurrentDir(3) +
                    "\\" + TextBoxTestName.Text + ".spec.js";
                var sw = File.CreateText(appendtext);
                sw.WriteLine(inhoud);

                sw.Close();
                MessageBox.Show("webdriver.id javasscript created!",
                    "Create javascript", MessageBoxButton.OK,
                    MessageBoxImage.Information);
            }
            else
            {
                MessageBox.Show(
                    GeneralFunctionality.Functions.GetCurrentDir(3) +
                    " is not a valid directory.\r\n\r\nGo to Settings -> Overall Settings and correct this!!!",
                    "Error",
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }

            ModuleWebdriver.Visibility = Visibility.Hidden;
        }

        private void ButtonXpath_Click(object sender, RoutedEventArgs e)
        {
            var sqlConn =
                "SELECT test_element_xpath ";
            sqlConn += "FROM testcases_selenium WHERE testname = '" +
                       TextBoxTestName.Text +
                       "' AND testnr = " + TextBoxTestNr.Text;
            sqlConn += " ORDER BY testname, testnr";
            var dt = GenericDataRead.GetData(sqlConn);

            if (dt.Rows.Count > 0)
                TextBoxTestElement.Text = dt.Rows[0][0].ToString();
        }

        private void CopyRegels_Click(object sender, RoutedEventArgs e)
        {
            var updateCopyDataBulk =
                new UpdateCopyDataBulk(bestandsnaamgeopend);
            updateCopyDataBulk.ShowDialog();
            VulLabel();
        }


        private void DeleteRegels_Click(object sender, RoutedEventArgs e)
        {
            var deleteBulkData = new DeleteBulkData(bestandsnaamgeopend);
            deleteBulkData.ShowDialog();
            VulLabel();
        }

        private void ExecuteRegels_OnClickRegels_Click(object sender,
            RoutedEventArgs e)
        {
            var changeExecuteBulkData =
                new ChangeExecuteBulkData(bestandsnaamgeopend);
            changeExecuteBulkData.ShowDialog();
            VulLabel();
        }
    }
}