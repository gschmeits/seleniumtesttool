// ***********************************************************************
// Assembly         : WPFTestResults
// Author           : G.H.M.H. Schmeits
// Created          : 01-18-2018
//
// Last Modified By : G.H.M.H. Schmeits
// Last Modified On : 08-17-2018
// ***********************************************************************
// <copyright file="TestCases.xaml.cs" company="SCHMEITS">
//     Copyright ©  2018
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml;
using DataStorage;
using GeneralFunctionality;
using DataGrid = System.Windows.Controls.DataGrid;
using DataGridCell = System.Windows.Controls.DataGridCell;
using KeyEventArgs = System.Windows.Input.KeyEventArgs;
using MessageBox = System.Windows.MessageBox;

namespace WPFTestResults
{
    /// <summary>
    ///     Class TestCases.
    /// </summary>
    /// <seealso cref="System.Windows.Window" />
    /// <seealso cref="System.Windows.Markup.IComponentConnector" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for TestCases
    public partial class TestCases : Window
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="TestCases" /> class.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public TestCases()
        {
            InitializeComponent();
            Title = "Selenium Test Tool - Test Steps (Version: " + VersionClass.GetRunningVersion() + ")";
            MakeEmpty();

            machinestatic = InloggerData.MachineCode;
            intRow = -1;

            // ReSharper disable once PossibleLossOfFraction
            Width = Screen.PrimaryScreen.Bounds.Width * 0.95;
            // ReSharper disable once PossibleLossOfFraction
            Height = Screen.PrimaryScreen.Bounds.Height * 0.90;

            //MessageBox.Show("Width: " + Width);
            //MessageBox.Show("Height: " + Height);
            checkSaveble();

            TextBoxTestName.Width = Width / 3.684848;
            TextBoxTestCase.Width = Width / 3.684848;
            //TextBoxTestElement.Width = Width / 2.5;
            TextBoxTestElementName.Width = Width / 3.684848;

            TextBoxTestText.Width = Width / 3.684848;
            PasswordTestText.Width = Width / 3.684848;
            TextBoxComment.Width = Width / 3.684848;

            TextBoxTestDescription.Width = Width / 3.684848;

            buttonCloseWindow.IsEnabled = false;
            ButtonPreConditions.IsEnabled = false;
            AddDataGrid.Visibility = Visibility.Hidden;
            ButtonAdd.Visibility = Visibility.Hidden;
            ButtonEdit.Visibility = Visibility.Hidden;
            ButtonDelete.Visibility = Visibility.Hidden;
        }

        private static string bestandsnaamgeopend { get; set; }
        private static int intRow { get; set; }

        private static Boolean verplicht { get; set; }

        private static string machinestatic { get; set; }

        /// <summary>
        ///     Gets or sets the test cases.
        /// </summary>
        /// <value>The test cases.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for testCases
        private static List<TestResultsFactory.TestCases> testCases { get; set; }

        private static long testCasesCount { get; set; }

        public static T GetVisualChild<T>(Visual parent) where T : Visual
        {
            var obj = default(T);
            var childrenCount = VisualTreeHelper.GetChildrenCount(parent);
            for (var childIndex = 0; childIndex < childrenCount; ++childIndex)
            {
                var child = (Visual) VisualTreeHelper.GetChild(parent, childIndex);
                obj = child as T;
                if (obj == null)
                    obj = GetVisualChild<T>(child);
                if (obj != null)
                    break;
            }

            return obj;
        }

        public static void SelectRowByIndex(DataGrid dataGrid, int rowIndex)
        {
            if (!dataGrid.SelectionUnit.Equals(DataGridSelectionUnit.FullRow))
                throw new ArgumentException("The SelectionUnit of the DataGrid must be set to FullRow.");

            if (rowIndex < 0 || rowIndex > dataGrid.Items.Count - 1)
                throw new ArgumentException(string.Format("{0} is an invalid row index.", rowIndex));

            dataGrid.SelectedItems.Clear();
            /* set the SelectedItem property */
            var item = dataGrid.Items[rowIndex]; // = Product X
            dataGrid.SelectedItem = item;

            var row = dataGrid.ItemContainerGenerator.ContainerFromIndex(rowIndex) as DataGridRow;
            if (row == null)
            {
                /* bring the data item (Product object) into view
                 * in case it has been virtualized away */
                dataGrid.ScrollIntoView(item);
                row = dataGrid.ItemContainerGenerator.ContainerFromIndex(rowIndex) as DataGridRow;
            }

            //TODO: Retrieve and focus a DataGridCell object
        }

        public DataGridCell GetCell(int row, int column)
        {
            var row1 = GetRow(row);
            if (row1 != null)
            {
                var visualChild = GetVisualChild<DataGridCellsPresenter>(row1);
                if (visualChild != null)
                {
                    var dataGridCell = (DataGridCell) visualChild.ItemContainerGenerator.ContainerFromIndex(column);
                    if (dataGridCell == null)
                    {
                        AddDataGrid.ScrollIntoView(row1, AddDataGrid.Columns[column]);
                        dataGridCell = (DataGridCell) visualChild.ItemContainerGenerator.ContainerFromIndex(column);
                    }

                    return dataGridCell;
                }
            }

            return null;
        }

        /// <summary>Gets the data grid rows.</summary>
        /// <param name="grid">The grid.</param>
        /// <returns>IEnumerable&lt;DataGridRow&gt;.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetDataGridRows
        public IEnumerable<DataGridRow> GetDataGridRows(DataGrid grid)
        {
            foreach (var obj in grid.ItemsSource)
            {
                var dataGridRow = grid.ItemContainerGenerator.ContainerFromItem(obj) as DataGridRow;
                if (dataGridRow != null)
                    yield return dataGridRow;
            }
        }

        /// <summary>Gets the row.</summary>
        /// <param name="index">The index.</param>
        /// <returns>DataGridRow.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetRow
        public DataGridRow GetRow(int index)
        {
            var dataGridRow = (DataGridRow) AddDataGrid.ItemContainerGenerator.ContainerFromIndex(index);
            if (dataGridRow == null)
            {
                AddDataGrid.UpdateLayout();
                AddDataGrid.ScrollIntoView(AddDataGrid.Items[index]);
                dataGridRow = (DataGridRow) AddDataGrid.ItemContainerGenerator.ContainerFromIndex(index);
            }

            return dataGridRow;
        }

        /// <summary>
        ///     Handles the MouseDoubleClick event of the AddDataGrid control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="MouseButtonEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AddDataGrid_MouseDoubleClick
        private void AddDataGrid_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            //intRow = AddDataGrid.SelectedIndex;
            var intRow = AddDataGrid.Items.IndexOf(AddDataGrid.CurrentItem);

            var test = GetCell(intRow, 0);

            var idNumber = test.ToString().Split(':')[1];

            LabelTestRecord.Content = intRow + 1;

            if (intRow == -1) return;
            var teller = 0;
            var idNummer = string.Empty;
            foreach (var testcase in testCases)
            {
                if (teller == intRow) idNummer = testcase.id;

                teller++;
            }
            HaalGegevensInEdit(idNumber);
        }


        private void HaalGegevensInEdit(string idNumber, Boolean datagrid = true)
        {
            var warder = General.GetTestCase(idNumber);

            if (datagrid == true)
            {
                warder = General.GetTestCase(idNumber);
                ComboboxSelectNr.Text = warder.Rows[0]["testnr"].ToString();

            }
            else
            {
                warder = General.GetTestCaseTestnr(ComboboxSelectNr.Text, TextBoxTestName.Text);
            }

            TextBoxTestId.Text = warder.Rows[0]["id"].ToString();
            TextBoxTestName.Text = warder.Rows[0]["testname"].ToString();
            TextBoxTestNr.Text = warder.Rows[0]["testnr"].ToString();
            TextBoxTestCase.Text = warder.Rows[0]["testcase"].ToString();
            TextBoxTestElementName.Text = warder.Rows[0]["testlogicalobjectname"].ToString();
            TextBoxTestElement.Text = warder.Rows[0]["testelement"].ToString();
            ComboBoxAttribute.Text = warder.Rows[0]["testattribute"].ToString();
            ComboBoxAction.Text = warder.Rows[0]["testaction"].ToString();
            TextBoxTestText.Text = warder.Rows[0]["testtext"].ToString();
            TextBoxTestUrl.Text = warder.Rows[0]["testurl"].ToString();
            ComboBoxSwitch.Text = warder.Rows[0]["testswitch"].ToString();
            TextBoxTestDescription.Text = warder.Rows[0]["testext_check"].ToString();
            TextBoxComment.Text = warder.Rows[0]["test_comment"].ToString();
            ComboBoxExecute.Text = warder.Rows[0]["testexecution"].ToString();
            ComboBoxInverse.Text = warder.Rows[0]["testinverse"].ToString();
            PasswordTestText.Password = warder.Rows[0]["test_password"].ToString();

            VerplichtElement();

            if (PasswordTestText.Password != string.Empty)
            {
                CheckBoxPassword.IsChecked = true;
                if (CheckBoxPassword.IsChecked == true)
                {
                    PasswordTestText.Visibility = Visibility.Visible;
                    TextBoxTestText.Visibility = Visibility.Hidden;
                }
                else
                {
                    PasswordTestText.Visibility = Visibility.Hidden;
                    TextBoxTestText.Visibility = Visibility.Visible;
                }
            }
            else
            {
                CheckBoxPassword.IsChecked = false;
            }

            LabelTextBox.Content = CheckBoxPassword.IsChecked == true ? "Password:" : "Text:";
            if (ComboBoxAction.Text == "checkbox")
            {
                if (TextBoxTestText.Text.ToUpper() == "TRUE")
                    ComboBoxTestText.SelectedIndex = 1;
                else if (TextBoxTestText.Text.ToUpper() == "FALSE")
                    ComboBoxTestText.SelectedIndex = 2;
                else
                    ComboBoxTestText.SelectedIndex = 0;
            }

            if (ComboBoxAction.Text == "switch_to")
            {
                if (TextBoxTestText.Text.ToUpper() == "IFRAME")
                    ComboBoxTestText.SelectedIndex = 1;
                else
                    ComboBoxTestText.SelectedIndex = 0;
            }

            if (ComboBoxAction.Text == "set_value")
            {
                LabelTextBox.Visibility = Visibility.Hidden;
                LabelNameGetValue.Visibility = Visibility.Visible;
                TextBoxSetValueName.Visibility = Visibility.Visible;
                TextBoxSetValueName.Text = TextBoxTestText.Text;
            }
            else
            {
                LabelNameGetValue.Visibility = Visibility.Hidden;
                LabelTextBox.Visibility = Visibility.Visible;
                LabelNameGetValue.Visibility = Visibility.Hidden;
                TextBoxSetValueName.Visibility = Visibility.Hidden;
            }

            if (ComboBoxAction.Text == "get_value")
            {
                VulGetValues(TextBoxTestName.Text);
                LabelNameGetValue.Visibility = Visibility.Hidden;
                LabelTextBox.Content = "Get Value from:";
                LabelTextBox.Visibility = Visibility.Visible;
                ComboBoxGetValue.Text = TextBoxTestText.Text;
            }

            ShowCheckbox();

            ButtonAdd.Visibility = Visibility.Visible;
            ButtonEdit.Visibility = Visibility.Visible;
            ButtonDelete.Visibility = Visibility.Visible;

            checkSaveble();
        }





        /// <summary>
        ///     Handles the Click event of the Button control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Button_Click
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            MakeEmpty();
            AddDataGrid.Visibility = Visibility.Hidden;
            AddDataGrid.ItemsSource = null;

            VersionClass.OpenBestand();
            var bestandsnaam = VersionClass.Bestandsnaam;
            var credits = GeneralFunctionality.Functions.GetCredentials(bestandsnaam);

            LabelUrl.Text = credits.Url;
            textboxApplictionname.Content = bestandsnaam + ".xml";
            bestandsnaamgeopend = bestandsnaam;
            if (bestandsnaam != null)
            {
                VulLabel();
                TextBoxTestName.Text = textboxApplictionname.Content.ToString().Substring(
                    0,
                    textboxApplictionname.Content.ToString().Length - 4);
                ButtonAdd.Visibility = Visibility.Visible;
                ButtonEdit.Visibility = Visibility.Visible;
                ButtonDelete.Visibility = Visibility.Visible;
                if (AddDataGrid.ItemsSource != null) AddDataGrid.Visibility = Visibility.Visible;

                VulGetValues(bestandsnaam);
                ButtonPreConditions.IsEnabled = true;
            }

            buttonCloseWindow.IsEnabled = true;
        }


        /// <summary>
        ///     Handles the Click event of the ButtonAdd control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonAdd_Click
        private void ButtonAdd_Click(object sender, RoutedEventArgs e)
        {
            MakeEmpty();
            ButtonAdd.Visibility = Visibility.Visible;
            ButtonEdit.Visibility = Visibility.Visible;
            ButtonDelete.Visibility = Visibility.Visible;
        }

        /// <summary>
        ///     Handles the Click event of the buttonCloseWindow control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for buttonCloseWindow_Click
        private void buttonCloseWindow_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        /// <summary>
        ///     Handles the Click event of the ButtonDelete control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonDelete_Click
        private void ButtonDelete_Click(object sender, RoutedEventArgs e)
        {
            var result = MessageBox.Show(
                "Do you really want to delete this test step",
                "Question",
                MessageBoxButton.YesNo,
                MessageBoxImage.Question);
            if (result == MessageBoxResult.Yes)
            {
                DataStorage.TestCases.DeleteTestCase(TextBoxTestId.Text);
                MakeEmpty();
                VulLabel();
            }
        }

        /// <summary>
        ///     Handles the Click event of the ButtonEdit control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonEdit_Click
        private void ButtonEdit_Click(object sender, RoutedEventArgs e)
        {
            if (TextBoxTestName.Text != string.Empty && TextBoxTestNr.Text != string.Empty &&
                TextBoxTestCase.Text != string.Empty)
            {
                var tekst = TextBoxTestText.Text;
                if (ComboBoxAction.Text == "checkbox") tekst = ComboBoxTestText.Text;

                var ganaar = false;

                var bestandsnaam =
                    GeneralFunctionality.Functions.SplitBestand(textboxApplictionname.Content.ToString());

                if (ComboBoxAction.Text == "set_value")
                {
                    VulGetValues(bestandsnaam);
                    var query = string.Empty;

                    query = "SELECT * FROM saved_values WHERE ";
                    query += "saved_values_testname = '" + bestandsnaam + "' AND ";
                    query += "saved_values_name = '" + TextBoxSetValueName.Text + "';";
                    var dt = GenericDataRead.GetData(query);

                    if (dt.Rows.Count > 0)
                    {
                        // Indien variable voor testscript bestaat, update deze uit tabel 'saved_values'
                        var saved_id = dt.Rows[0][0].ToString();
                        query = "UPDATE saved_values SET saved_values_name = '";
                        query += TextBoxSetValueName.Text + "' ";
                        query += "WHERE ";
                        query += "saved_values_id = '" + saved_id + "';";
                    }
                    else
                    {
                        // anders Voeg de gegevens toe aan de tabel 'saved_values'
                        query = "INSERT INTO saved_values (saved_values_testname, ";
                        query += "saved_values_name) ";
                        query += "VALUES('" + bestandsnaam + "', ";
                        query += "'" + TextBoxSetValueName.Text + "'); ";
                    }

                    GenericDataRead.INUPDEL(query);
                }

                if (TextBoxTestId.Text == string.Empty)
                {
                    DataStorage.TestCases.AddTestCase(
                        TextBoxTestName.Text,
                        TextBoxTestNr.Text,
                        TextBoxTestCase.Text,
                        TextBoxTestElementName.Text,
                        TextBoxTestElement.Text,
                        ComboBoxAttribute.Text,
                        ComboBoxAction.Text,
                        tekst,
                        TextBoxTestUrl.Text,
                        ComboBoxExecute.Text,
                        ComboBoxSwitch.Text,
                        ComboBoxInverse.Text,
                        TextBoxTestDescription.Text.Replace("'", "\'"),
                        TextBoxComment.Text.Replace("'", "\'"),
                        machinestatic,
                        TextBoxTag.Text,
                        TextBoxTestDescription.Text.Replace("'", "\'"),
                        PasswordTestText.Password); // text_password
                }
                else
                {
                    DataStorage.TestCases.EditTestCase(
                        TextBoxTestId.Text,
                        TextBoxTestName.Text,
                        TextBoxTestNr.Text,
                        TextBoxTestCase.Text,
                        TextBoxTestElementName.Text,
                        TextBoxTestElement.Text,
                        ComboBoxAttribute.Text,
                        ComboBoxAction.Text,
                        TextBoxTestText.Text,
                        TextBoxTestUrl.Text,
                        ComboBoxExecute.Text,
                        ComboBoxSwitch.Text,
                        ComboBoxInverse.Text,
                        TextBoxTestDescription.Text.Replace("'", "\'"),
                        TextBoxComment.Text.Replace("'", "\'"),
                        TextBoxTag.Text,
                        PasswordTestText.Password);
                    ganaar = true;
                }

                VulLabel();
                if (ganaar == false)
                {
                    SelectRowByIndex(AddDataGrid, Convert.ToInt32(testCasesCount) - 1);
                    LabelTestRecord.Content = Convert.ToInt32(testCasesCount) - 1;
                }
                else
                {
                    SelectRowByIndex(AddDataGrid, intRow);
                    LabelTestRecord.Content = intRow + 1;
                }

                MakeEmpty();
                LabelTestRecord.Content = "-";
            }
            else
            {
                MessageBox.Show("No Data to save!!!\r\nYou have to fill the required fields.", "Message",
                    MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }


        /// <summary>
        ///     Handles the Click event of the ButtonNoExecution control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonNoExecution_Click
        private void ButtonNoExecution_Click(object sender, RoutedEventArgs e)
        {
            var nrs = TextBoxNoExecution.Text.Split('-');
            var begin = nrs[0];
            var eind = nrs[1];

            DataStorage.TestCases.ChangeExecution(begin, eind);
        }

        private void ButtonPreConditions_Click(object sender, RoutedEventArgs e)
        {
            OverallSettings.applicationName = (string) textboxApplictionname.Content;
            var preConditions = new PreConditions();
            preConditions.Show();
        }

        private void CheckBoxPassword_Click(object sender, RoutedEventArgs e)
        {
            LabelTextBox.Content = CheckBoxPassword.IsChecked == true ? "Password:" : "Text:";


            if (CheckBoxPassword.IsChecked == true)
            {
                PasswordTestText.Visibility = Visibility.Visible;
                TextBoxTestText.Visibility = Visibility.Hidden;
            }
            else
            {
                PasswordTestText.Visibility = Visibility.Hidden;
                TextBoxTestText.Visibility = Visibility.Visible;
            }
        }

        /// <summary>
        ///     Checks the saveble.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for checkSaveble
        private void checkSaveble()
        {
            if (TextBoxTestName.Text != string.Empty && TextBoxTestNr.Text != string.Empty
                                                     && TextBoxTestCase.Text != string.Empty
                                                     && TextBoxTestElement.Text != string.Empty
                                                     && ComboBoxAttribute.Text != string.Empty)
            {
                ButtonEdit.IsEnabled = true;
            }
            else
            {
                if (TextBoxTestElement.Text == string.Empty && TextBoxTestNr.Text != string.Empty)
                {
                    if (elementname.Content == "*Element:" && Convert.ToInt32(TextBoxTestNr.Text) > 0)
                        ButtonEdit.IsEnabled = false;
                    else
                        ButtonEdit.IsEnabled = true;
                }
            }

            if (TextBoxTestId.Text != string.Empty) ButtonDelete.IsEnabled = true;
        }

        private void ComboBoxAction_DropDownClosed(object sender, EventArgs e)
        {
            VerplichtElement();
            ShowCheckbox();
        }

        private void VerplichtElement()
        {
            switch (ComboBoxAction.Text)
            {
                case "click":
                    verplicht = true;
                    break;
                case "sendkeys":
                    verplicht = true;
                    break;
                case "select":
                    verplicht = true;
                    break;
                case "value":
                    verplicht = true;
                    break;
                case "checkbox":
                    verplicht = true;
                    break;
                case "move_to":
                    verplicht = true;
                    break;
                case "upload":
                    verplicht = false;
                    break;
                case "switch to iFrame":
                    verplicht = false;
                    break;

                case "switch to default":
                    verplicht = false;
                    break;

                case "set_value":
                    verplicht = false;
                    break;
                case "get_value":
                    verplicht = false;
                    break;
                case "wait":
                    verplicht = false;
                    break;
                case "scroll":
                    verplicht = true;
                    break;
                case "switch to url":
                    verplicht = false;
                    break;
            }

            if (verplicht == true)
            {
                elementname.Content = "*Element:";
            }
            else
            {
                elementname.Content = "Element:";
            }
        }

        /// <summary>
        ///     Handles the DropDownClosed event of the ComboBoxAttribute control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ComboBoxAttribute_DropDownClosed
        private void ComboBoxAttribute_DropDownClosed(object sender, EventArgs e)
        {
            checkSaveble();
        }

        private void ComboBoxGetValue_DropDownClosed(object sender, EventArgs e)
        {
            TextBoxTestText.Text = ComboBoxGetValue.Text;
        }

        private void ComboBoxSwitchTo_DropDownClosed(object sender, EventArgs e)
        {
            TextBoxTestText.Text = ComboBoxSwitchTo.Text;
        }

        private void ComboBoxTestText_DropDownClosed(object sender, EventArgs e)
        {
            TextBoxTestText.Text = ComboBoxTestText.Text;
        }

        private void LabelUrl_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
                if (bestandsnaamgeopend != null)
                {
                    var credits = GeneralFunctionality.Functions.GetCredentials(bestandsnaamgeopend);
                    credits.Url = LabelUrl.Text;

                    try
                    {
                        var settingsXML = new XmlWriterSettings();
                        settingsXML.Indent = true;
                        settingsXML.OmitXmlDeclaration = true;
                        settingsXML.IndentChars = "\t";

                        using (var writer =
                            XmlWriter.Create(
                                GeneralFunctionality.Functions.GetCurrentDir(1) + bestandsnaamgeopend + ".xml",
                                settingsXML))
                        {
                            writer.WriteStartDocument();
                            writer.WriteStartElement("settings");
                            writer.WriteStartElement("start");
                            writer.WriteElementString("url", credits.Url);
                            writer.WriteElementString("application", credits.Application);
                            writer.WriteElementString("page", credits.Page);
                            writer.WriteEndElement();
                            writer.WriteEndElement();
                            writer.WriteEndDocument();
                        }

                        MessageBox.Show(
                            "TestSet settings are saved!!!",
                            "Message",
                            MessageBoxButton.OK,
                            MessageBoxImage.Information);
                    }
                    catch (Exception exception)
                    {
                        General.LogMessageDatabase(
                            exception.Message + "\r\n" + exception.Source + "\r\n" + exception.StackTrace, 4);
                    }
                }
        }

        /// <summary>
        ///     Makes the empty.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for MakeEmpty
        private void 
            MakeEmpty()
        {
            PanelNamen.Visibility = Visibility.Hidden;
            if (textboxApplictionname.Content != null)
            {
                PanelNamen.Visibility = Visibility.Visible;
                var data = General.GetLaatsteTestCase(
                    textboxApplictionname.Content.ToString().Substring(
                        0,
                        textboxApplictionname.Content.ToString().Length - 4));

                TextBoxTestId.Text = string.Empty;
                TextBoxTestName.Text = textboxApplictionname.Content.ToString().Substring(
                    0,
                    textboxApplictionname.Content.ToString().Length - 4);
                if (data.Rows.Count > 0)
                {
                    TextBoxTestNr.Text = Convert.ToString(Convert.ToInt32(data.Rows[0][0].ToString()) + 1);
                    TextBoxTestCase.Text = data.Rows[0][1].ToString();
                }
                else
                {
                    TextBoxTestNr.Text = string.Empty;
                    TextBoxTestCase.Text = string.Empty;
                }
            }
            else
            {
                PanelNamen.Visibility = Visibility.Hidden;
                TextBoxTestNr.Text = string.Empty;
                TextBoxTestCase.Text = string.Empty;
            }

            TextBoxTestElementName.Text = string.Empty;
            TextBoxTestElement.Text = string.Empty;
            ComboBoxAttribute.SelectedIndex = 0;
            ComboBoxAction.SelectedIndex = -1;
            TextBoxTestText.Text = string.Empty;
            TextBoxTestUrl.Text = string.Empty;
            ComboBoxSwitch.SelectedIndex = -1;
            TextBoxTestDescription.Text = string.Empty;
            ComboBoxExecute.SelectedIndex = 0;
            ComboBoxTestText.SelectedIndex = 0;
            ComboBoxInverse.SelectedIndex = 0;
            TextBoxComment.Text = string.Empty;
            ComboBoxSwitchTo.SelectedIndex = 0;
            LabelSwitchTo.Visibility = Visibility.Hidden;
            ButtonDelete.IsEnabled = false;

            PasswordTestText.Password = "";
            PasswordTestText.Visibility = Visibility.Hidden;

            LabelTextBox.Visibility = Visibility.Visible;
            LabelNameSetValue.Visibility = Visibility.Hidden;
            LabelNameGetValue.Visibility = Visibility.Hidden;
            LabelTextBox.Content = "Text:";
            CheckBoxPassword.IsChecked = false;
            LabelTextBox.Content = CheckBoxPassword.IsChecked == true ? "Password:" : "Text:";
            TextBoxTestText.Visibility = Visibility.Visible;
            CheckBoxPassword.IsChecked = false;
            LabelNameGetValue.Visibility = Visibility.Hidden;
            ComboBoxSwitchTo.Visibility = Visibility.Hidden;
            ComboBoxTestText.Visibility = Visibility.Hidden;
            ComboBoxScroll.Visibility = Visibility.Hidden;
            LabelCheckBox.Visibility = Visibility.Hidden;
            LabelTestRecord.Content = "-";
            ComboBoxGetValue.Visibility = Visibility.Hidden;

        }

        private void ShowCheckbox()
        {
            TextBoxSetValueName.Visibility = Visibility.Hidden;
            ComboBoxTestText.Visibility = Visibility.Hidden;
            TextBoxTestText.Visibility = Visibility.Hidden;
            ComboBoxSwitchTo.Visibility = Visibility.Hidden;
            LabelCheckBox.Visibility = Visibility.Hidden;
            LabelTextBox.Visibility = Visibility.Hidden;
            LabelSwitchTo.Visibility = Visibility.Hidden;
            ComboBoxGetValue.Visibility = Visibility.Hidden;
            ComboBoxScroll.Visibility = Visibility.Hidden;
            LabelNameGetValue.Visibility = Visibility.Hidden;
            LabelNameSetValue.Visibility = Visibility.Hidden;

            switch (ComboBoxAction.Text)
            {
                case "checkbox":
                    LabelCheckBox.Visibility = Visibility.Visible;
                    ComboBoxTestText.Visibility = Visibility.Visible;
                    if (ComboBoxTestText.Text == string.Empty) ComboBoxTestText.SelectedIndex = 2; // 'false'
                    break;
                case "switch_to":
                    LabelSwitchTo.Visibility = Visibility.Visible;
                    ComboBoxSwitchTo.Visibility = Visibility.Visible;
                    break;
                case "set_value":
                    TextBoxSetValueName.Visibility = Visibility.Visible;
                    LabelNameSetValue.Visibility = Visibility.Visible;
                    break;
                case "get_value":
                    LabelTextBox.Content = "Get Value from:";
                    LabelTextBox.Visibility = Visibility.Visible;
                    ComboBoxGetValue.Visibility = Visibility.Visible;
                    break;
                case "scroll":
                    LabelTextBox.Content = "Scroll:";
                    LabelTextBox.Visibility = Visibility.Visible;
                    ComboBoxScroll.Visibility = Visibility.Visible;
                    break;
                default:
                    LabelTextBox.Visibility = Visibility.Visible;
                    TextBoxTestText.Visibility = Visibility.Visible;
                    break;
            }

            if (ComboBoxAction.Text == "sendkeys")
            {
                CheckBoxPassword.IsEnabled = true;
                TextBoxTestUrl.IsEnabled = true;
            }
            else
            {
                CheckBoxPassword.IsEnabled = false;
                //TextBoxTestUrl.IsEnabled = false;
            }
        }

        private void TextBoxSetValueName_TextChanged(object sender, TextChangedEventArgs e)
        {
            TextBoxTestText.Text = TextBoxSetValueName.Text;
        }

        /// <summary>
        ///     Handles the TextChanged event of the TextBoxTestCase control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="TextChangedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBoxTestCase_TextChanged
        private void TextBoxTestCase_TextChanged(object sender, TextChangedEventArgs e)
        {
            checkSaveble();
        }


        /// <summary>
        ///     Handles the TextChanged event of the TextBoxTestElement control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="TextChangedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBoxTestElement_TextChanged
        private void TextBoxTestElement_TextChanged(object sender, TextChangedEventArgs e)
        {
            checkSaveble();
        }

        /// <summary>
        ///     Handles the TextChanged event of the TextBoxTestNr control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="TextChangedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBoxTestNr_TextChanged
        private void TextBoxTestNr_TextChanged(object sender, TextChangedEventArgs e)
        {
            checkSaveble();
        }

        private void VulGetValues(string bestandsnaam)
        {
            var query = "SELECT saved_values_name FROM saved_values ";
            query += "WHERE saved_values_testname = '" + bestandsnaam + "';";
            var dt = GenericDataRead.GetData(query);

            if (dt.Rows.Count > 0)
            {
                ComboBoxGetValue.Items.Clear();
                ComboBoxGetValue.Items.Add("");

                for (var rij = 0; rij < dt.Rows.Count; rij++) ComboBoxGetValue.Items.Add(dt.Rows[rij][0].ToString());
            }
        }

        /// <summary>
        ///     Vuls the label.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for VulLabel
        private void VulLabel()
        {
            testCases = TestResultsFactory.GetTestCases(
                textboxApplictionname.Content.ToString().Substring(
                    0,
                    textboxApplictionname.Content.ToString().Length - 4));
            testCasesCount = TestResultsFactory.GetTestCasesCount(
                textboxApplictionname.Content.ToString().Substring(
                    0,
                    textboxApplictionname.Content.ToString().Length - 4));
            LabelTestSteps.Content = testCasesCount;

            AddDataGrid.ItemsSource = null;
            AddDataGrid.ItemsSource = testCases;
            AddDataGrid.SelectedIndex = -1;
            if (AddDataGrid.Items.Count == 0) TextBoxTestNr.Text = "1";

            PanelNamen.Visibility = Visibility.Visible;

            VulTestNr(testCases);

        }

        private void VulTestNr(List<TestResultsFactory.TestCases> testCases)
        {
            ComboboxSelectNr.Items.Clear();
            for (int x = 0; x < testCases.Count; x++)
            {
                ComboboxSelectNr.Items.Add(testCases[x].testnr);
            }
        }

        /// <summary>
        ///     Handles the IsVisibleChanged event of the Window control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Window_IsVisibleChanged
        private void Window_IsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            if (AddDataGrid.SelectedIndex != -1) buttonClear.IsEnabled = true;
            else buttonClear.IsEnabled = false;
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            MakeEmpty();
        }

        private void ComboBoxScroll_DropDownClosed(object sender, EventArgs e)
        {
            TextBoxTestText.Text = ComboBoxScroll.Text;
        }

        private void AddDataGrid_GotFocus(object sender, RoutedEventArgs e)
        {
            intRow = AddDataGrid.Items.IndexOf(AddDataGrid.CurrentItem);

            LabelTestRecord.Content = intRow + 1;
        }

        private void ButtonInsertRow_Click(object sender, RoutedEventArgs e)
        {
            if (TextInsertRow.Text != string.Empty)
            {
                var row = Convert.ToInt32(TextInsertRow.Text);
                if (row > 0)
                {
                    var query = "UPDATE testcases_selenium SET testnr = testnr + 1 ";
                    query += "WHERE testname = '" + bestandsnaamgeopend + "' AND ";
                    query += "testnr >= " + row + ";";
                    GeneralFunctionality.Functions.InitializeDatabaseConnection(false);
                    GenericDataRead.INUPDEL(query);
                    VulLabel();
                }

                TextInsertRow.Text = string.Empty;
                ButtonInsertRow.IsEnabled = false;
            }
        }

        private void TextInsertRow_KeyDown(object sender, KeyEventArgs e)
        {
            if (TextInsertRow.Text != string.Empty)
                ButtonInsertRow.IsEnabled = true;
            else
                ButtonInsertRow.IsEnabled = false;
        }

        private void ComboboxSelectNr_DropDownClosed(object sender, EventArgs e)
        {
            if (ComboboxSelectNr.Text != string.Empty)
            {
                HaalGegevensInEdit(ComboboxSelectNr.Text, false);
                AddDataGrid.SelectedValuePath = "id";
                AddDataGrid.SelectedValue = TextBoxTestId.Text;
                intRow = AddDataGrid.SelectedIndex;
            }
        }
    }
}