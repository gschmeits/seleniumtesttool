// ***********************************************************************
// Assembly         : WPFTestResults
// Author           : G.H.M.H. Schmeits
// Created          : 01-18-2018
//
// Last Modified By : G.H.M.H. Schmeits
// Last Modified On : 11-19-2020
// ***********************************************************************
// <copyright file="TestCases.xaml.cs" company="SCHMEITS">
//     Copyright ©  2018
// </copyright>
// <summary></summary>
// ***********************************************************************

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml;
using DataStorage;
using DataGrid = System.Windows.Controls.DataGrid;
using DataGridCell = System.Windows.Controls.DataGridCell;
using KeyEventArgs = System.Windows.Input.KeyEventArgs;
using MessageBox = System.Windows.MessageBox;

/// <summary>
/// The WPFTestResults namespace.
/// </summary>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for WPFTestResults
namespace WPFTestResults
{
    /// <summary>
    ///     Class TestCases.
    /// </summary>
    /// <seealso cref="System.Windows.Window" />
    /// <seealso cref="System.Windows.Markup.IComponentConnector" />
    public partial class TestBlock : Window
    {
        /// <summary>
        ///     The project identifier
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for project_id
        private readonly string project_id;

        /// <summary>
        ///     The project
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for project
        private string project;

        /// <summary>
        ///     Initializes a new instance of the <see cref="TestCases" /> class.
        /// </summary>
        /// <param name="_project">The project.</param>
        /// <param name="projectid">The projectid.</param>
        public TestBlock(string _project, string projectid)
        {
            InitializeComponent();
            Title = "Selenium Test Tool - Test Module Steps (Version: " + VersionClass.GetRunningVersion() + ")";
            MakeEmpty();

            machinestatic = InloggerData.MachineCode;
            intRow = -1;

            var resHeight = Screen.PrimaryScreen.Bounds.Height;
            var actualHeight = SystemParameters.PrimaryScreenHeight;
            var actualWidth = SystemParameters.PrimaryScreenWidth;
            var dpi = resHeight / actualHeight; // 1.5 which is true because my settings says my scale is 150%
            UserInterfaceCustomScale(dpi);

            var w = actualWidth * 0.95;
            var h = actualHeight * 0.90;

            Width = w;
            Height = h;
            checkSaveble();

            TextBoxTestName.Width = Width / 3.684848;
            TextBoxTestCase.Width = Width / 3.684848;
            TextBoxTestElementName.Width = Width / 3.684848;

            TextBoxTestText.Width = Width / 3.684848;
            PasswordTestText.Width = Width / 3.684848;
            TextBoxComment.Width = Width / 3.684848;

            TextBoxTestDescription.Width = Width / 3.684848;

            buttonCloseWindow.IsEnabled = true;

            AddDataGrid.Visibility = Visibility.Hidden;
            ButtonSubmitFromTo.IsEnabled = false;
            ButtonRangschik.IsEnabled = false;
            buttonDeleteModule.IsEnabled = false;
            TextBoxNrFrom.IsEnabled = false;
            TextBoxNrTo.IsEnabled = false;
            ButtonAdd.Visibility = Visibility.Visible;
            ButtonEdit.Visibility = Visibility.Visible;
            ButtonDelete.Visibility = Visibility.Visible;

            project = _project;
            project_id = projectid;
            ModuleImport.Visibility = Visibility.Hidden;

            VulComboBox();
        }

        /// <summary>
        ///     Gets or sets the bestandsnaamgeopend.
        /// </summary>
        /// <value>The bestandsnaamgeopend.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for bestandsnaamgeopend
        private static string bestandsnaamgeopend { get; set; }

        /// <summary>
        ///     Gets or sets the int row.
        /// </summary>
        /// <value>The int row.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for intRow
        private static int intRow { get; set; }

        /// <summary>
        ///     Gets or sets a value indicating whether this <see cref="TestBlock" /> is verplicht.
        /// </summary>
        /// <value><c>true</c> if verplicht; otherwise, <c>false</c>.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for verplicht
        private static bool verplicht { get; set; }

        /// <summary>
        ///     Gets or sets the machinestatic.
        /// </summary>
        /// <value>The machinestatic.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for machinestatic
        private static string machinestatic { get; set; }

        /// <summary>
        ///     Gets or sets the test cases.
        /// </summary>
        /// <value>The test cases.</value>
        private static List<TestResultsFactory.TestBlocks> testBlocks { get; set; }

        /// <summary>
        ///     Gets or sets the test cases count.
        /// </summary>
        /// <value>The test cases count.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for testCasesCount
        private static long testCasesCount { get; set; }


        /// <summary>
        ///     Vuls the ComboBox.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for VulComboBox
        private void VulComboBox()
        {
            var query = "select testblock from testblock group by testblock order by testblock, testnr";

            if (CheckBoxCurrentProject.IsChecked == true)
                query = "select testblock from testblock where project_id = " + project_id +
                        " group by testblock order by testblock, testnr";

            var dt = GenericDataRead.GetData(query);

            if (dt.Rows.Count > 0)
            {
                ComboBoxModule.Items.Clear();
                ComboBoxModule.Items.Add("");
                for (var row = 0; row < dt.Rows.Count; ++row) ComboBoxModule.Items.Add(dt.Rows[row][0].ToString());
            }
        }

        /// <summary>
        ///     Users the interface custom scale.
        /// </summary>
        /// <param name="customScale">The custom scale.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for UserInterfaceCustomScale
        private void UserInterfaceCustomScale(double customScale)
        {
            // Change scale of window content 
            LayoutTransform = new ScaleTransform(customScale, customScale, 0, 0);
            Width *= customScale;
            Height *= customScale;

            // Bring window center screen
            var screenHeight = SystemParameters.PrimaryScreenHeight;
            var screenWidth = SystemParameters.PrimaryScreenWidth;
            Top = (screenHeight - Height) / 2;
            Left = (screenWidth - Width) / 2;
        }

        /// <summary>
        ///     Gets the visual child.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="parent">The parent.</param>
        /// <returns>T.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetVisualChild`1
        public static T GetVisualChild<T>(Visual parent) where T : Visual
        {
            var obj = default(T);
            var childrenCount = VisualTreeHelper.GetChildrenCount(parent);
            for (var childIndex = 0; childIndex < childrenCount; ++childIndex)
            {
                var child = (Visual) VisualTreeHelper.GetChild(parent, childIndex);
                obj = child as T;
                if (obj == null)
                    obj = GetVisualChild<T>(child);
                if (obj != null)
                    break;
            }

            return obj;
        }

        /// <summary>
        ///     Selects the index of the row by.
        /// </summary>
        /// <param name="dataGrid">The data grid.</param>
        /// <param name="rowIndex">Index of the row.</param>
        /// <exception cref="ArgumentException">
        ///     The SelectionUnit of the DataGrid must be set to FullRow.
        ///     or
        /// </exception>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for SelectRowByIndex
        public static void SelectRowByIndex(DataGrid dataGrid, int rowIndex)
        {
            if (!dataGrid.SelectionUnit.Equals(DataGridSelectionUnit.FullRow))
                throw new ArgumentException("The SelectionUnit of the DataGrid must be set to FullRow.");

            if (rowIndex < 0 || rowIndex > dataGrid.Items.Count - 1)
                throw new ArgumentException(string.Format("{0} is an invalid row index.", rowIndex));

            dataGrid.SelectedItems.Clear();
            /* set the SelectedItem property */
            var item = dataGrid.Items[rowIndex]; // = Product X
            dataGrid.SelectedItem = item;

            var row = dataGrid.ItemContainerGenerator.ContainerFromIndex(rowIndex) as DataGridRow;
            if (row == null)
            {
                /* bring the data item (Product object) into view
                 * in case it has been virtualized away */
                dataGrid.ScrollIntoView(item);
                row = dataGrid.ItemContainerGenerator.ContainerFromIndex(rowIndex) as DataGridRow;
            }

            //TODO: Retrieve and focus a DataGridCell object
        }

        /// <summary>
        ///     Gets the cell.
        /// </summary>
        /// <param name="row">The row.</param>
        /// <param name="column">The column.</param>
        /// <returns>DataGridCell.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetCell
        public DataGridCell GetCell(int row, int column)
        {
            var row1 = GetRow(row);
            if (row1 != null)
            {
                var visualChild = GetVisualChild<DataGridCellsPresenter>(row1);
                if (visualChild != null)
                {
                    var dataGridCell = (DataGridCell) visualChild.ItemContainerGenerator.ContainerFromIndex(column);
                    if (dataGridCell == null)
                    {
                        AddDataGrid.ScrollIntoView(row1, AddDataGrid.Columns[column]);
                        dataGridCell = (DataGridCell) visualChild.ItemContainerGenerator.ContainerFromIndex(column);
                    }

                    return dataGridCell;
                }
            }

            return null;
        }

        /// <summary>
        ///     Gets the data grid rows.
        /// </summary>
        /// <param name="grid">The grid.</param>
        /// <returns>IEnumerable&lt;DataGridRow&gt;.</returns>
        public IEnumerable<DataGridRow> GetDataGridRows(DataGrid grid)
        {
            foreach (var obj in grid.ItemsSource)
            {
                var dataGridRow = grid.ItemContainerGenerator.ContainerFromItem(obj) as DataGridRow;
                if (dataGridRow != null)
                    yield return dataGridRow;
            }
        }

        /// <summary>
        ///     Gets the row.
        /// </summary>
        /// <param name="index">The index.</param>
        /// <returns>DataGridRow.</returns>
        public DataGridRow GetRow(int index)
        {
            var dataGridRow = (DataGridRow) AddDataGrid.ItemContainerGenerator.ContainerFromIndex(index);
            if (dataGridRow == null)
            {
                AddDataGrid.UpdateLayout();
                AddDataGrid.ScrollIntoView(AddDataGrid.Items[index]);
                dataGridRow = (DataGridRow) AddDataGrid.ItemContainerGenerator.ContainerFromIndex(index);
            }

            return dataGridRow;
        }

        /// <summary>
        ///     Handles the MouseDoubleClick event of the AddDataGrid control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="MouseButtonEventArgs" /> instance containing the event data.</param>
        private void AddDataGrid_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            //intRow = AddDataGrid.SelectedIndex;
            var intRow = AddDataGrid.Items.IndexOf(AddDataGrid.CurrentItem);

            var test = GetCell(intRow, 0);

            var idNumber = test.ToString().Split(':')[1];

            LabelTestRecord.Content = intRow + 1;

            if (intRow == -1) return;
            var teller = 0;
            var idNummer = string.Empty;
            foreach (var testblock in testBlocks)
            {
                if (teller == intRow) idNummer = testblock.id;

                teller++;
            }

            HaalGegevensInEdit(idNumber);
        }


        /// <summary>
        ///     Haals the gegevens in edit.
        /// </summary>
        /// <param name="idNumber">The identifier number.</param>
        /// <param name="datagrid">if set to <c>true</c> [datagrid].</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for HaalGegevensInEdit
        private void HaalGegevensInEdit(string idNumber, bool datagrid = true)
        {
            var warder = General.GetTestBlock(idNumber);

            if (datagrid)
            {
                warder = General.GetTestBlock(idNumber);
                ComboboxSelectNr.Text = warder.Rows[0]["testnr"].ToString();
            }
            else
            {
                warder = General.GetTestBlockTestnr(ComboboxSelectNr.Text, TextBoxTestName.Text);
            }

            TextBoxTestId.Text = warder.Rows[0]["id"].ToString();
            TextBoxTestName.Text = warder.Rows[0]["testblock"].ToString();
            TextBoxTestNr.Text = warder.Rows[0]["testnr"].ToString();
            TextBoxTestCase.Text = warder.Rows[0]["testcase"].ToString();
            TextBoxTestElementName.Text = warder.Rows[0]["testlogicalobjectname"].ToString();
            TextBoxTestElement.Text = warder.Rows[0]["testelement"].ToString();
            ComboBoxAttribute.Text = warder.Rows[0]["testattribute"].ToString();
            ComboBoxAction.Text = warder.Rows[0]["testaction"].ToString();
            TextBoxTestText.Text = warder.Rows[0]["testtext"].ToString();
            TextBoxTestUrl.Text = warder.Rows[0]["testurl"].ToString();
            ComboBoxSwitch.Text = warder.Rows[0]["testswitch"].ToString();
            TextBoxTestDescription.Text = warder.Rows[0]["testext_check"].ToString();
            TextBoxComment.Text = warder.Rows[0]["testdescription"].ToString();
            ComboBoxExecute.Text = warder.Rows[0]["testexecution"].ToString();
            ComboBoxInverse.Text = warder.Rows[0]["testinverse"].ToString();
            PasswordTestText.Password = warder.Rows[0]["test_password"].ToString();

            VerplichtElement();

            if (PasswordTestText.Password != string.Empty)
            {
                CheckBoxPassword.IsChecked = true;
                if (CheckBoxPassword.IsChecked == true)
                {
                    PasswordTestText.Visibility = Visibility.Visible;
                    TextBoxTestText.Visibility = Visibility.Hidden;
                }
                else
                {
                    PasswordTestText.Visibility = Visibility.Hidden;
                    TextBoxTestText.Visibility = Visibility.Visible;
                }
            }
            else
            {
                CheckBoxPassword.IsChecked = false;
            }

            LabelTextBox.Content = CheckBoxPassword.IsChecked == true ? "Password:" : "Text:";
            if (ComboBoxAction.Text == "checkbox")
            {
                if (TextBoxTestText.Text.ToUpper() == "TRUE")
                    ComboBoxTestText.SelectedIndex = 1;
                else if (TextBoxTestText.Text.ToUpper() == "FALSE")
                    ComboBoxTestText.SelectedIndex = 2;
                else
                    ComboBoxTestText.SelectedIndex = 0;
            }

            if (ComboBoxAction.Text == "switch_to")
            {
                if (TextBoxTestText.Text.ToUpper() == "IFRAME")
                    ComboBoxTestText.SelectedIndex = 1;
                else
                    ComboBoxTestText.SelectedIndex = 0;
            }

            if (ComboBoxAction.Text == "set_value")
            {
                LabelTextBox.Visibility = Visibility.Hidden;
                LabelNameGetValue.Visibility = Visibility.Visible;
                TextBoxSetValueName.Visibility = Visibility.Visible;
                TextBoxSetValueName.Text = TextBoxTestText.Text;
            }
            else
            {
                LabelNameGetValue.Visibility = Visibility.Hidden;
                LabelTextBox.Visibility = Visibility.Visible;
                LabelNameGetValue.Visibility = Visibility.Hidden;
                TextBoxSetValueName.Visibility = Visibility.Hidden;
            }

            if (ComboBoxAction.Text == "get_value")
            {
                VulGetValues(TextBoxTestName.Text);
                LabelNameGetValue.Visibility = Visibility.Hidden;
                LabelTextBox.Content = "Get Value from:";
                LabelTextBox.Visibility = Visibility.Visible;
                ComboBoxGetValue.Text = TextBoxTestText.Text;
            }


            if (ComboBoxAction.Text == "scroll")
            {
                ComboBoxScroll.Visibility = Visibility.Visible;
                ComboBoxScroll.Text = TextBoxTestText.Text;
            }

            ShowCheckbox();

            ButtonAdd.Visibility = Visibility.Visible;
            ButtonEdit.Visibility = Visibility.Visible;
            ButtonDelete.Visibility = Visibility.Visible;

            checkSaveble();
        }


        /// <summary>
        ///     Handles the Click event of the ButtonAdd control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void ButtonAdd_Click(object sender, RoutedEventArgs e)
        {
            MakeEmpty();
            ButtonAdd.Visibility = Visibility.Visible;
            ButtonEdit.Visibility = Visibility.Visible;
            ButtonDelete.Visibility = Visibility.Visible;
        }

        /// <summary>
        ///     Handles the Click event of the buttonCloseWindow control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void buttonCloseWindow_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        /// <summary>
        ///     Handles the Click event of the ButtonDelete control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void ButtonDelete_Click(object sender, RoutedEventArgs e)
        {
            var result = MessageBox.Show(
                "Do you really want to delete this test step",
                "Question",
                MessageBoxButton.YesNo,
                MessageBoxImage.Question);
            if (result == MessageBoxResult.Yes)
            {
                DataStorage.TestCases.DeleteTestBlock(TextBoxTestId.Text);
                MakeEmpty();
                VulLabel();
            }
        }

        /// <summary>
        ///     Handles the Click event of the ButtonEdit control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void ButtonEdit_Click(object sender, RoutedEventArgs e)
        {
            if (TextBoxTestName.Text != string.Empty && TextBoxTestNr.Text != string.Empty &&
                TextBoxTestCase.Text != string.Empty)
            {
                var tekst = TextBoxTestText.Text;
                if (ComboBoxAction.Text == "checkbox") tekst = ComboBoxTestText.Text;

                var ganaar = false;

                var bestandsnaam = "";

                if (ComboBoxAction.Text == "set_value")
                {
                    VulGetValues(bestandsnaam);
                    var query = string.Empty;

                    query = "SELECT * FROM saved_values WHERE ";
                    query += "saved_values_testname = '" + bestandsnaam + "' AND ";
                    query += "saved_values_name = '" + TextBoxSetValueName.Text + "';";
                    var dt = GenericDataRead.GetData(query);

                    if (dt.Rows.Count > 0)
                    {
                        // Indien variable voor testscript bestaat, update deze uit tabel 'saved_values'
                        var saved_id = dt.Rows[0][0].ToString();
                        query = "UPDATE saved_values SET saved_values_name = '";
                        query += TextBoxSetValueName.Text + "' ";
                        query += "WHERE ";
                        query += "saved_values_id = '" + saved_id + "';";
                    }
                    else
                    {
                        // anders Voeg de gegevens toe aan de tabel 'saved_values'
                        query = "INSERT INTO saved_values (saved_values_testname, ";
                        query += "saved_values_name, projectid) ";
                        query += "VALUES('" + bestandsnaam + "', ";
                        query += "'" + TextBoxSetValueName.Text + "', ";
                        query += GeneralFunctionality.Functions.getProjectID() + ");";
                    }

                    GenericDataRead.INUPDEL(query);
                }

                var wachtwoord = PasswordTestText.Password;
                if (CheckBoxPassword.IsChecked == false) wachtwoord = string.Empty;

                if (TextBoxTestId.Text == string.Empty)
                {
                    DataStorage.TestCases.AddTestBlock(
                        TextBoxTestName.Text,
                        TextBoxTestNr.Text,
                        TextBoxTestCase.Text,
                        TextBoxTestElementName.Text,
                        TextBoxTestElement.Text,
                        ComboBoxAttribute.Text,
                        ComboBoxAction.Text,
                        tekst,
                        TextBoxTestUrl.Text,
                        ComboBoxExecute.Text,
                        ComboBoxSwitch.Text,
                        ComboBoxInverse.Text,
                        TextBoxTestDescription.Text.Replace("'", "\'"),
                        TextBoxComment.Text.Replace("'", "\'"),
                        machinestatic,
                        TextBoxTag.Text,
                        TextBoxTestDescription.Text.Replace("'", "\'"),
                        project_id,
                        wachtwoord); // text_password
                }
                else
                {
                    DataStorage.TestCases.EditTestBlock(
                        TextBoxTestId.Text,
                        TextBoxTestName.Text,
                        TextBoxTestNr.Text,
                        TextBoxTestCase.Text,
                        TextBoxTestElementName.Text,
                        TextBoxTestElement.Text,
                        ComboBoxAttribute.Text,
                        ComboBoxAction.Text,
                        tekst,
                        TextBoxTestUrl.Text,
                        ComboBoxExecute.Text,
                        ComboBoxSwitch.Text,
                        ComboBoxInverse.Text,
                        TextBoxTestDescription.Text.Replace("'", "\'"),
                        TextBoxComment.Text.Replace("'", "\'"),
                        machinestatic,
                        TextBoxTag.Text,
                        TextBoxTestDescription.Text.Replace("'", "\'"),
                        project_id,
                        wachtwoord);
                    ganaar = true;
                }

                VulLabel();
                if (ganaar == false)
                {
                    SelectRowByIndex(AddDataGrid, Convert.ToInt32(testCasesCount) - 1);
                    LabelTestRecord.Content = Convert.ToInt32(testCasesCount) - 1;
                }
                else
                {
                    SelectRowByIndex(AddDataGrid, intRow);
                    LabelTestRecord.Content = intRow + 1;
                }

                MakeEmpty();
                LabelTestRecord.Content = "-";

                VulComboBox();
            }
            else
            {
                MessageBox.Show("No Data to save!!!\r\nYou have to fill the required fields.", "Message",
                    MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }


        /// <summary>
        ///     Handles the Click event of the ButtonNoExecution control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        private void ButtonNoExecution_Click(object sender, RoutedEventArgs e)
        {
            var nrs = TextBoxNoExecution.Text.Split('-');
            var begin = nrs[0];
            var eind = nrs[1];

            DataStorage.TestCases.ChangeExecution(begin, eind);
        }


        /// <summary>
        ///     Handles the Click event of the CheckBoxPassword control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CheckBoxPassword_Click
        private void CheckBoxPassword_Click(object sender, RoutedEventArgs e)
        {
            LabelTextBox.Content = CheckBoxPassword.IsChecked == true ? "Password:" : "Text:";


            if (CheckBoxPassword.IsChecked == true)
            {
                PasswordTestText.Visibility = Visibility.Visible;
                TextBoxTestText.Visibility = Visibility.Hidden;
            }
            else
            {
                PasswordTestText.Visibility = Visibility.Hidden;
                TextBoxTestText.Visibility = Visibility.Visible;
            }
        }

        /// <summary>
        ///     Checks the saveble.
        /// </summary>
        private void checkSaveble()
        {
            if (TextBoxTestName.Text != string.Empty && TextBoxTestNr.Text != string.Empty
                                                     && TextBoxTestCase.Text != string.Empty
                                                     && TextBoxTestElement.Text != string.Empty
                                                     && ComboBoxAttribute.Text != string.Empty)
            {
                ButtonEdit.IsEnabled = true;
            }
            else
            {
                if (TextBoxTestElement.Text == string.Empty && TextBoxTestNr.Text != string.Empty)
                {
                    if (elementname.Content == "*Element:" && Convert.ToInt32(TextBoxTestNr.Text) > 0)
                        ButtonEdit.IsEnabled = false;
                    else
                        ButtonEdit.IsEnabled = true;
                }
            }

            if (TextBoxTestId.Text != string.Empty) ButtonDelete.IsEnabled = true;
        }

        /// <summary>
        ///     Handles the DropDownClosed event of the ComboBoxAction control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ComboBoxAction_DropDownClosed
        private void ComboBoxAction_DropDownClosed(object sender, EventArgs e)
        {
            VerplichtElement();
            ShowCheckbox();
        }

        /// <summary>
        ///     Verplichts the element.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for VerplichtElement
        private void VerplichtElement()
        {
            switch (ComboBoxAction.Text)
            {
                case "click":
                    verplicht = true;
                    break;
                case "sendkeys":
                    verplicht = true;
                    break;
                case "select":
                    verplicht = true;
                    break;
                case "value":
                    verplicht = true;
                    break;
                case "checkbox":
                    verplicht = true;
                    break;
                case "move_to":
                    verplicht = true;
                    break;
                case "upload":
                    verplicht = false;
                    break;
                case "switch to iFrame":
                    verplicht = false;
                    break;

                case "switch to default":
                    verplicht = false;
                    break;

                case "set_value":
                    verplicht = false;
                    break;
                case "get_value":
                    verplicht = false;
                    break;
                case "wait":
                    verplicht = false;
                    break;
                case "scroll":
                    verplicht = false;
                    break;
                case "switch to url":
                    verplicht = false;
                    break;
                case "cmd":
                    verplicht = false;
                    break;
                case "screenshot":
                    verplicht = false;
                    break;
                case "logout":
                    verplicht = false;
                    break;
            }

            if (verplicht)
            {
                elementname.Content = "*Element:";
                ButtonEdit.IsEnabled = false;
                if (TextBoxTestElement.Text.Length > 0) ButtonEdit.IsEnabled = true;
            }
            else
            {
                elementname.Content = "Element:";
                ButtonEdit.IsEnabled = true;
                ButtonEdit.IsEnabled = true;
            }
        }

        /// <summary>
        ///     Handles the DropDownClosed event of the ComboBoxAttribute control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        private void ComboBoxAttribute_DropDownClosed(object sender, EventArgs e)
        {
            checkSaveble();
        }

        /// <summary>
        ///     Handles the DropDownClosed event of the ComboBoxGetValue control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ComboBoxGetValue_DropDownClosed
        private void ComboBoxGetValue_DropDownClosed(object sender, EventArgs e)
        {
            TextBoxTestText.Text = ComboBoxGetValue.Text;
        }

        /// <summary>
        ///     Handles the DropDownClosed event of the ComboBoxSwitchTo control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ComboBoxSwitchTo_DropDownClosed
        private void ComboBoxSwitchTo_DropDownClosed(object sender, EventArgs e)
        {
            TextBoxTestText.Text = ComboBoxSwitchTo.Text;
        }

        /// <summary>
        ///     Handles the DropDownClosed event of the ComboBoxTestText control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ComboBoxTestText_DropDownClosed
        private void ComboBoxTestText_DropDownClosed(object sender, EventArgs e)
        {
            TextBoxTestText.Text = ComboBoxTestText.Text;
        }

        /// <summary>
        ///     Handles the KeyDown event of the LabelUrl control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.Input.KeyEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for LabelUrl_KeyDown
        private void LabelUrl_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Return)
                if (bestandsnaamgeopend != null)
                {
                    var credits =
                        GeneralFunctionality.Functions.GetCredentials(GeneralFunctionality.Functions._project + "\\" +
                                                                      bestandsnaamgeopend);
                    credits.Url = "";

                    try
                    {
                        var settingsXML = new XmlWriterSettings();
                        settingsXML.Indent = true;
                        settingsXML.OmitXmlDeclaration = true;
                        settingsXML.IndentChars = "\t";

                        using (var writer =
                            XmlWriter.Create(
                                GeneralFunctionality.Functions.GetCurrentDir(1) +
                                GeneralFunctionality.Functions._project + "\\" + bestandsnaamgeopend + ".xml",
                                settingsXML))
                        {
                            writer.WriteStartDocument();
                            writer.WriteStartElement("settings");
                            writer.WriteStartElement("start");
                            writer.WriteElementString("url", credits.Url);
                            writer.WriteElementString("application", credits.Application);
                            writer.WriteElementString("page", credits.Page);
                            writer.WriteEndElement();
                            writer.WriteEndElement();
                            writer.WriteEndDocument();
                        }

                        MessageBox.Show(
                            "TestSet settings are saved!!!",
                            "Message",
                            MessageBoxButton.OK,
                            MessageBoxImage.Information);
                    }
                    catch (Exception exception)
                    {
                        General.LogMessage(
                            exception.Message + "\r\n" + exception.Source + "\r\n" + exception.StackTrace, 4);
                    }
                }
        }

        /// <summary>
        ///     Makes the empty.
        /// </summary>
        private void
            MakeEmpty()
        {
            if (ComboBoxModule.Text != null)
            {
                var data = General.GetLaatsteTestBlock(ComboBoxModule.Text);

                TextBoxTestId.Text = string.Empty;
                TextBoxTestName.Text = ComboBoxModule.Text;
                if (data.Rows.Count > 0)
                {
                    TextBoxTestNr.Text = Convert.ToString(Convert.ToInt32(data.Rows[0][0].ToString()) + 1);
                    TextBoxTestCase.Text = data.Rows[0][1].ToString();
                }
                else
                {
                    TextBoxTestNr.Text = string.Empty;
                    TextBoxTestCase.Text = string.Empty;
                }
            }
            else
            {
                TextBoxTestNr.Text = string.Empty;
                TextBoxTestCase.Text = string.Empty;
            }


            TextBoxTestElementName.Text = string.Empty;
            TextBoxTestElement.Text = string.Empty;
            ComboBoxAttribute.SelectedIndex = 0;
            ComboBoxAction.SelectedIndex = -1;
            TextBoxTestText.Text = string.Empty;
            TextBoxTestUrl.Text = string.Empty;
            ComboBoxSwitch.SelectedIndex = -1;
            TextBoxTestDescription.Text = string.Empty;
            ComboBoxExecute.SelectedIndex = 0;
            ComboBoxTestText.SelectedIndex = 0;
            ComboBoxInverse.SelectedIndex = 0;
            TextBoxComment.Text = string.Empty;
            ComboBoxSwitchTo.SelectedIndex = 0;
            LabelSwitchTo.Visibility = Visibility.Hidden;
            ButtonDelete.IsEnabled = false;
            buttonCreateCSV.IsEnabled = false;

            PasswordTestText.Password = "";
            PasswordTestText.Visibility = Visibility.Hidden;

            LabelTextBox.Visibility = Visibility.Visible;
            LabelNameSetValue.Visibility = Visibility.Hidden;
            LabelNameGetValue.Visibility = Visibility.Hidden;
            LabelTextBox.Content = "Text:";
            CheckBoxPassword.IsChecked = false;
            LabelTextBox.Content = CheckBoxPassword.IsChecked == true ? "Password:" : "Text:";
            TextBoxTestText.Visibility = Visibility.Visible;
            CheckBoxPassword.IsChecked = false;
            LabelNameGetValue.Visibility = Visibility.Hidden;
            ComboBoxSwitchTo.Visibility = Visibility.Hidden;
            ComboBoxTestText.Visibility = Visibility.Hidden;
            ComboBoxScroll.Visibility = Visibility.Hidden;
            LabelCheckBox.Visibility = Visibility.Hidden;
            LabelTestRecord.Content = "-";
            ComboBoxGetValue.Visibility = Visibility.Hidden;
        }

        /// <summary>
        ///     Shows the checkbox.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ShowCheckbox
        private void ShowCheckbox()
        {
            TextBoxSetValueName.Visibility = Visibility.Hidden;
            ComboBoxTestText.Visibility = Visibility.Hidden;
            TextBoxTestText.Visibility = Visibility.Hidden;
            ComboBoxSwitchTo.Visibility = Visibility.Hidden;
            LabelCheckBox.Visibility = Visibility.Hidden;
            LabelTextBox.Visibility = Visibility.Hidden;
            LabelSwitchTo.Visibility = Visibility.Hidden;
            ComboBoxGetValue.Visibility = Visibility.Hidden;
            ComboBoxScroll.Visibility = Visibility.Hidden;
            LabelNameGetValue.Visibility = Visibility.Hidden;
            LabelNameSetValue.Visibility = Visibility.Hidden;

            switch (ComboBoxAction.Text)
            {
                case "checkbox":
                    LabelCheckBox.Visibility = Visibility.Visible;
                    ComboBoxTestText.Visibility = Visibility.Visible;
                    if (ComboBoxTestText.Text == string.Empty) ComboBoxTestText.SelectedIndex = 2; // 'false'
                    break;
                case "switch_to":
                    LabelSwitchTo.Visibility = Visibility.Visible;
                    ComboBoxSwitchTo.Visibility = Visibility.Visible;
                    break;
                case "set_value":
                    TextBoxSetValueName.Visibility = Visibility.Visible;
                    LabelNameSetValue.Visibility = Visibility.Visible;
                    break;
                case "get_value":
                    LabelTextBox.Content = "Get Value:";
                    LabelTextBox.Visibility = Visibility.Visible;
                    ComboBoxGetValue.Visibility = Visibility.Visible;
                    break;
                case "scroll":
                    LabelTextBox.Content = "Scroll:";
                    LabelTextBox.Visibility = Visibility.Visible;
                    ComboBoxScroll.Visibility = Visibility.Visible;
                    break;
                default:
                    LabelTextBox.Visibility = Visibility.Visible;
                    TextBoxTestText.Visibility = Visibility.Visible;
                    break;
            }

            if (ComboBoxAction.Text == "sendkeys")
            {
                CheckBoxPassword.IsEnabled = true;
                TextBoxTestUrl.IsEnabled = true;
            }
            else
            {
                CheckBoxPassword.IsEnabled = false;
                //TextBoxTestUrl.IsEnabled = false;
            }
        }

        /// <summary>
        ///     Handles the TextChanged event of the TextBoxSetValueName control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="TextChangedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBoxSetValueName_TextChanged
        private void TextBoxSetValueName_TextChanged(object sender, TextChangedEventArgs e)
        {
            TextBoxTestText.Text = TextBoxSetValueName.Text;
        }

        /// <summary>
        ///     Handles the TextChanged event of the TextBoxTestCase control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="TextChangedEventArgs" /> instance containing the event data.</param>
        private void TextBoxTestCase_TextChanged(object sender, TextChangedEventArgs e)
        {
            checkSaveble();
        }


        /// <summary>
        ///     Handles the TextChanged event of the TextBoxTestElement control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="TextChangedEventArgs" /> instance containing the event data.</param>
        private void TextBoxTestElement_TextChanged(object sender, TextChangedEventArgs e)
        {
            checkSaveble();
        }

        /// <summary>
        ///     Handles the TextChanged event of the TextBoxTestNr control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="TextChangedEventArgs" /> instance containing the event data.</param>
        private void TextBoxTestNr_TextChanged(object sender, TextChangedEventArgs e)
        {
            checkSaveble();
        }

        /// <summary>
        ///     Vuls the get values.
        /// </summary>
        /// <param name="bestandsnaam">The bestandsnaam.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for VulGetValues
        private void VulGetValues(string bestandsnaam)
        {
            var query = "SELECT saved_values_name FROM saved_values ";
            query += "WHERE projectid = " + GeneralFunctionality.Functions.getProjectID() + ";";
            var dt = GenericDataRead.GetData(query);

            if (dt.Rows.Count > 0)
            {
                ComboBoxGetValue.Items.Clear();
                ComboBoxGetValue.Items.Add("");

                for (var rij = 0; rij < dt.Rows.Count; rij++) ComboBoxGetValue.Items.Add(dt.Rows[rij][0].ToString());
            }
        }

        /// <summary>
        ///     Vuls the label.
        /// </summary>
        private void VulLabel()
        {
            testBlocks = TestResultsFactory.GetTestBlocks(TextBoxTestName.Text);
            testCasesCount = TestResultsFactory.GetTestBlocksCount(TextBoxTestName.Text);
            LabelTestSteps.Content = testCasesCount;

            AddDataGrid.ItemsSource = null;
            AddDataGrid.ItemsSource = testBlocks;
            AddDataGrid.SelectedIndex = -1;
            if (AddDataGrid.Items.Count == 0) TextBoxTestNr.Text = "1";
            if (AddDataGrid.Items.Count > 0) buttonCreateCSV.IsEnabled = true;
            VulTestNr(testBlocks);
        }

        /// <summary>
        ///     Vuls the test nr.
        /// </summary>
        /// <param name="testBlocks">The test blocks.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for VulTestNr
        private void VulTestNr(List<TestResultsFactory.TestBlocks> testBlocks)
        {
            ComboboxSelectNr.Items.Clear();
            for (var x = 0; x < testBlocks.Count; x++) ComboboxSelectNr.Items.Add(testBlocks[x].testnr);
        }

        /// <summary>
        ///     Handles the IsVisibleChanged event of the Window control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        private void Window_IsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            if (AddDataGrid.SelectedIndex != -1) buttonClear.IsEnabled = true;
            else buttonClear.IsEnabled = false;
        }

        /// <summary>
        ///     Handles the Loaded event of the Window control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Window_Loaded
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            MakeEmpty();
        }

        /// <summary>
        ///     Handles the DropDownClosed event of the ComboBoxScroll control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ComboBoxScroll_DropDownClosed
        private void ComboBoxScroll_DropDownClosed(object sender, EventArgs e)
        {
            TextBoxTestText.Text = ComboBoxScroll.Text;
        }

        /// <summary>
        ///     Handles the GotFocus event of the AddDataGrid control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AddDataGrid_GotFocus
        private void AddDataGrid_GotFocus(object sender, RoutedEventArgs e)
        {
            intRow = AddDataGrid.Items.IndexOf(AddDataGrid.CurrentItem);

            LabelTestRecord.Content = intRow + 1;
        }

        /// <summary>
        ///     Handles the Click event of the ButtonInsertRow control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonInsertRow_Click
        private void ButtonInsertRow_Click(object sender, RoutedEventArgs e)
        {
            var teller = 1;

            if (TextHowManyRows.Text != string.Empty) teller = Convert.ToInt32(TextHowManyRows.Text);
            if (TextInsertRow.Text != string.Empty)
            {
                var row = Convert.ToInt32(TextInsertRow.Text);
                if (row > 0)
                {
                    var query = "UPDATE testblock SET testnr = testnr + " + teller + " ";
                    query += "WHERE testblock = '" + TextBoxModuleName.Text + "' AND ";
                    query += "testnr >= " + row + ";";
                    GeneralFunctionality.Functions.InitializeDatabaseConnection(false);
                    GenericDataRead.INUPDEL(query);
                    VulLabel();
                }

                TextInsertRow.Text = string.Empty;
                TextHowManyRows.Text = "1";
                ButtonInsertRow.IsEnabled = false;
            }
        }

        /// <summary>
        ///     Handles the KeyDown event of the TextInsertRow control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="KeyEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextInsertRow_KeyDown
        private void TextInsertRow_KeyDown(object sender, KeyEventArgs e)
        {
            if (TextInsertRow.Text != string.Empty)
                ButtonInsertRow.IsEnabled = true;
            else
                ButtonInsertRow.IsEnabled = false;
        }

        /// <summary>
        ///     Handles the DropDownClosed event of the ComboboxSelectNr control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ComboboxSelectNr_DropDownClosed
        private void ComboboxSelectNr_DropDownClosed(object sender, EventArgs e)
        {
            if (ComboboxSelectNr.Text != string.Empty)
            {
                HaalGegevensInEdit(ComboboxSelectNr.Text, false);
                AddDataGrid.SelectedValuePath = "id";
                AddDataGrid.SelectedValue = TextBoxTestId.Text;
                intRow = AddDataGrid.SelectedIndex;
            }
        }

        /// <summary>
        ///     Handles the TextChanged event of the TextBoxNrFrom control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="TextChangedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBoxNrFrom_TextChanged
        private void TextBoxNrFrom_TextChanged(object sender, TextChangedEventArgs e)
        {
            TextBoxNrFrom.Text = Regex.Replace(TextBoxNrFrom.Text, "[^0-9]+", "");
        }

        /// <summary>
        ///     Handles the TextChanged event of the TextBoxNrTo control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="TextChangedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBoxNrTo_TextChanged
        private void TextBoxNrTo_TextChanged(object sender, TextChangedEventArgs e)
        {
            TextBoxNrTo.Text = Regex.Replace(TextBoxNrTo.Text, "[^0-9]+", "");
        }

        /// <summary>
        ///     Handles the Click event of the ButtonSubmitFromTo control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonSubmitFromTo_Click
        private void ButtonSubmitFromTo_Click(object sender, RoutedEventArgs e)
        {
            if (TextBoxNrFrom.Text != string.Empty && TextBoxNrTo.Text != string.Empty)
            {
                var query = "INSERT INTO testblock";
                query += "(testblock, ";
                query += "testnr, ";
                query += "testcase, ";
                query += "testlogicalobjectname, ";
                query += "testelement, ";
                query += "testattribute, ";
                query += "testaction, ";
                query += "testtag, ";
                query += "testtext, ";
                query += "testurl, ";
                query += "testswitch, ";
                query += "testdescription, ";
                query += "testexecution, ";
                query += "testext_check, ";
                query += "testinverse, ";
                query += "test_comment, ";
                query += "project_id, ";
                query += "test_password) ";
                query += "SELECT ";
                query += "testblock, ";
                query += TextBoxNrTo.Text + ", ";
                query += "testcase, ";
                query += "testlogicalobjectname, ";
                query += "testelement, ";
                query += "testattribute, ";
                query += "testaction, ";
                query += "testtag, ";
                query += "testtext, ";
                query += "testurl, ";
                query += "testswitch, ";
                query += "testdescription, ";
                query += "testexecution, ";
                query += "testext_check, ";
                query += "testinverse, ";
                query += "test_comment, ";
                query += "project_id, ";
                query += "test_password ";
                query += "FROM testblock ";
                query += "WHERE testblock = '" + TextBoxTestName.Text + "' ";
                query += "AND testnr = " + TextBoxNrFrom.Text;

                GenericDataRead.INUPDEL(query);

                TextBoxNrFrom.Text = string.Empty;
                TextBoxNrTo.Text = string.Empty;

                VulLabel();
            }
        }

        /// <summary>
        ///     Handles the Click event of the ButtonCreateCSV control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonCreateCSV_Click
        private void ButtonCreateCSV_Click(object sender, RoutedEventArgs e)
        {
            foreach (var testBlock in testBlocks)
                General.CSVfile(
                    GeneralFunctionality.Functions._project,
                    testBlock.testblock,
                    testBlock.testnr.ToString(),
                    testBlock.testblock,
                    "testBlock.testelementname",
                    testBlock.testelement,
                    testBlock.testattribute,
                    testBlock.testaction,
                    testBlock.testtext,
                    testBlock.testurl,
                    testBlock.testexecution,
                    testBlock.testswitch,
                    testBlock.testinverse,
                    testBlock.testcomment,
                    testBlock.testcomment,
                    machinestatic,
                    testBlock.testtag,
                    testBlock.testext_check);

            MessageBox.Show("CSV-file is created", "Create CSV-file", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        /// <summary>
        ///     Handles the Click event of the ButtonImportCSV control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonImportCSV_Click
        private void ButtonImportCSV_Click(object sender, RoutedEventArgs e)
        {
            ModuleImport.Visibility = Visibility.Visible;
        }

        /// <summary>
        ///     Reads the CSV element.
        /// </summary>
        /// <param name="bestandsnaam">The bestandsnaam.</param>
        /// <param name="scheidingsteken">The scheidingsteken.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for readCSVElement
        private void readCSVElement(string bestandsnaam, char scheidingsteken, int vanaf, int totenmet, int testnr)
        {
            using (var reader = new StreamReader(bestandsnaam))
            {
                var testcase = string.Empty;

                var data = General.GetLaatsteTestBlock(TextBoxTestName.Text);

                if (data.Rows.Count > 0) testnr = Convert.ToInt32(data.Rows[0][0].ToString()) + 101;

                var teller = 0;

                if (TextBoxInsertAfter.Text != string.Empty) testnr = Convert.ToInt32(TextBoxInsertAfter.Text) + 1;
                while (!reader.EndOfStream)
                {
                    var line = reader.ReadLine();
                    if (teller > 0)
                    {
                        var text = string.Empty;
                        var testattribute = string.Empty;

                        var values = line.Split(scheidingsteken);
                        testcase = string.Empty;

                        if (teller <= vanaf && teller >= totenmet)
                        {
                            if (values[8].Length > 0)
                            {
                                text = values[8];
                                testattribute = "id";
                            }
                            else if (values[9].Length > 0)
                            {
                                text = values[9];
                                testattribute = "name";
                            }
                            else
                            {
                                text = values[5];
                                testattribute = "xpath";
                            }

                            DataStorage.TestCases.AddTestBlock(
                                TextBoxTestName.Text,
                                testnr.ToString(),
                                testcase,
                                string.Empty,
                                text,
                                testattribute,
                                string.Empty,
                                values[7],
                                values[2],
                                "yes",
                                string.Empty,
                                "no",
                                string.Empty,
                                string.Empty,
                                string.Empty,
                                values[6],
                                values[7],
                                project_id);

                            testnr++;
                        }
                    }

                    teller++;
                }
            }
        }

        /// <summary>
        ///     Reads the CSV test case.
        /// </summary>
        /// <param name="bestandsnaam">The bestandsnaam.</param>
        /// <param name="scheidingsteken">The scheidingsteken.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for readCSVTestCase
        private void readCSVTestCase(string bestandsnaam, char scheidingsteken, int vanaf, int totenmet, int testnr)
        {
            using (var reader = new StreamReader(bestandsnaam))
            {
                var testcase = string.Empty;

                var data = General.GetLaatsteTestBlock(TextBoxTestName.Text);

                if (data.Rows.Count > 0) testnr = Convert.ToInt32(data.Rows[0][0].ToString()) + 101;

                var teller = 0;

                if (TextBoxInsertAfter.Text != string.Empty) testnr = Convert.ToInt32(TextBoxInsertAfter.Text) + 1;
                while (!reader.EndOfStream)
                {
                    var line = reader.ReadLine();
                    if (teller > 0)
                    {
                        var values = line.Split(scheidingsteken);

                        if (Convert.ToInt32(values[1]) >= vanaf && Convert.ToInt32(values[1]) <= totenmet)
                        {
                            testcase = values[2];
                            var testelementname = values[3];
                            var testelement = values[4];
                            var testattribute = values[5];
                            var testaction = values[6];
                            var testtext = values[7];
                            var testurl = values[8];
                            var testexecution = values[9];
                            var testswitch = values[10];
                            var testinverse = values[11];
                            var testdescription = values[12];
                            var testcomment = values[13];
                            var testmachinecode = values[14];
                            var testtag = values[15];
                            var testcheck = values[16];

                            DataStorage.TestCases.AddTestBlock(
                                TextBoxTestName.Text,
                                testnr.ToString(),
                                testcase,
                                testelementname,
                                testelement,
                                testattribute,
                                testaction,
                                testtext,
                                testurl,
                                testexecution,
                                testswitch,
                                testinverse,
                                testdescription,
                                testcomment,
                                testmachinecode,
                                testtag,
                                testcheck,
                                project_id);

                            testnr++;
                        }
                    }

                    teller++;
                }
            }
        }

        /// <summary>
        ///     Handles the Click event of the ButtonRangschik control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonRangschik_Click
        private void ButtonRangschik_Click(object sender, RoutedEventArgs e)
        {
            using (new PleaseWait())
            {
                var query = "SELECT id FROM testblock";
                query += " WHERE testblock = '" + ComboBoxModule.Text + "' ORDER BY testnr ";

                var dt = GenericDataRead.GetData(query);
                var teller = 1;
                if (dt.Rows.Count > 0)
                {
                    for (var row = 0; row < dt.Rows.Count; ++row)
                    {
                        var query1 = "UPDATE testblock SET testnr = " + teller + " WHERE id = " + dt.Rows[row][0];

                        GenericDataRead.INUPDEL(query1);
                        teller++;
                    }

                    VulLabel();
                }
            }
        }

        /// <summary>
        ///     Handles the 1 event of the ButtonImportCSV_Click control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonImportCSV_Click_1
        private void ButtonImportCSV_Click_1(object sender, RoutedEventArgs e)
        {
            //VersionClass.OpenBestandCSV();
            //var bestandsnaam = VersionClass.Bestandsnaam;

            //if (bestandsnaam != null && bestandsnaam.Length != 0)
            //    using (var reader = new StreamReader(bestandsnaam))
            //    {
            //        var line = reader.ReadLine();
            //        var testnr = "0";
            //        var scheidingsteken = ';';
            //        var values = line.Split(scheidingsteken);
            //       if (values[0] == "project") readCSVElement(bestandsnaam, scheidingsteken);
            //       if (values[0] == "testname") readCSVTestCase(bestandsnaam, scheidingsteken);
            //    }
        }

        /// <summary>
        ///     Handles the Click event of the ButtonCreateNew control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonCreateNew_Click
        private void ButtonCreateNew_Click(object sender, RoutedEventArgs e)
        {
            if (ButtonCreateNew.Content.ToString() == "Create New Module")
            {
                StackPanelModuleName.Visibility = Visibility.Visible;
                TextBoxModuleName.Focusable = true;
                TextBoxModuleName.Focus();
            }

            if (TextBoxModuleName.Text == string.Empty && ButtonCreateNew.Content.ToString() == "Update Module Name")
                ButtonCreateNew.Content = "Create New Module";
            VulLabel();
        }

        /// <summary>
        ///     Handles the LostFocus event of the TextBoxTestName control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBoxTestName_LostFocus
        private void TextBoxTestName_LostFocus(object sender, RoutedEventArgs e)
        {
            TextBoxTestName.IsEnabled = false;
        }

        /// <summary>
        ///     Handles the Click event of the CheckBoxCurrentProject control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CheckBoxCurrentProject_Click
        private void CheckBoxCurrentProject_Click(object sender, RoutedEventArgs e)
        {
            if (CheckBoxCurrentProject.IsChecked == true) VulComboBox();
        }

        /// <summary>
        ///     Handles the Click event of the CheckBoxAllProjects control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CheckBoxAllProjects_Click
        private void CheckBoxAllProjects_Click(object sender, RoutedEventArgs e)
        {
            if (CheckBoxAllProjects.IsChecked == true) VulComboBox();
        }

        /// <summary>
        ///     Handles the LostFocus event of the TextBoxModuleName control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBoxModuleName_LostFocus
        private void TextBoxModuleName_LostFocus(object sender, RoutedEventArgs e)
        {
            if (TextBoxModuleName.Text != string.Empty)
            {
                MakeEmpty();
                TextBoxTestCase.Text = string.Empty;
                TextBoxTestName.Text = TextBoxModuleName.Text;
                ButtonCreateNew.Content = "Update Module Name";
                VulLabel();
            }
            else
            {
                ButtonCreateNew.Content = "Create New Module";
            }
        }

        /// <summary>
        ///     Handles the TextChanged event of the TextBoxTestName control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="TextChangedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBoxTestName_TextChanged
        private void TextBoxTestName_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (TextBoxTestName.Text != string.Empty)
                buttonImportCSV.IsEnabled = true;
            else
                ButtonCreateNew.Content = "Update Module Name";
        }

        /// <summary>
        ///     Handles the DropDownClosed event of the ComboBoxModule control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ComboBoxModule_DropDownClosed
        private void ComboBoxModule_DropDownClosed(object sender, EventArgs e)
        {
            VulLabel();
            TextBoxTestName.Text = ComboBoxModule.Text;
            ButtonAdd.Visibility = Visibility.Visible;
            ButtonEdit.Visibility = Visibility.Visible;
            ButtonDelete.Visibility = Visibility.Visible;
            if (AddDataGrid.ItemsSource != null)
            {
                AddDataGrid.Visibility = Visibility.Visible;
                ButtonSubmitFromTo.IsEnabled = true;
                ButtonRangschik.IsEnabled = true;
                buttonDeleteModule.IsEnabled = true;
                buttonCreateCSV.IsEnabled = true;
                TextBoxNrFrom.IsEnabled = true;
                TextBoxNrTo.IsEnabled = true;
            }

            VulGetValues(ComboBoxModule.Text);

            buttonImportCSV.IsEnabled = true;
            StackPanelModuleName.Visibility = Visibility.Hidden;


            var query = "SELECT * FROM testblock WHERE testblock = '" + ComboBoxModule.Text +
                        "' ORDER BY testblock, testnr";
            var dt = GenericDataRead.GetData(query);

            if (dt.Rows.Count > 0)

                for (var row = 0; row < dt.Rows.Count; ++row)
                    VulLabel();
        }

        /// <summary>
        ///     Handles the TextChanged event of the TextHowManyRows control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="TextChangedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextHowManyRows_TextChanged
        private void TextHowManyRows_TextChanged(object sender, TextChangedEventArgs e)
        {
            TextHowManyRows.Text = Regex.Replace(TextHowManyRows.Text, "[^0-9]+", "");
        }

        private void TextBoxModuleFrom_TextChanged(object sender, TextChangedEventArgs e)
        {
            TextBoxModuleFrom.Text = Regex.Replace(TextBoxModuleFrom.Text, "[^0-9]+", "");
        }

        private int zoeklaatstetestnr()
        {
            var testnr = 0;
            var data = General.GetLaatsteTestBlock(TextBoxTestName.Text);

            if (data.Rows.Count > 0) testnr = Convert.ToInt32(data.Rows[0][0].ToString()) + 10;

            return testnr;
        }

        private void ButtonImportModule_Click_1(object sender, RoutedEventArgs e)
        {
            if (TextBoxModuleFrom.Text == string.Empty || TextBoxModuleTill.Text == string.Empty)
            {
                MessageBox.Show("You have to fill in the From and Till fields!!!", "Messasge", MessageBoxButton.OK,
                    MessageBoxImage.Stop);
            }
            else if (Convert.ToInt32(TextBoxModuleTill.Text) < Convert.ToInt32(TextBoxModuleFrom.Text))
            {
                MessageBox.Show("The to number must be greater or equal to the from number", "Message",
                    MessageBoxButton.OK, MessageBoxImage.Exclamation);
            }
            else
            {
                using (new PleaseWait())
                {
                    var testnr = zoeklaatstetestnr();
                    if (testnr == 0) testnr++;
                    var bestandsnaam = TextBlockFile.Text;
                    var aantaltoetevoegen =
                        Convert.ToInt32(TextBoxModuleTill.Text) - Convert.ToInt32(TextBoxModuleFrom.Text) + 20;
                    if (TextBoxInsertAfter.Text != string.Empty)
                    {
                        var query = "UPDATE testblock SET testnr = testnr + " + aantaltoetevoegen;
                        query += " WHERE testblock = '" + TextBoxTestName.Text + "' AND testnr > " +
                                 TextBoxInsertAfter.Text;
                        GenericDataRead.INUPDEL(query);

                        testnr = Convert.ToInt32(TextBoxInsertAfter.Text) + 10;
                    }
                    if (bestandsnaam != null && bestandsnaam.Length != 0)
                        try
                        {
                            using (var reader = new StreamReader(bestandsnaam))
                            {
                                var line = reader.ReadLine();
                                var scheidingsteken = ';';
                                var values = line.Split(scheidingsteken);
                                // Met alleen elementen -> 1e project
                                if (values[0] == "project")
                                    readCSVElement(bestandsnaam, scheidingsteken,
                                        Convert.ToInt32(TextBoxModuleFrom.Text),
                                        Convert.ToInt32(TextBoxModuleTill.Text), testnr);
                                if (values[0] == "testname")
                                    readCSVTestCase(bestandsnaam, scheidingsteken,
                                        Convert.ToInt32(TextBoxModuleFrom.Text),
                                        Convert.ToInt32(TextBoxModuleTill.Text), testnr);

                                VulLabel();
                            }
                        }
                        catch (Exception exception)
                        {
                            General.LogMessage(
                                exception.Message + "\r\n" + exception.Source + "\r\n" + exception.StackTrace, 4);
                            MessageBox.Show(exception.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                        }

                    VulLabel();

                    VulComboBox();

                    TextBlockFile.Text = string.Empty;
                    TextBoxModuleFrom.Text = string.Empty;
                    TextBoxModuleTill.Text = string.Empty;
                    TextBoxInsertAfter.Text = string.Empty;
                    ModuleImport.Visibility = Visibility.Hidden;
                }

                this.Refresh();
            }
        }

        private void ButtonCloseModule_Click(object sender, RoutedEventArgs e)
        {
            ModuleImport.Visibility = Visibility.Hidden;
        }

        private void ButtonSelectFile_Click(object sender, RoutedEventArgs e)
        {
            // Selecteer bestand
            VersionClass.OpenBestandCSV();
            //var bestandsnaam = VersionClass.Bestandsnaam;
            var bestandsnaam = GeneralFunctionality.Functions.GetCurrentDir(1) +
                               GeneralFunctionality.Functions._project + "\\CSV\\" + VersionClass.Bestandsnaam + ".csv";

            TextBlockFile.Text = bestandsnaam;

            if (bestandsnaam != null && bestandsnaam.Length != 0)
                try
                {
                    using (var reader = new StreamReader(bestandsnaam))
                    {
                        ButtonImportModule.IsEnabled = true;
                        TextBoxModuleFrom.IsEnabled = true;
                        TextBoxModuleTill.IsEnabled = true;
                        if (AddDataGrid.Items.Count > 0) TextBoxInsertAfter.IsEnabled = true;
                        TextBoxModuleFrom.Focusable = true;
                        TextBoxModuleFrom.Focus();
                    }
                }
                catch (Exception exception)
                {
                    General.LogMessage(
                        exception.Message + "\r\n" + exception.Source + "\r\n" + exception.StackTrace, 4);
                    MessageBox.Show(exception.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
        }

        private void ModuleImport_IsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            TextBoxModuleFrom.IsEnabled = false;
            TextBoxModuleTill.IsEnabled = false;
            TextBoxInsertAfter.IsEnabled = false;
        }

        private void TextBoxInsertAfter_TextChanged(object sender, TextChangedEventArgs e)
        {
            TextBoxInsertAfter.Text = Regex.Replace(TextBoxInsertAfter.Text, "[^0-9]+", "");
        }

        private void TextBoxModuleTill_TextChanged(object sender, TextChangedEventArgs e)
        {
            TextBoxModuleTill.Text = Regex.Replace(TextBoxModuleTill.Text, "[^0-9]+", "");
        }

        private void ButtonDeleteModule_Click(object sender, RoutedEventArgs e)
        {
            var answer = MessageBox.Show("Do you really want to delete module: '" + TextBoxTestName.Text + "'?",
                "Delete Module", MessageBoxButton.YesNo, MessageBoxImage.Question);

            if (answer == MessageBoxResult.Yes)
            {
                var query = "DELETE FROM testblock WHERE testblock = '" + TextBoxTestName.Text + "';";
                GenericDataRead.INUPDEL(query);

                TextBoxModuleName.Text = string.Empty;
                TextBoxTestName.Text = string.Empty;
                VulLabel();
                VulComboBox();
            }
        }
    }
}