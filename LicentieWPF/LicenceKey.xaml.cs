// ***********************************************************************
// Assembly         : LicentieWPF
// Author           : G.H.M.H. Schmeits
// Created          : 05-04-2018
//
// Last Modified By : G.H.M.H. Schmeits
// Last Modified On : 08-19-2018
// ***********************************************************************
// <copyright file="LicenceKey.xaml.cs" company="SCHMEITS SOFTWARE">
//     Copyright ©  2018
// </copyright>
// <summary></summary>
// ***********************************************************************

namespace LicentieWPF
{
    using System;
    using System.Data.OleDb;
    using System.IO;
    using System.Security.Cryptography;
    using System.Text;
    using System.Windows;
    using System.Windows.Controls;
    using System.Xml;

    using DataStorage;

    using GeneralFunctionality;

    using LicentieWPF.LicenseKey;

    using SKGL;

    /// <summary>
    ///     Class LicenceKey.
    /// </summary>
    /// <seealso cref="System.Windows.Window" />
    /// <seealso cref="System.Windows.Markup.IComponentConnector" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for LicenceKey
    public partial class LicenceKey : Window
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="LicenceKey" /> class.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public LicenceKey()
        {
            this.InitializeComponent();
            MaakLeeg();
            this.TextBox1.Focusable = true;
            this.TextBox1.Focus();
            this.TextBoxMachinecode.Text = LicentieMachineCode.getMachineCode().ToString();
            this.FillTextBoxes();

            // ID String...
            var IDString = "FullVersion";

            // Serial key to check...             
            var Serial = this.TextBox1.Text + this.TextBox2.Text + this.TextBox3.Text + this.TextBox4.Text
                         + this.TextBox5.Text + this.TextBox6.Text;

            // Are serial keys hashed using SHA-512?
            var AreHashed = true;

            var result = this.ValidateSerialKey(Serial + IDString);

            // if (result == 0) MessageBox.Show("Serial key found!");
            if (this.TextBox1.Text != string.Empty && this.TextBox2.Text != string.Empty
                                                   && this.TextBox3.Text != string.Empty
                                                   && this.TextBox4.Text != string.Empty
                                                   && this.TextBox5.Text != string.Empty
                                                   && this.TextBox6.Text != string.Empty)
            {
                if (result == -1) MessageBox.Show("Serial key not found!");
                if (result == -2) MessageBox.Show("Connection error!");
                if (result == -3) MessageBox.Show("Machinecode is not correct for this key!");
                if (result == -4) MessageBox.Show("The begin date is not correct!");
                if (result == -5) MessageBox.Show("The end date is not correct!");
            }
        }

        private void MaakLeeg()
        {
            this.TextBox1.Text = string.Empty;
            this.TextBox2.Text = string.Empty;
            this.TextBox3.Text = string.Empty;
            this.TextBox4.Text = string.Empty;
            this.TextBox5.Text = string.Empty;
            this.TextBox6.Text = string.Empty;
        }

        /// <summary>
        ///     Decrypts the string.
        /// </summary>
        /// <param name="cipherText">The cipher text.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for DecryptString
        public string DecryptString(string cipherText)
        {
            // Instantiate a new RijndaelManaged object to perform string symmetric encryption
            var rijndaelCipher = new RijndaelManaged();

            // Set key and IV
            rijndaelCipher.Key = Convert.FromBase64String("ABC");
            rijndaelCipher.IV = Convert.FromBase64String("123");

            // Instantiate a new MemoryStream object to contain the encrypted bytes
            var memoryStream = new MemoryStream();

            // Instantiate a new encryptor from our RijndaelManaged object
            var rijndaelDecryptor = rijndaelCipher.CreateDecryptor();

            // Instantiate a new CryptoStream object to process the data and write it to the 
            // memory stream
            var cryptoStream = new CryptoStream(memoryStream, rijndaelDecryptor, CryptoStreamMode.Write);

            // Will contain decrypted plaintext
            var plainText = string.Empty;

            try
            {
                // Convert the ciphertext string into a byte array
                var cipherBytes = Convert.FromBase64String(cipherText);

                // Decrypt the input ciphertext string
                cryptoStream.Write(cipherBytes, 0, cipherBytes.Length);

                // Complete the decryption process
                cryptoStream.FlushFinalBlock();

                // Convert the decrypted data from a MemoryStream to a byte array
                var plainBytes = memoryStream.ToArray();

                // Convert the encrypted byte array to a base64 encoded string
                plainText = Encoding.ASCII.GetString(plainBytes, 0, plainBytes.Length);
            }
            finally
            {
                // Close both the MemoryStream and the CryptoStream
                memoryStream.Close();
                cryptoStream.Close();
            }

            // Return the encrypted data as a string
            return plainText;
        }

        /// <summary>
        ///     Encrypts the string.
        /// </summary>
        /// <param name="plainText">The plain text.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for EncryptString
        public string EncryptString(string plainText)
        {
            // Instantiate a new RijndaelManaged object to perform string symmetric encryption
            var rijndaelCipher = new RijndaelManaged();

            // Set key and IV
            var abcd = Convert.FromBase64String("ABCD");
            rijndaelCipher.Key = abcd;
            var defg = Convert.FromBase64String("1234");
            rijndaelCipher.IV = defg;

            // Instantiate a new MemoryStream object to contain the encrypted bytes
            var memoryStream = new MemoryStream();

            // Instantiate a new encryptor from our RijndaelManaged object
            var rijndaelEncryptor = rijndaelCipher.CreateEncryptor();

            // Instantiate a new CryptoStream object to process the data and write it to the 
            // memory stream
            var cryptoStream = new CryptoStream(memoryStream, rijndaelEncryptor, CryptoStreamMode.Write);

            // Convert the plainText string into a byte array
            var plainBytes = Encoding.ASCII.GetBytes(plainText);

            // Encrypt the input plaintext string
            cryptoStream.Write(plainBytes, 0, plainBytes.Length);

            // Complete the encryption process
            cryptoStream.FlushFinalBlock();

            // Convert the encrypted data from a MemoryStream to a byte array
            var cipherBytes = memoryStream.ToArray();

            // Close both the MemoryStream and the CryptoStream
            memoryStream.Close();
            cryptoStream.Close();

            // Convert the encrypted byte array to a base64 encoded string
            var cipherText = Convert.ToBase64String(cipherBytes, 0, cipherBytes.Length);

            // Return the encrypted data as a string
            return cipherText;
        }

        /// <summary>
        ///     Validates the serial key.
        /// </summary>
        /// <param name="Serial">The serial.</param>
        /// <returns>System.Int32.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ValidateSerialKey
        public int ValidateSerialKey(string Serial)
        {
            var str = string.Empty;
            var str2 = string.Empty;
            var HashTransformation = true;
            try
            {
                // reading from table "Serials" and from field "SerialKey".
                if (HashTransformation)
                    str = "SELECT * FROM serials WHERE SerialKey ='" + this.SHA512String(Serial) + "'";
                else
                    str = "SELECT * FROM serials WHERE SerialKey ='" + Serial + "'";
                var dt = GenericDataRead.GetData(str);
                if (dt.Rows.Count > 0)
                {
                    str2 = dt.Rows[0][0].ToString();
                    this.LabelName.Content = dt.Rows[0][2].ToString();
                }

                if (string.IsNullOrEmpty(str2))
                    return -1; // serial key not found
                return 0; // serial key found!
            }
            catch (Exception ex)
            {
                return -2; // file error
            }
        }

        /// <summary>
        ///     Validates the serial key text.
        /// </summary>
        /// <param name="File">The file.</param>
        /// <param name="FileChecksum">The file checksum.</param>
        /// <param name="Serial">The serial.</param>
        /// <returns>System.Int32.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ValidateSerialKey_Text
        public int ValidateSerialKey_Text(string File, string FileChecksum, string Serial)
        {
            var con = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + File + ";Persist Security Info=False;";
            var oledbcon = new OleDbConnection(con);
            var objRead = default(OleDbDataReader);
            var cmd = default(OleDbCommand);
            var str = string.Empty;
            var str2 = string.Empty;

            if (System.IO.File.Exists(File) != true)
                return -1; // file not found

            if (this.Sha256File(File) != FileChecksum)
                return -2; // file checksum failed

            try
            {
                oledbcon.Open();
                str = "SELECT * FROM Hash WHERE SerialHash ='" + this.Sha512String(Serial) + "'";
                cmd = new OleDbCommand(str, oledbcon);
                objRead = cmd.ExecuteReader();

                while (objRead.Read()) str2 = objRead.ToString();

                if (string.IsNullOrEmpty(str2))
                    return -3; // serial key not found
                return 0; // serial key found!
            }
            catch (Exception ex)
            {
                return -4; // file error
            }
        }

        /// <summary>
        ///     Validates the serial key1.
        /// </summary>
        /// <param name="ConnectionString">The connection string.</param>
        /// <param name="Serial">The serial.</param>
        /// <param name="HashTransformation">if set to <c>true</c> [hash transformation].</param>
        /// <returns>System.Int32.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ValidateSerialKey1
        public int ValidateSerialKey1(string ConnectionString, string Serial, bool HashTransformation)
        {
            var str = string.Empty;
            var serialKey = string.Empty;
            var machineNumber = Convert.ToString(LicentieMachineCode.getMachineCode());

            var beginDatum = DateTime.Now;
            var eindDatum = DateTime.Now;
            if (HashTransformation)
                str = "SELECT * FROM serials WHERE SerialKey ='" + this.SHA512String(Serial) + "'";
            else
                str = "SELECT * FROM serials WHERE SerialKey ='" + Serial + "'";

            try
            {
                var table = General.ExecuteQueryCommandReturnTable(str);
                var test = new SerialKeyConfiguration();

                serialKey = table.Rows[0][1].ToString();
                machineNumber = table.Rows[0][5].ToString();
                if (string.IsNullOrEmpty(serialKey))
                    return -1; // serial key not found
                if (machineNumber != test.MachineCode.ToString())
                    return -3;
                if (beginDatum.Date < Convert.ToDateTime(table.Rows[0][3].ToString()))
                    return -4;
                if (eindDatum.Date > Convert.ToDateTime(table.Rows[0][4].ToString()))
                    return -5;
                return 0; // serial key found!
            }
            catch (Exception ex)
            {
                return -2; // file error
            }
        }

        /// <summary>
        ///     Displays the hash code.
        /// </summary>
        /// <param name="Operand">The operand.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for DisplayHashCode
        private static void DisplayHashCode(string Operand)
        {
            var HashCode = Operand.GetHashCode();
            var g = string.Format("The hash code for \"{0}\" is: 0x{1:x8}, {1}", Operand, HashCode);
            MessageBox.Show(g);
        }

        /// <summary>
        ///     Handles the Click event of the ButtonClick control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonClick_Click
        private void ButtonClick_Click(object sender, RoutedEventArgs e)
        {
            // ID String...
            var IDString = "FullVersion";

            // Serial key to check...             
            var Serial = this.TextBox1.Text + this.TextBox2.Text + this.TextBox3.Text + this.TextBox4.Text
                         + this.TextBox5.Text + this.TextBox6.Text;

            // Are serial keys hashed using SHA-512?
            var AreHashed = true;

            var result = this.ValidateSerialKey(Serial + IDString);
            if (result == 0) MessageBox.Show("Serial key found!");
            if (result == -1) MessageBox.Show("Serial key not found!");
            if (result == -2) MessageBox.Show("Connection error!");
            if (result == -3) MessageBox.Show("Machinecode is not correct for this key!");
            if (result == -4) MessageBox.Show("The begin date is not correct!");
            if (result == -5) MessageBox.Show("The end date is not correct!");
        }

        /// <summary>
        ///     Handles the Click event of the ButtonLoad control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonLoad_Click
        private void ButtonLoad_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        /// <summary>
        ///     Handles the Click event of the ButtonSave control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ButtonSave_Click
        private void ButtonSave_Click(object sender, RoutedEventArgs e)
        {
            if (General._serialKeyXML != null)
            {
                General._serialKeyXML.Key1 = this.TextBox1.Text;
                General._serialKeyXML.Key2 = this.TextBox2.Text;
                General._serialKeyXML.Key3 = this.TextBox3.Text;
                General._serialKeyXML.Key4 = this.TextBox4.Text;
                General._serialKeyXML.Key5 = this.TextBox5.Text;
                General._serialKeyXML.Key6 = this.TextBox6.Text;
            }

            var settingsXML = new XmlWriterSettings();
            settingsXML.Indent = true;
            settingsXML.OmitXmlDeclaration = true;
            settingsXML.IndentChars = "\t";

            using (var writer = XmlWriter.Create(Functions.GetCurrentDir(0) + "serialXML.xml", settingsXML))
            {
                writer.WriteStartDocument();
                writer.WriteStartElement("settings");
                writer.WriteStartElement("keys");
                writer.WriteElementString("key1", this.TextBox1.Text);
                writer.WriteElementString("key2", this.TextBox2.Text);
                writer.WriteElementString("key3", this.TextBox3.Text);
                writer.WriteElementString("key4", this.TextBox4.Text);
                writer.WriteElementString("key5", this.TextBox5.Text);
                writer.WriteElementString("key6", this.TextBox6.Text);

                writer.WriteEndElement();
                writer.WriteEndElement();
                writer.WriteEndDocument();
            }

            var dattijd = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

            var query = "UPDATE Serials SET updatedate = '" + dattijd + "'; ";
            GenericDataRead.GetData(query);
            MessageBox.Show(
                "The serial key settings are saved!!!\r\n\r\nPlease restart the application.",
                "Message",
                MessageBoxButton.OK,
                MessageBoxImage.Information);
            this.Close();          
        }

        /// <summary>
        ///     Fills the text boxes.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for FillTextBoxes
        private void FillTextBoxes()
        {
            if (General._serialKeyXML != null)
            {
                this.TextBox1.Text = General._serialKeyXML.Key1;
                this.TextBox2.Text = General._serialKeyXML.Key2;
                this.TextBox3.Text = General._serialKeyXML.Key3;
                this.TextBox4.Text = General._serialKeyXML.Key4;
                this.TextBox5.Text = General._serialKeyXML.Key5;
                this.TextBox6.Text = General._serialKeyXML.Key6;
            }
        }

        /// <summary>
        ///     Sha256s the file.
        /// </summary>
        /// <param name="input">The input.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Sha256File
        private string Sha256File(string input)
        {
            var rdr = default(FileStream);
            var sha = new SHA256Managed();
            byte[] bytes = null;
            var output = string.Empty;

            if (File.Exists(input))
            {
                rdr = new FileStream(input, FileMode.Open, FileAccess.Read);
                bytes = sha.ComputeHash(rdr);
                foreach (var b in bytes)
                    output += b.ToString("x2");
            }

            return output;
        }

        /// <summary>
        ///     Shes the a256 file.
        /// </summary>
        /// <param name="input">The input.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for SHA256File
        private string SHA256File(string input)
        {
            var rdr = default(FileStream);
            var sha = new SHA256Managed();
            byte[] bytes = null;
            var output = string.Empty;

            if (File.Exists(input))
            {
                rdr = new FileStream(input, FileMode.Open, FileAccess.Read);
                bytes = sha.ComputeHash(rdr);
                foreach (var b in bytes)
                    output += b.ToString("x2");
            }

            return output;
        }

        /// <summary>
        ///     Sha512s the string.
        /// </summary>
        /// <param name="input">The input.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Sha512String
        private string Sha512String(string input)
        {
            var data = Encoding.ASCII.GetBytes(input);
            var shaM = new SHA512Managed();
            var result = shaM.ComputeHash(data);
            var output = string.Empty;

            foreach (var b in result)
                output += b.ToString(")x2");
            return output;
        }

        /// <summary>
        ///     Shes the a512 string.
        /// </summary>
        /// <param name="input">The input.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for SHA512String
        private string SHA512String(string input)
        {
            var data = Encoding.ASCII.GetBytes(input);
            var shaM = new SHA512Managed();
            var result = shaM.ComputeHash(data);
            var output = string.Empty;

            foreach (var b in result)
                output += b.ToString("x2");
            return output;
        }

        /// <summary>
        ///     Handles the TextChanged event of the TextBox3 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.Controls.TextChangedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TextBox3_TextChanged
        private void TextBox3_TextChanged(object sender, TextChangedEventArgs e)
        {
        }
    }
}