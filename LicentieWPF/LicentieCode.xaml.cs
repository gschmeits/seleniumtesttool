// ***********************************************************************
// Assembly         : LicentieWPF
// Author           : G.H.M.H. Schmeits
// Created          : 03-07-2018
//
// Last Modified By : G.H.M.H. Schmeits
// Last Modified On : 04-17-2018
// ***********************************************************************
// <copyright file="LicentieCode.xaml.cs" company="SCHMEITS SOFTWARE">
//     Copyright ©  2018
// </copyright>
// <summary></summary>
// ***********************************************************************
namespace LicentieWPF.LicenseKey
{
    using System;
    using System.Diagnostics;
    using System.Security.Principal;
    using System.Windows;
    using System.Windows.Controls;
    using System.Windows.Input;

    using Microsoft.Win32;

    /// <summary>
    /// Interaction logic for LicentyCode.xaml
    /// </summary>
    /// <seealso cref="System.Windows.Window" />
    /// <seealso cref="System.Windows.Markup.IComponentConnector" />
    public partial class LicentieCode : Window
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicentieCode" /> class.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public LicentieCode()
        {
            InitializeComponent();

            machineCode.Text = "Your machine code is: " + LicentieMachineCode.getMachineCode();

            Dispatcher.BeginInvoke(
                (Action)delegate { Keyboard.Focus(t1); },
                System.Windows.Threading.DispatcherPriority.Render);
        }

        /// <summary>
        /// Handles the Click event of the btnLiAn control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for btnLiAn_Click
        private void btnLiAn_Click(object sender, RoutedEventArgs e)
        {
            Environment.Exit(0);
        }

        /// <summary>
        /// Handles the LostFocus event of the t1 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for t1_LostFocus
        private void t1_LostFocus(object sender, RoutedEventArgs e)
        {
            CheckVullen();
        }

        /// <summary>
        /// Handles the LostFocus event of the t2 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for t2_LostFocus
        private void t2_LostFocus(object sender, RoutedEventArgs e)
        {
            CheckVullen();
        }

        /// <summary>
        /// Handles the LostFocus event of the t3 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for t3_LostFocus
        private void t3_LostFocus(object sender, RoutedEventArgs e)
        {
            CheckVullen();
        }

        /// <summary>
        /// Handles the LostFocus event of the t4 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for t4_LostFocus
        private void t4_LostFocus(object sender, RoutedEventArgs e)
        {
            CheckVullen();
        }

        /// <summary>
        /// Handles the Click event of the btnLiOK control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RoutedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for btnLiOK_Click
        private void btnLiOK_Click(object sender, RoutedEventArgs e)
        {
            if (IsUserAdministrator())
            {
                var SSATTKEY = Registry.LocalMachine.CreateSubKey(@"SOFTWARE\SeleniumTestTool");
                using (RegistryKey testSettings = SSATTKEY.CreateSubKey("Settings"))
                {
                    // Create data for the TestSettings subkey.
                    testSettings.SetValue("ID", t1.Text + "-" + t2.Text + "-" + t3.Text + "-" + t4.Text);
                }

                MessageBox.Show(
                    "You have to restart this application\r\n\r\nClick OK to close this.",
                    "Message",
                    MessageBoxButton.OK,
                    MessageBoxImage.Information);
                Environment.Exit(0);
            }
            else
            {
                const string sTekst = @"You have to start this application as admin user!!!";
                MessageBox.Show(sTekst, "SeleniumTestTool - License Code", MessageBoxButton.OK, MessageBoxImage.Error);
                Environment.Exit(0);
            }
        }

        /// <summary>
        /// Determines whether [is user administrator].
        /// </summary>
        /// <returns><c>true</c> if [is user administrator]; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for IsUserAdministrator
        public static bool IsUserAdministrator()
        {
            // bool value to hold our return value
            bool isAdmin;
            try
            {
                // get the currently logged in user
                var user = WindowsIdentity.GetCurrent();
                var principal = new WindowsPrincipal(user);
                isAdmin = principal.IsInRole(WindowsBuiltInRole.Administrator);
            }
            catch (UnauthorizedAccessException ex)
            {
                isAdmin = false;
                Debug.Print(ex.Message);
            }
            catch (Exception ex)
            {
                isAdmin = false;
                Debug.Print(ex.Message);
            }

            return isAdmin;
        }

        /// <summary>
        /// Handles the Drop event of the t1 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="DragEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for t1_Drop
        private void t1_Drop(object sender, DragEventArgs e)
        {
            this.CheckVullen();
        }

        /// <summary>
        /// Checks the vullen.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CheckVullen
        private void CheckVullen()
        {
            if (t1.Text.Length == 5 && t2.Text.Length == 5 && t3.Text.Length == 5 && t4.Text.Length == 5)
            {
                btnLiOK.IsEnabled = true;
            }
            else
            {
                btnLiOK.IsEnabled = false;
            }
        }

        /// <summary>
        /// Handles the KeyDown event of the t1 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="KeyEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for t1_KeyDown
        private void t1_KeyDown(object sender, KeyEventArgs e)
        {
            CheckVullen();
        }

        /// <summary>
        /// Handles the KeyDown event of the t2 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="KeyEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for t2_KeyDown
        private void t2_KeyDown(object sender, KeyEventArgs e)
        {
            CheckVullen();
        }

        /// <summary>
        /// Handles the Drop event of the t2 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="DragEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for t2_Drop
        private void t2_Drop(object sender, DragEventArgs e)
        {
            CheckVullen();
        }

        /// <summary>
        /// Handles the Drop event of the t3 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="DragEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for t3_Drop
        private void t3_Drop(object sender, DragEventArgs e)
        {
            CheckVullen();
        }

        /// <summary>
        /// Handles the KeyDown event of the t3 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="KeyEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for t3_KeyDown
        private void t3_KeyDown(object sender, KeyEventArgs e)
        {
            CheckVullen();
        }

        /// <summary>
        /// Handles the KeyDown event of the t4 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="KeyEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for t4_KeyDown
        private void t4_KeyDown(object sender, KeyEventArgs e)
        {
            CheckVullen();
        }

        /// <summary>
        /// Handles the Drop event of the t4 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="DragEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for t4_Drop
        private void t4_Drop(object sender, DragEventArgs e)
        {
            CheckVullen();
        }

        /// <summary>
        /// Handles the TextChanged event of the t1 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="TextChangedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for t1_TextChanged
        private void t1_TextChanged(object sender, TextChangedEventArgs e)
        {
            CheckVullen();
        }

        /// <summary>
        /// Handles the TextChanged event of the t2 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="TextChangedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for t2_TextChanged
        private void t2_TextChanged(object sender, TextChangedEventArgs e)
        {
            CheckVullen();
        }

        /// <summary>
        /// Handles the TextChanged event of the t3 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="TextChangedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for t3_TextChanged
        private void t3_TextChanged(object sender, TextChangedEventArgs e)
        {
            CheckVullen();
        }

        /// <summary>
        /// Handles the TextChanged event of the t4 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="TextChangedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for t4_TextChanged
        private void t4_TextChanged(object sender, TextChangedEventArgs e)
        {
            CheckVullen();
        }
    }
}