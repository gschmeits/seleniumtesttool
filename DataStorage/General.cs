// ***********************************************************************
// Assembly         : DataStorage
// Author           : G.H.M.H. Schmeits
// Created          : 01-04-2018
//
// Last Modified By : G.H.M.H. Schmeits
// Last Modified On : 05-24-2019
// ***********************************************************************
// <copyright file="General.cs" company="SCHMEITS SOFTWARE">
//     Copyright ©  2018
// </copyright>
// <summary></summary>
// ***********************************************************************
/// <summary>
/// The DataStorage namespace.
/// </summary>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for DataStorage
namespace DataStorage
{
    using System;
    using System.Data;

    using MySql.Data.MySqlClient;

    /// <summary>
    /// Class General.
    /// </summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for General
    public static class General
    {
        /// <summary>
        /// The database connection
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _databaseConnection
        public static DatabaseConnection _databaseConnection;

        /// <summary>
        /// The serial key XML
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _serialKeyXML
        public static SerialKeyXML _serialKeyXML;

        /// <summary>
        /// Adds the result to database.
        /// </summary>
        /// <param name="commandText">The command text.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AddResultToDatabase
        public static void AddResultToDatabase(string commandText)
        {
            using (var objConn = new MySqlConnection(MySqlConnectionString()))
            {
                var command = objConn.CreateCommand();
                command.CommandText = commandText;
                objConn.Open();
                command.ExecuteNonQuery();
                objConn.Close();
            }
        }

        /// <summary>
        /// Executes the query command.
        /// </summary>
        /// <param name="commandText">The command text.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ExecuteQueryCommand
        public static void ExecuteQueryCommand(string commandText)
        {
            using (var objConn = new MySqlConnection(MySqlConnectionString()))
            {
                var command = objConn.CreateCommand();
                command.CommandText = commandText;
                objConn.Open();
                command.ExecuteNonQuery();
                objConn.Close();
            }
        }

        /// <summary>
        /// Executes the query command return table.
        /// </summary>
        /// <param name="commandText">The command text.</param>
        /// <returns>DataTable.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ExecuteQueryCommandReturnTable
        public static DataTable ExecuteQueryCommandReturnTable(string commandText)
        {
            using (var objConn = new MySqlConnection(MySqlConnectionString()))
            {
                var command = objConn.CreateCommand();
                command.CommandText = commandText;
                objConn.Open();
                var reader = command.ExecuteReader();
                DataTable table;

                using(table = new DataTable())
                {
                    table.Load(reader);
                    objConn.Close();
                }

                return table;
            }
        }

        /// <summary>
        /// Gets the last test run.
        /// </summary>
        /// <value>The last test run.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for LastTestRun
        public static string LastTestRun
        {
            get
            {
                const string CommandText = "SELECT testrun FROM testresultsselenium ORDER BY testrun DESC LIMIT 1";
                using (var objConn = new MySqlConnection(MySqlConnectionString()))
                {
                    var command = objConn.CreateCommand();
                    command.CommandText = CommandText;
                    objConn.Open();
                    var reader = command.ExecuteReader();
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Load(reader);
                        var testrun = 1;
                        if (table.Rows.Count > 0)
                        {
                            testrun = Convert.ToInt32(table.Rows[0][0].ToString()) + 1;
                        }

                        objConn.Close();
                        return testrun.ToString();
                    }
                }
            }
        }

        /// <summary>
        /// Gets the laatste test case.
        /// </summary>
        /// <param name="testname">The testname.</param>
        /// <returns>DataTable.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetLaatsteTestCase
        public static DataTable GetLaatsteTestCase(string testname)
        {
            var commandText = "SELECT testnr, testcase FROM testcases_selenium WHERE testname = '" + testname + "' ORDER BY testnr DESC LIMIT 1;";
            return ExecuteQueryCommandReturnTable(commandText);
        }

        /// <summary>
        /// Gets the testrun.
        /// </summary>
        /// <param name="testname">The testname.</param>
        /// <returns>DataTable.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetTestrun
        public static DataTable GetTestrun(string testname)
        {
            var commandText = "SELECT id, testname, testnr, testcase, testlogicalobjectname, testelement, testattribute, testaction, testtext, testurl, testswitch, testdescription, testexecution, testext_check, testinverse, test_comment, test_password FROM testcases_selenium WHERE testname = '" + testname + "' AND testexecution = 'yes' ORDER BY testnr";
            return ExecuteQueryCommandReturnTable(commandText);
        }

        /// <summary>
        /// Gets the test case.
        /// </summary>
        /// <param name="id">The identifier.</param>
        /// <returns>DataTable.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetTestCase
        public static DataTable GetTestCase(string id)
        {
            //var commandText = "SET @rowno = 0;";
            var commandText = "SELECT id, testname, testnr, testcase, testlogicalobjectname, testelement, testattribute, testaction, testtext, testurl, testswitch, testdescription, testexecution, testext_check, testinverse, test_comment, test_password FROM testcases_selenium WHERE id = '" + id + "';";
            return ExecuteQueryCommandReturnTable(commandText);
        }

        /// <summary>
        /// Mies the SQL connection string.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for MySqlConnectionString
        public static string MySqlConnectionString()
        {
            var connectionstring = "server=" + _databaseConnection.Host + ";";
            connectionstring += "user id=" + _databaseConnection.User + ";";
            connectionstring += "Password=" + _databaseConnection.Password + ";";
            connectionstring += "database=" + _databaseConnection.Database + ";";
            connectionstring += "Port=" + _databaseConnection.Port + ";";
            connectionstring += "SSL Mode=None;";
            connectionstring += "charset=" + _databaseConnection.Charset ;
            return connectionstring;
        }

        /// <summary>
        /// Sets the database connection.
        /// </summary>
        /// <param name="databaseConnection">The database connection.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for SetDatabaseConnection
        public static void SetDatabaseConnection(DatabaseConnection databaseConnection)
        {
            _databaseConnection = databaseConnection;
        }

        /// <summary>
        /// Sets the serial key XML.
        /// </summary>
        /// <param name="serialKeyXml">The serial key XML.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for SetSerialKeyXML
        public static void SetSerialKeyXML(SerialKeyXML serialKeyXml)
        {
            _serialKeyXML = serialKeyXml;
        }

        /// <summary>
        /// Logs the message database.
        /// </summary>
        /// <param name="message">The message.</param>
        /// <param name="niveau">The niveau.</param>
        /// <param name="testname">The testname.</param>
        /// <param name="testnr">The testnr.</param>
        /// <param name="testcase">The testcase.</param>
        /// <param name="machinecode">The machinecode.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for LogMessageDatabase
        public static void LogMessageDatabase(string message, int niveau, string testname = "", int testnr = 0, string testcase = "", string machinecode = "")
        {
            var query = "INSERT INTO log (log_text, log_type, log_testname, log_testnr, log_testcase, log_machine) ";
            query += "VALUES ('" + MySqlHelper.EscapeString(message) + "', '" + niveau + "', '";
            query += MySqlHelper.EscapeString(testname) + "', " + testnr + ", '" + MySqlHelper.EscapeString(testcase) + "', '";
            query += machinecode += "');";
            ExecuteQueryCommand(query);
        }
    }
}