// ***********************************************************************
// Assembly         : DataStorage
// Author           : G.H.M.H. Schmeits
// Created          : 01-04-2018
//
// Last Modified By : G.H.M.H. Schmeits
// Last Modified On : 05-24-2019
// ***********************************************************************
// <copyright file="General.cs" company="SCHMEITS SOFTWARE">
//     Copyright ©  2018
// </copyright>
// <summary></summary>
// ***********************************************************************
/// <summary>
/// The DataStorage namespace.
/// </summary>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for DataStorage

using System;
using System.Data;
using System.Diagnostics;
using System.IO;
using MySql.Data.MySqlClient;

namespace DataStorage
{
    /// <summary>
    ///     Class General.
    /// </summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for General
    public static class General
    {
        /// <summary>
        ///     The database connection
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _databaseConnection
        public static DatabaseConnection _databaseConnection;

        /// <summary>
        ///     The serial key XML
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for _serialKeyXML
        public static SerialKeyXML _serialKeyXML;

        /// <summary>
        ///     Gets the last test run.
        /// </summary>
        /// <value>The last test run.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for LastTestRun
        public static string LastTestRun
        {
            get
            {
                const string CommandText = "SELECT testrun FROM testresultsselenium ORDER BY testrun DESC LIMIT 1";
                using (var objConn = new MySqlConnection(MySqlConnectionString()))
                {
                    var command = objConn.CreateCommand();
                    command.CommandText = CommandText;
                    objConn.Open();
                    var reader = command.ExecuteReader();
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Load(reader);
                        var testrun = 1;
                        if (table.Rows.Count > 0) testrun = Convert.ToInt32(table.Rows[0][0].ToString()) + 1;

                        objConn.Close();
                        return testrun.ToString();
                    }
                }
            }
        }

        public static string LastScriptTotal
        {
            get
            {
                const string CommandText = "SELECT idtestscriptstotal FROM testscriptstotal ORDER BY idtestscriptstotal DESC LIMIT 1";
                using (var objConn = new MySqlConnection(MySqlConnectionString()))
                {
                    var command = objConn.CreateCommand();
                    command.CommandText = CommandText;
                    objConn.Open();
                    var reader = command.ExecuteReader();
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Load(reader);
                        var testrun = 1;
                        if (table.Rows.Count > 0) testrun = Convert.ToInt32(table.Rows[0][0].ToString()) + 1;

                        objConn.Close();
                        return testrun.ToString();
                    }
                }
            }
        }

        /// <summary>
        ///     Adds the result to database.
        /// </summary>
        /// <param name="commandText">The command text.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AddResultToDatabase
        public static void AddResultToDatabase(string commandText)
        {
            using (var objConn = new MySqlConnection(MySqlConnectionString()))
            {
                var command = objConn.CreateCommand();
                command.CommandText = commandText;
                objConn.Open();
                command.ExecuteNonQuery();
                objConn.Close();
            }
        }

        /// <summary>
        ///     Executes the query command.
        /// </summary>
        /// <param name="commandText">The command text.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ExecuteQueryCommand
        public static void ExecuteQueryCommand(string commandText)
        {
            using (var objConn = new MySqlConnection(MySqlConnectionString()))
            {
                var command = objConn.CreateCommand();
                command.CommandText = commandText;
                objConn.Open();
                command.ExecuteNonQuery();
                objConn.Close();
            }
        }

        /// <summary>
        ///     Executes the query command return table.
        /// </summary>
        /// <param name="commandText">The command text.</param>
        /// <returns>DataTable.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ExecuteQueryCommandReturnTable
        public static DataTable ExecuteQueryCommandReturnTable(string commandText)
        {
            using (var objConn = new MySqlConnection(MySqlConnectionString()))
            {
                var command = objConn.CreateCommand();
                command.CommandText = commandText;
                objConn.Open();
                var reader = command.ExecuteReader();
                DataTable table;

                using (table = new DataTable())
                {
                    table.Load(reader);
                    objConn.Close();
                }

                return table;
            }
        }

        /// <summary>
        ///     Gets the laatste test case.
        /// </summary>
        /// <param name="testname">The testname.</param>
        /// <returns>DataTable.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetLaatsteTestCase
        public static DataTable GetLaatsteTestCase(string testname)
        {
            var commandText = "SELECT testnr, testcase FROM testcases_selenium WHERE testname = '" + testname +
                              "' ORDER BY testnr DESC LIMIT 1;";
            return ExecuteQueryCommandReturnTable(commandText);
        }


        public static DataTable GetLaatsteTestBlock(string testblock)
        {
            var commandText = "SELECT testnr, testcase FROM testblock WHERE testblock = '" + testblock +
                              "' ORDER BY testnr DESC LIMIT 1;";
            return ExecuteQueryCommandReturnTable(commandText);
        }


        /// <summary>
        ///     Gets the testrun.
        /// </summary>
        /// <param name="testname">The testname.</param>
        /// <returns>DataTable.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetTestrun
        public static DataTable GetTestrun(string testname)
        {
            var commandText =
                "SELECT id, testname, testnr, testcase, testlogicalobjectname, testelement, testattribute, testaction, testtext, testurl, testswitch, testdescription, testexecution, testext_check, testinverse, test_comment, test_password FROM testcases_selenium WHERE testname = '" +
                testname + "' AND testexecution = 'yes' ORDER BY testnr";
            return ExecuteQueryCommandReturnTable(commandText);
        }

        /// <summary>
        ///     Gets the test case.
        /// </summary>
        /// <param name="id">The identifier.</param>
        /// <returns>DataTable.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetTestCase
        public static DataTable GetTestCase(string id)
        {
            //var commandText = "SET @rowno = 0;";
            var commandText =
                "SELECT id, testname, testnr, testcase, testlogicalobjectname, testelement, testattribute, testaction, testtext, testurl, testswitch, testdescription, testexecution, testext_check, testinverse, test_comment, test_password FROM testcases_selenium WHERE id = '" +
                id + "';";
            return ExecuteQueryCommandReturnTable(commandText);
        }

        public static DataTable GetTestCaseTestnr(string testnr, string testname)
        {
            //var commandText = "SET @rowno = 0;";
            var commandText = "SELECT id, testname, testnr, testcase, testlogicalobjectname, ";
            commandText += "testelement, testattribute, testaction, testtext, testurl, testswitch, ";
            commandText += "testdescription, testexecution, testext_check, testinverse, test_comment, ";
            commandText += "test_password FROM testcases_selenium WHERE testname = '" + testname + "' AND ";
            commandText += "testnr = " + testnr + ";";
            return ExecuteQueryCommandReturnTable(commandText);
        }

        /// <summary>
        ///     Gets the test case.
        /// </summary>
        /// <param name="id">The identifier.</param>
        /// <returns>DataTable.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetTestCase
        public static DataTable GetTestBlock(string id)
        {
            //var commandText = "SET @rowno = 0;";
            var commandText =
                "SELECT * FROM testblock WHERE id = '" +
                id + "';";
            return ExecuteQueryCommandReturnTable(commandText);
        }

        public static DataTable GetTestBlockTestnr(string testnr, string testblock)
        {
            //var commandText = "SET @rowno = 0;";
            var commandText = "SELECT * FROM testblock WHERE testblock = '" + testblock + "' AND ";
            commandText += "testnr = " + testnr + ";";
            return ExecuteQueryCommandReturnTable(commandText);
        }


        /// <summary>
        ///     Mies the SQL connection string.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for MySqlConnectionString
        public static string MySqlConnectionString()
        {
            var connectionstring = "server=" + _databaseConnection.Host + ";";
            connectionstring += "user id=" + _databaseConnection.User + ";";
            connectionstring += "Password=" + _databaseConnection.Password + ";";
            connectionstring += "database=" + _databaseConnection.Database + ";";
            connectionstring += "Port=" + _databaseConnection.Port + ";";
            connectionstring += "SSL Mode=None;";
            connectionstring += "charset=" + _databaseConnection.Charset;
            return connectionstring;
        }

        /// <summary>
        ///     Sets the database connection.
        /// </summary>
        /// <param name="databaseConnection">The database connection.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for SetDatabaseConnection
        public static void SetDatabaseConnection(DatabaseConnection databaseConnection)
        {
            _databaseConnection = databaseConnection;
        }

        /// <summary>
        ///     Sets the serial key XML.
        /// </summary>
        /// <param name="serialKeyXml">The serial key XML.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for SetSerialKeyXML
        public static void SetSerialKeyXML(SerialKeyXML serialKeyXml)
        {
            _serialKeyXML = serialKeyXml;
        }

        /// <summary>
        ///     Logs the message database.
        /// </summary>
        /// <param name="message">The message.</param>
        /// <param name="niveau">The niveau.</param>
        /// <param name="testname">The testname.</param>
        /// <param name="testnr">The testnr.</param>
        /// <param name="testcase">The testcase.</param>
        /// <param name="machinecode">The machinecode.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for LogMessageDatabase
        public static void LogMessageDatabase(string message, int niveau, string testname = "", int testnr = 0,
            string testcase = "", string machinecode = "")
        {
            var query = "INSERT INTO log (log_text, log_type, log_testname, log_testnr, log_testcase, log_machine) ";
            query += "VALUES ('" + MySqlHelper.EscapeString(message) + "', '" + niveau + "', '";
            query += MySqlHelper.EscapeString(testname) + "', " + testnr + ", '" + MySqlHelper.EscapeString(testcase) +
                     "', '";
            query += machinecode += "');";
            ExecuteQueryCommand(query);
        }

        public static string GetTempPath()
        {
            var path = Environment.GetEnvironmentVariable("TEMP");
            if (!path.EndsWith("\\", StringComparison.CurrentCulture)) path += "\\";
            return path;
        }

        [Conditional("DEBUG")]
        public static void LogMessage(string message, int niveau, string testname = "", int testnr = 0,
            string testcase = "", string testaction = "", string testattribute = "", string machinecode = "")
        {
            // string message, int niveau, int testnr = 0, string testcase = ""
            var DatumG = string.Empty;
            DatumG += DateTime.Now.Year.ToString();
            if (DateTime.Now.Month < 10) DatumG += "0";
            DatumG += DateTime.Now.Month.ToString();
            if (DateTime.Now.Day < 10) DatumG += "0";
            DatumG += DateTime.Now.Day.ToString();

            var dir1 = GetTempPath();

            if (dir1 != null)
            {
                var appendtext = dir1 + @"\Logfile_" + DatumG + ".txt";


                var sw = File.AppendText(appendtext); // Change filename
                try
                {
                    var niveau1 = string.Empty;
                    switch (niveau)
                    {
                        case 1:
                            niveau1 = "Info     ";
                            break;

                        case 2:
                            niveau1 = "Warning  ";
                            break;

                        case 3:
                            niveau1 = "Failure  ";
                            break;

                        case 4:
                            niveau1 = "Critical ";
                            break;

                        default:
                            niveau1 = "Info     ";
                            break;
                    }


                    var logLine = string.Format("{0:G}|{1}|TestStep|{3}|{2}|{4}|{5}|{6}", DateTime.Now, niveau1,
                        message,
                        testcase, testnr, testattribute, testaction);

                    if (testnr == 0) logLine = string.Format("{0:G}|{1}|{2}", DateTime.Now, niveau1, message);

                    sw.WriteLine(logLine);
                }
                finally
                {
                    sw.Close();
                }
            }
        }

        public static void CSVfile(string project, string testname,
            string testnr,
            string testcase,
            string testelementname,
            string testelement,
            string testattribute,
            string testaction,
            string testtext,
            string testurl,
            string testexecution,
            string testswitch,
            string testinverse,
            string testdescription,
            string testcomment,
            string testmachinecode,
            string testtag,
            string testcheck,
            string test_password = "")
        {
            // string message, int niveau, int testnr = 0, string testcase = ""
            var DatumG = string.Empty;
            DatumG += DateTime.Now.Year.ToString();
            if (DateTime.Now.Month < 10) DatumG += "0";
            DatumG += DateTime.Now.Month.ToString();
            if (DateTime.Now.Day < 10) DatumG += "0";
            DatumG += DateTime.Now.Day.ToString();
            if (DateTime.Now.Hour < 10) DatumG += "0";
            DatumG += DateTime.Now.Hour.ToString();
            if (DateTime.Now.Minute < 10) DatumG += "0";
            DatumG += DateTime.Now.Minute.ToString();
            if (DateTime.Now.Second < 10) DatumG += "0";
            DatumG += DateTime.Now.Second.ToString();

            var fileName = GenericDataConnection.GetCurrentDir(1) + project + @"\CSV\CSV_" + testname.Trim() + "_" +
                           DatumG +
                           ".csv";

            if (!File.Exists(fileName))
                // Create a file to write to.
                using (var sw = File.CreateText(fileName))
                {
                    sw.WriteLine("{0};{1};{2};{3};{4};{5};{6};{7};{8};{9};{10};{11};{12};{13};{14};{15};{16}",
                        "testname", "testnr", "testcase", "testelementname", "testelement", "testattribute",
                        "testaction", "testtext", "testurl", "testexecution", "testswitch", "testinverse",
                        "testdescription", "testcomment", "testmachinecode", "testtag", "testcheck");
                }

            using (var sw = File.AppendText(fileName))
            {
                var logLine = string.Format(
                    "{0};{1};{2};{3};{4};{5};{6};{7};{8};{9};{10};{11};{12};{13};{14};{15};{16}",
                    testname, testnr, testcase, testelementname, testelement, testattribute, testaction, testtext,
                    testurl, testexecution,
                    testswitch, testinverse, testdescription, testcomment, testmachinecode, testtag, testcheck);

                sw.WriteLine(logLine);
            }
        }

        public static void CSVfileElements(
            string project,
            string idselenium_elements,
            string url,
            string gebruikte_link,
            string testname,
            string xpath,
            string tagname,
            string text,
            string id,
            string name,
            string class1,
            string href1,
            string title,
            string value1,
            string datetime_created,
            string selenium_check,
            string checktext,
            string project_id,
            string uri)
        {
            // string message, int niveau, int testnr = 0, string testcase = ""
            var DatumG = string.Empty;
            DatumG += DateTime.Now.Year.ToString();
            if (DateTime.Now.Month < 10) DatumG += "0";
            DatumG += DateTime.Now.Month.ToString();
            if (DateTime.Now.Day < 10) DatumG += "0";
            DatumG += DateTime.Now.Day.ToString();
            if (DateTime.Now.Hour < 10) DatumG += "0";
            DatumG += DateTime.Now.Hour.ToString();
            if (DateTime.Now.Minute < 10) DatumG += "0";
            DatumG += DateTime.Now.Minute.ToString();
            if (DateTime.Now.Second < 10) DatumG += "0";
            DatumG += DateTime.Now.Second.ToString();

            //  uri.Replace('/', '_') + "_" +

            var fileName = GenericDataConnection.GetCurrentDir(1) + project + @"\CSV\CSV_" + project + "_" +
                           DatumG +
                           ".csv";

            if (!File.Exists(fileName))
                // Create a file to write to.
                using (var sw = File.CreateText(fileName))
                {
                    sw.WriteLine("{0};{1};{2};{3};{4};{5};{6};{7};{8};{9};{10};{11};{12};{13};{14};{15};{16};{17}",
                        "project", "idselenium_elements", "url", "gebruikte_link", "testname", "xpath", "tagname",
                        "text", "id", "name", "class", "href", "title", "value", "datetime_created", "selenium_check",
                        "checktext", "project_id");
                }

            using (var sw = File.AppendText(fileName))
            {
                var logLine = string.Format(
                    "{0};{1};{2};{3};{4};{5};{6};{7};{8};{9};{10};{11};{12};{13};{14};{15};{16};{17}",
                    project, idselenium_elements,
                    url, gebruikte_link, testname, xpath, tagname, text, id, name, class1, href1,
                    title,
                    value1, datetime_created, selenium_check, checktext, project_id);

                sw.WriteLine(logLine);
            }
        }
    }
}