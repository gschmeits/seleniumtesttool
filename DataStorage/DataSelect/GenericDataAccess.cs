// ***********************************************************************
// Assembly         : BikeBill2014
// Author           : G.H.M.H. Schmeits
// Created          : 12-18-2013
//
// Last Modified By : G.H.M.H. Schmeits
// Last Modified On : 05-24-2019
// ***********************************************************************
// <copyright file="GenericDataAccess.cs" company="SCHMEITS SOFTWARE">
//     Copyright (c) . All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************


/// <summary>
/// The DataStorage namespace.
/// </summary>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for DataStorage
namespace DataStorage
{
    using System;
    using System.Data;
    using System.Data.Common;
    using System.Windows;

    using BlogsPrajeesh.BlogSpot.WPFControls;

    using MySql.Data.MySqlClient;

    /// <summary>
    /// Class GenericDataAccess.
    /// </summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for GenericDataAccess
    public static class GenericDataAccess
    {
        /// <summary>
        /// Creates the command.
        /// </summary>
        /// <returns>DbCommand.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CreateCommand
        public static DbCommand CreateCommand()
        {
            var connectionString = GenericDataConnection.DbConnectionString;
            DbConnection conn = new MySqlConnection();
            // Set the connection string
            conn.ConnectionString = connectionString;
            // Create a database-specific command object
            var comm = conn.CreateCommand();
            // Set the command type to stored procedure
            comm.CommandType = CommandType.StoredProcedure;
            // Return the initialized command object
            return comm;
        }

        /// <summary>
        /// Creates the command stored procedure.
        /// </summary>
        /// <returns>DbCommand.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CreateCommandStoredProcedure
        public static DbCommand CreateCommandStoredProcedure()
        {
            // Obtain the database provider name
            var connectionString = GenericDataConnection.DbConnectionString;
            // Create a new data provider factory
            DbConnection conn = new MySqlConnection();
            // Obtain a database-specific connection object
            // DbConnection conn = factory.CreateConnection();
            // Set the connection string
            conn.ConnectionString = connectionString;
            // Create a database-specific command object
            var comm = conn.CreateCommand();
            // Set the command type to stored procedure
            comm.CommandType = CommandType.StoredProcedure;
            // Return the initialized command object
            return comm;
        }

        /// <summary>
        /// Creates the command text.
        /// </summary>
        /// <returns>DbCommand.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CreateCommandText
        public static DbCommand CreateCommandText()
        {
            // Obtain the database provider name
            //var connectionString = GenericDataConnection.DbConnectionString;
            var connectionString = General.MySqlConnectionString();
            DbConnection conn = new MySqlConnection();
            // Set the connection string
            conn.ConnectionString = connectionString;
            // Create a database-specific command object
            var comm = conn.CreateCommand();
            // Set the command type to stored procedure
            comm.CommandType = CommandType.Text;
            // Return the initialized command object
            return comm;
        }

        // execute an update, detele, or insert command
        /// <summary>
        /// Executes the non query.
        /// </summary>
        /// <param name="command">The command.</param>
        /// <returns>System.Int32.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ExecuteNonQuery
        public static int ExecuteNonQuery(DbCommand command)
        {
            // The number of affected rows
            var affectedRows = -1;
            // Execute the command making sure the connection gets closed in the end
            try
            {
                // Opend the connection of the command
                command.Connection.Open();
                // Execute the command ad get the number of affected rows
                affectedRows = command.ExecuteNonQuery();
            }
            catch (MySqlException ex)
            {
                //Utilities.LogError(ex);
                //MessageBox.Show(ex.Message + ex.StackTrace, "Ger Exception Detail");
                var str = ex;
                var message =
                    "De database kan niet geraadpleegd worden.\r\n\r\nControleer of er een netwerkconnectie is.";
                //message += "\r\n\r\n"+ ex.Message + ex.StackTrace;
                //melding frmMelding = new melding(message);
                //frmMelding.ShowDialog();
                throw;
            }
            finally
            {
                // Close the connection
                command.Connection.Close();
            }

            // return the number of affacted rows
            return affectedRows;
        }

        /// <summary>
        /// Executes the select command.
        /// </summary>
        /// <param name="command">The command.</param>
        /// <returns>DataTable.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ExecuteSelectCommand
        public static DataTable ExecuteSelectCommand(DbCommand command)
        {
            // The DataTable to be returned
            DataTable table;
            // Execute the command, making sure the connection gets closed in the
            // end
            table = new DataTable();
            Functions.LogMessageDatabase(command.CommandText, 1);
            try
            {
                // Open the data connection
                command.Connection.Open();
                // Execute the command and save the results in a DataTable
                var reader = command.ExecuteReader();
                table.Clear();

                table.Load(reader);
                // Close the reader
                reader.Close();
            }
            catch (Exception ex) when (ex is MySqlException || ex is ConstraintException || ex is Exception)
            {
                //Utilities.LogError(ex);
                //MessageBox.Show(ex.Message + ex.StackTrace, "Ger Exception Detail");
                //Functions.LogMessageDatabase(ex.Message, 4);
                //Functions.LogMessageDatabase(ex.StackTrace, 4);
                //Functions.LogMessageDatabase(command.CommandText, 4);
                var str = ex;
                var message =
                    "De database kan niet geraadpleegd worden.\r\n\r\nControleer of er een netwerkconnectie is.";
                message += "\r\n\r\n" + ex.Message + ex.StackTrace;
                message += "\r\n\r\n" + "sql commando:\r\n" + command.CommandText;
                WPFMessageBox.Show("Foutmelding", message, WPFMessageBoxButtons.OK, WPFMessageBoxImage.Error);
                //Functions.LogMessageDatabase(message, 4);
                Application.Current.Shutdown();
            }

            return table;
        }

        /// <summary>
        /// Executes the select non query.
        /// </summary>
        /// <param name="command">The command.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ExecuteSelectNonQuery
        public static void ExecuteSelectNonQuery(DbCommand command)
        {
            try
            {
                // Open the data connection
                command.Connection.Open();
                command.ExecuteNonQuery();
                command.Connection.Close();
            }
            catch (MySqlException ex)
            {
                //Utilities.LogError(ex);
                //MessageBox.Show(ex.Message + ex.StackTrace, "Ger Exception Detail");
                var str = ex;
                var message =
                    "De database kan niet geraadpleegd worden.\r\n\r\nControleer of er een netwerkconnectie is.";
                //message += "\r\n\r\n"+ ex.Message + ex.StackTrace;
                //BikeBillWPF2014.melding frmMelding = new BikeBillWPF2014.melding(message);
                //frmMelding.ShowDialog();
                throw;
            }
            finally
            {
                // Close the connection
                command.Connection.Close();
            }
        }

        /// <summary>
        /// Strings the scalar.
        /// </summary>
        /// <param name="command">The command.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for strScalar
        public static string strScalar(DbCommand command)
        {
            var strWaarde = "";
            Functions.LogMessageDatabase(command.CommandText, 1);
            try
            {
                // Open the data connection
                command.Connection.Open();
                // Execute the command and save the results in a DataTable
                strWaarde = command.ExecuteScalar().ToString();
            }
            catch (MySqlException ex)
            {
                //Utilities.LogError(ex);
                //MessageBox.Show(ex.Message + ex.StackTrace, "Ger Exception Detail");
                var str = ex;
                var message =
                    "De database kan niet geraadpleegd worden.\r\n\r\nControleer of er een netwerkconnectie is.";
                //message += "\r\n\r\n"+ ex.Message + ex.StackTrace;
                //BikeBillWPF2014.melding frmMelding = new BikeBillWPF2014.melding(message);
                //frmMelding.ShowDialog();
                throw;
            }
            finally
            {
                // Close the connection
                command.Connection.Close();
            }

            return strWaarde;
        }
    }
}