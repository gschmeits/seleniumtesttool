// ***********************************************************************
// Assembly         : BikeBill2014
// Author           : G.H.M.H. Schmeits
// Created          : 12-18-2013
//
// Last Modified By : G.H.M.H. Schmeits
// Last Modified On : 05-24-2019
// ***********************************************************************
// <copyright file="GenericDataConnection.cs" company="SCHMEITS SOFTWARE">
//     Copyright (c) . All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************



using System;
using System.Collections.Generic;
using System.IO;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Linq;
using BlogsPrajeesh.BlogSpot.WPFControls;

/// <summary>
/// The DataStorage namespace.
/// </summary>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for DataStorage
namespace DataStorage
{
    /// <summary>
    /// Class GenericDataConnection.
    /// </summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for GenericDataConnection
    internal class GenericDataConnection
    {
        /// <summary>
        /// The database connection string
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for dbConnectionString
        private static readonly string dbConnectionString;

        /// <summary>
        /// The database provider name
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for dbProviderName
        private static readonly string dbProviderName;
        /// <summary>
        /// Initializes static members of the <see cref="GenericDataConnection" /> class.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        static GenericDataConnection()
        {
            var sServerName = "SCHMEITSNAS.SYNOLOGY.ME";
            var sPort = "3306";
            var sUserName = "autotest";
            var sPassword = "NiFSi1fZjbJ4zXE8";
            var sDatabase = "autotest";
            var sProvider = "MySql.Data.MySqlClient";

            sServerName = string.Empty;
            sPort = string.Empty;
            sUserName = string.Empty;
            sPassword = string.Empty;
            sDatabase = string.Empty;
            sProvider = string.Empty;

            XElement xelement = XElement.Load(GetCurrentDir(0) + "connect.xml");

            IEnumerable<XElement> testsElements = xelement.Elements();
            foreach (var testElement in testsElements)
            {
                sServerName = testElement.Element("host").Value;
                sDatabase = testElement.Element("database").Value;
                sPort = testElement.Element("port").Value;
                sUserName = testElement.Element("username").Value;
                sPassword = testElement.Element("password").Value;
            }

            
            // Stel de connection string samen
            dbConnectionString = "server=" + sServerName + ":"+ sPort +";";
            dbConnectionString += "User ID=" + sUserName + ";";
            dbConnectionString += "Password=" + sPassword + ";";
            dbConnectionString += "database=" + sDatabase + ";";
            dbConnectionString += "charset=utf8;";

            dbConnectionString = General.MySqlConnectionString();
            // Stel de provider string samen
            dbProviderName = sProvider;
        }

        /// <summary>
        /// Gets the current dir.
        /// </summary>
        /// <param name="niveau">The niveau.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetCurrentDir
        public static string GetCurrentDir(int niveau)
        {
            var ValueList = new List<string>();
            if (File.Exists("settings.xml"))
            {
                var xDoc = new XmlDocument();
                xDoc.Load("settings.xml");
                try
                {
                    var xelement = XElement.Load("settings.xml");
                    var elementVars = xelement.Elements();
                    foreach (var elementVar in elementVars) ValueList.Add(elementVar.Value);
                }
                catch (Exception ex)
                {
                    General.LogMessageDatabase(ex.Message + ex.StackTrace, 4);
                    MessageBox.Show(
                        "The 'settings.xml' file is not found!!!\r\nPlease fill in the correct drive and directory.\r\n"
                        + Environment.CurrentDirectory,
                        "Settings Error",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                    ValueList[0] = Environment.CurrentDirectory;
                }
            }
            else
            {
                MessageBox.Show(
                    "The 'settings.xml' file is not found!!!\r\nPlease fill in the correct drive and directory.\r\n"
                    + Environment.CurrentDirectory,
                    "Settings Error",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }

            return ValueList[niveau];
        }



        /// <summary>
        /// Gets the database connection string.
        /// </summary>
        /// <value>The database connection string.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for DbConnectionString
        public static string DbConnectionString => dbConnectionString;

        /// <summary>
        /// Gets the name of the database provider.
        /// </summary>
        /// <value>The name of the database provider.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for DbProviderName
        public static string DbProviderName => dbProviderName;
    }
}