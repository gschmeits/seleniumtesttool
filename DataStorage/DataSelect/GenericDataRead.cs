// ***********************************************************************
// Assembly         : BikeBill2014
// Author           : G.H.M.H. Schmeits
// Created          : 12-18-2013
//
// Last Modified By : G.H.M.H. Schmeits
// Last Modified On : 05-24-2019
// ***********************************************************************
// <copyright file="GenericDataRead.cs" company="SCHMEITS SOFTWARE">
//     Copyright (c) . All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using MySql.Data.MySqlClient;
using System.Data;
using System.Data.Common;
using System.Windows.Forms;


/// <summary>
/// The DataStorage namespace.
/// </summary>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for DataStorage
namespace DataStorage
{
    /// <summary>
    /// Class GenericDataRead.
    /// </summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for GenericDataRead
    public class GenericDataRead
    {
        /// <summary>
        /// Initializes static members of the <see cref="GenericDataRead" /> class.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        static GenericDataRead()
        {
        }

        /// <summary>
        /// Gets the data.
        /// </summary>
        /// <param name="strQue">The string que.</param>
        /// <returns>DataTable.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetData
        public static DataTable GetData(string strQue)
        {
            //strQue = strQue.ToLower();
            //  Get a configured DbCommand object
            var comm = GenericDataAccess.CreateCommandText();
            // Set the stored procedure name
            comm.CommandText = strQue;
            //Functions.LogMessageDatabase(strQue, 1);
            //MessageBox.Show(strQue);
            //Debug.Print(strQue);
            // Execute stored procedure and return the results
            return GenericDataAccess.ExecuteSelectCommand(comm);
        }

        /// <summary>
        /// Inupdels the specified string que.
        /// </summary>
        /// <param name="strQue">The string que.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for INUPDEL
        public static bool INUPDEL(string strQue)
        {
            //strQue = strQue.ToLower();
            // get a configured DbCommand object
            DbCommand comm = GenericDataAccess.CreateCommandText();
            // set the stored procedure name
            comm.CommandText = strQue;

            // result will respresent the njumber of changed rows
            int result = -1;
            try
            {
                // execute the stored procedure
                result = GenericDataAccess.ExecuteNonQuery(comm);
            }
            catch (MySqlException ex)
            {
                //Utilities.LogError(ex);
                //MessageBox.Show(ex.Message + ex.StackTrace, "Ger Exception Detail");
                var str = ex;
                string message = "De database kan niet geraadpleegd worden.\r\n\r\nControleer of er een netwerkconnectie is.";
                message += "\r\n\r\n" + ex.Message + ex.StackTrace + "\r\n\r\n" + strQue;
                MessageBox.Show(message);
                General.LogMessage(
                    "INUPDEL query: '" + strQue + "'.",
                    4,
                    strQue,
                    0,
                    string.Empty,
                    InloggerData.MachineCode);

                //BikeBillWPF2014.melding frmMelding = new BikeBillWPF2014.melding(message);
                //frmMelding.ShowDialog();
                //throw;
            }
            finally
            {
                comm.Connection.Close();
            }

            // result will be 1 in case of success
            return (result != -1);
        }
    }
}