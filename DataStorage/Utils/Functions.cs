// ***********************************************************************
// Assembly         : DataStorage
// Author           : G.H.M.H. Schmeits
// Created          : 07-21-2018
//
// Last Modified By : G.H.M.H. Schmeits
// Last Modified On : 05-24-2019
// ***********************************************************************
// <copyright file="Functions.cs" company="SCHMEITS SOFTWARE">
//     Copyright ©  2018
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using DataStorage;
using NUnit.Framework;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using Keys = OpenQA.Selenium.Keys;

/// <summary>
/// Class Functions.
/// </summary>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for Functions
public static class Functions
{
    /// <summary>
    /// Database1s the specified XML text.
    /// </summary>
    /// <param name="xmlText">The XML text.</param>
    /// <returns>System.String.</returns>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for Database1
    public static string Database1(string xmlText)
    {
        var doc = new XmlDocument();
        doc.Load(xmlText);

        var node = doc.DocumentElement.SelectSingleNode("/serverdata/database");
        var text = node.InnerText;
        return text;
    }

    /// <summary>
    /// Gets the temporary path.
    /// </summary>
    /// <returns>System.String.</returns>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for GetTempPath
    public static string GetTempPath()
    {
        var path = Environment.GetEnvironmentVariable("TEMP");
        if (!path.EndsWith("\\", StringComparison.CurrentCulture)) path += "\\";
        return path;
    }

    /// <summary>
    /// Logs the message to file.
    /// </summary>
    /// <param name="message">The message.</param>
    /// <param name="niveau">The niveau.</param>
    /// <param name="testnr">The testnr.</param>
    /// <param name="testcase">The testcase.</param>
    public static void LogMessageDatabase(string message, int niveau, int testnr = 0, string testcase = "")
    {
        var DatumG = string.Empty;

        DatumG += DateTime.Now.Year.ToString();
        if (DateTime.Now.Month < 10) DatumG += "0";
        DatumG += DateTime.Now.Month.ToString();
        if (DateTime.Now.Day < 10) DatumG += "0";
        DatumG += DateTime.Now.Day.ToString();

        var sw = File.AppendText(GetTempPath() + "Logfile_" + DatumG + ".txt"); // Change filename
        try
        {
            var niveau1 = string.Empty;
            switch (niveau)
            {
                case 1:
                    niveau1 = "Info    ";
                    break;

                case 2:
                    niveau1 = "Warning ";
                    break;

                case 3:
                    niveau1 = "Failure ";
                    break;

                case 4:
                    niveau1 = "Critical";
                    break;

                default:
                    niveau1 = "Info    ";
                    break;
            }

            var logLine = string.Format("{0:G}:\t{1}\t{2}.", DateTime.Now, niveau1, message);
            sw.WriteLine(logLine);
        }
        finally
        {
            sw.Close();
        }
    }

    /// <summary>
    /// Meldings the geen gegevens.
    /// </summary>
    /// <param name="strTabel">The string tabel.</param>
    /// <returns>System.Int32.</returns>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for MeldingGeenGegevens
    public static int MeldingGeenGegevens(string strTabel)
    {
        var strCap = "Foutmelding";
        var strMelding = "Er zijn geen gegevens gevonden\r\nVoeg eerst de benodigde gegevens toe in tabel: '" + strTabel
                                                                                                              + "'!!!";
        MessageBox.Show(
            strMelding,
            strCap,
            MessageBoxButtons.OK,
            MessageBoxIcon.Warning,
            MessageBoxDefaultButton.Button1);
        return 0;
    }

    /// <summary>
    /// Meldings the voltooid.
    /// </summary>
    /// <returns>System.Int32.</returns>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for MeldingVoltooid
    public static int MeldingVoltooid()
    {
        var strCap = "Melding";
        var strMelding = "Voltooid";
        MessageBox.Show(
            strMelding,
            strCap,
            MessageBoxButtons.OK,
            MessageBoxIcon.Exclamation,
            MessageBoxDefaultButton.Button1);
        return 0;
    }

    /// <summary>
    /// Password1s the specified XML text.
    /// </summary>
    /// <param name="xmlText">The XML text.</param>
    /// <returns>System.String.</returns>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for Password1
    public static string Password1(string xmlText)
    {
        var doc = new XmlDocument();
        doc.Load(xmlText);

        var node = doc.DocumentElement.SelectSingleNode("/serverdata/password");
        var text = node.InnerText;
        using (SHA1 sha = new SHA1CryptoServiceProvider())
        {
            var encoder = new ASCIIEncoding();
            var combined = encoder.GetBytes("bikebill");
            var hash = BitConverter.ToString(sha.ComputeHash(combined)).Replace("-", string.Empty);

            if (hash == text.ToUpper()) return "bikebill";

            MessageBox.Show(
                "Kan geen connectie met de database tot stand brengen.\r\nApplicatie wordt afgesloten!!!",
                "Database connectie",
                MessageBoxButtons.OK);
            return string.Empty;
        }
    }

    /// <summary>
    /// Providers the specified XML text.
    /// </summary>
    /// <param name="xmlText">The XML text.</param>
    /// <returns>System.String.</returns>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for Provider
    public static string Provider(string xmlText)
    {
        var doc = new XmlDocument();
        doc.Load(xmlText);

        var node = doc.DocumentElement.SelectSingleNode("/serverdata/providerName");
        var text = node.InnerText;
        return text;
    }

    /// <summary>
    /// Punts the komma.
    /// </summary>
    /// <param name="s">The s.</param>
    /// <returns>System.String.</returns>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for PuntKomma
    public static string PuntKomma(string s)
    {
        s.Replace(',', '.');
        return s;
    }

    /// <summary>
    /// Servers the name.
    /// </summary>
    /// <param name="xmlText">The XML text.</param>
    /// <returns>System.String.</returns>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for ServerName
    public static string ServerName(string xmlText)
    {
        var doc = new XmlDocument();
        doc.Load(xmlText);

        var node = doc.DocumentElement.SelectSingleNode("/serverdata/server");
        var text = node.InnerText;
        return text;
    }

    /// <summary>
    /// Strips the specified s.
    /// </summary>
    /// <param name="s">The s.</param>
    /// <returns>System.String.</returns>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for Strip
    public static string Strip(string s)
    {
        // int iPos = 0;
        // int iCount = 0;
        var sF = string.Empty;
        var sF1 = string.Empty;
        foreach (var c in s)
        {
            if (c == (char) 45) sF += c;

            if (c == (char) 46) sF += c;
            if (c > (char) 47 && c < (char) 58) sF += c;
            if (c == (char) 44) sF += '.';

            // iCount++;
        }

        // iPos = sF.Length;
        // if (iPos >= 2)
        // {
        // 	sF1 = sF.Insert(iPos - 2, ".");
        // }
        // else
        // {
        sF1 = sF;

        // }
        return sF1;
    }

    /// <summary>
    /// Strip1s the specified s.
    /// </summary>
    /// <param name="s">The s.</param>
    /// <returns>System.String.</returns>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for Strip1
    public static string Strip1(string s)
    {
        var iPos = 0;
        var iCount = 0;
        var sF = string.Empty;
        var sF1 = string.Empty;
        if (s.Length > 0)
        {
            foreach (var c in s)
            {
                if (c == (char) 45) sF += c;
                if (c > (char) 47 && c < (char) 58) sF += c;
                if (c == (char) 44) iPos = iCount;
                iCount++;
            }

            if (iPos == 0)
            {
                iPos = sF.Length;
                sF1 = sF.Insert(iPos, "00");
            }
            else
            {
                sF1 = sF;
            }

            // iPos = sF.Length;
            // if (iPos >= 2)
            // {
            // 	sF = sF1.Insert(iPos - 2, ".");
            // 	sF1 = sF;
            // }
            // else
            // {
            // 	sF1 = sF;
            // }
        }

        return sF1;
    }

    /// <summary>
    /// Strip2s the specified s.
    /// </summary>
    /// <param name="s">The s.</param>
    /// <returns>System.String.</returns>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for Strip2
    public static string Strip2(string s)
    {
        var sF = string.Empty;
        var sF1 = string.Empty;
        if (s.Length > 0)
        {
            foreach (var c in s)
            {
                if (c == (char) 45) sF += c;
                if (c > (char) 47 && c < (char) 58) sF += c;
                else break;
            }

            sF1 = sF;
        }

        return sF1;
    }

    /// <summary>
    /// Strip4s the specified s.
    /// </summary>
    /// <param name="s">The s.</param>
    /// <returns>System.String.</returns>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for Strip4
    public static string Strip4(string s)
    {
        var iPos = 0;
        var iCount = 0;
        var sF = string.Empty;
        var sF1 = string.Empty;
        if (s.Length > 0)
        {
            foreach (var c in s)
            {
                if (c == (char) 45) sF += c;
                if (c > (char) 47 && c < (char) 58) sF += c;
                if (c == (char) 44) iPos = iCount;
                iCount++;
            }

            if (iPos == 0)
            {
                iPos = sF.Length;
                sF1 = sF.Insert(iPos, "00");
            }
            else
            {
                sF1 = sF;
            }

            // iPos = sF.Length;
            // if (iPos >= 2)
            // {
            // 	sF = sF1.Insert(iPos - 2, ".");
            // 	sF1 = sF;
            // }
            // else
            // {
            // 	sF1 = sF;
            // }
        }

        return sF1;
    }

    /// <summary>
    /// Strip5s the specified s.
    /// </summary>
    /// <param name="s">The s.</param>
    /// <returns>System.String.</returns>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for Strip5
    public static string Strip5(string s)
    {
        var sF = string.Empty;
        var sF1 = string.Empty;
        if (s.Length > 0)
        {
            foreach (var c in s)
                if (c == (char) 46)
                    sF += c;
                else if (c > (char) 47 && c < (char) 58) sF += c;
                else if (c == (char) 44) sF += (char) 46;
                else break;
            sF1 = sF;
        }

        return sF1;
    }

    /// <summary>
    /// Strip6s the specified s.
    /// </summary>
    /// <param name="s">The s.</param>
    /// <returns>System.String.</returns>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for Strip6
    public static string Strip6(string s)
    {
        var sF = string.Empty;
        var sF1 = string.Empty;
        short iTeller = 0;
        short iLengte = 0;
        short iPos = 0;

        iLengte = Convert.ToInt16(s.Length);

        foreach (var c in s)
        {
            if (c == (char) 46 && iPos >= iLengte - 2)
            {
                sF += c;
                if (iPos == iLengte - 2) iTeller = 2;
            }

            if (c > (char) 47 && c < (char) 58) sF += c;
            if (c == (char) 44)
            {
                sF += '.';
                iTeller++;
            }

            iPos++;
        }

        if (iTeller == 0)
        {
            sF += '.';
            sF += '0';
            sF += '0';
        }

        if (iTeller == 2) sF += '0';
        sF1 = sF;
        return sF1;
    }

    /// <summary>
    /// Users the name1.
    /// </summary>
    /// <param name="xmlText">The XML text.</param>
    /// <returns>System.String.</returns>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for UserName1
    public static string UserName1(string xmlText)
    {
        var doc = new XmlDocument();
        doc.Load(xmlText);

        var node = doc.DocumentElement.SelectSingleNode("/serverdata/name");
        var text = node.InnerText;
        return text;
    }
}
